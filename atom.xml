<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>geekhoon</title>
  <subtitle>善待自己</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://geekhoon.github.io/"/>
  <updated>2017-01-08T02:04:24.596Z</updated>
  <id>https://geekhoon.github.io/</id>
  
  <author>
    <name>geekhoon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>04.运算符</title>
    <link href="https://geekhoon.github.io/2017/01/08/04-%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>https://geekhoon.github.io/2017/01/08/04-运算符/</id>
    <published>2017-01-08T01:58:55.000Z</published>
    <updated>2017-01-08T02:04:24.596Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-算数运算符"><a href="#1-算数运算符" class="headerlink" title="1.算数运算符"></a>1.算数运算符</h3><pre><code>* 注意事项
    *加法运算符在连接字符串时要注意，只有直接与字符串相加才会转成字符串.字符串后面的&quot;+&quot;为&quot;连接&quot;,字符串前面的&quot;+&quot;还是加法
* ++和--放前放后区别:
    *符号放前放后,在变量自己独立计算时,没有区别
    *在与其他运算符同时计算时会有区别             
     如：
                int  i = 5;
                int  j = i++;
                System.out.println(i);
                System.out.println(j);
                //结果为i=6,j=5.
                //因为int  j = i++;相当于(1)int j = i;
                                        (2)i++;
     如：
                int  m = 5;
                int  n = ++m;
                System.out.println(m);
                System.out.println(n);
                //结果为m=6,n=6.
                //因为int  n = ++m;相当于(1)++m;

     如：
            public class Test1 {
                public static void main(String[] args) {
                     int x = 4;
                     int y = (--x)+(x--)+(x*10);
                     System.out.println(&quot;x = &quot; + x + &quot;,y = &quot; + y);
                }
            }
            思维误区:不要以为(--x)+(x--)+(x*10),都有各自括号,就互不影响,执行完(--x),x为3,再执行(x--)后,x为2,(x*10)为20,所以输出x为2,但是y=3+3+20=26,第二个3是因为先赋值,再自减
    如：
            public class Test2{
                public static void main(String[] args){
                    int a = 1;
                    if(a++ &gt; 1){
                        System.out.println(&quot;用2在判断&quot;);
                    }else{
                        System.out.println(&quot;用1在判断&quot;);
                    }
                    System.out.println(&quot;a=&quot;+a);
                }
            }
            本题证明了(a++ &gt; 1)是用a=1与1做大小判断,而不是2,说明a先比较,再自增.但最终输出a的大小都是2
</code></pre><a id="more"></a>
<h3 id="2-赋值运算符"><a href="#2-赋值运算符" class="headerlink" title="2.赋值运算符"></a>2.赋值运算符</h3><pre><code>* 有 =  +=  -=  *=  /=  %=  
* 注意:
     如：
                byte  b = 1;               (1)
                b = b + 1;                 (2)
                System.out.println(b);     (3)
                编译会报错,因为(1)中b为byte型,占1个字节,(2)中1为int类型,占4个字节,它们相加之后,是4字节.然后赋值给1字节大小的b,会损失精度.
                将(2)改成b =(byte) (b + 1);或者b += 1;都对.这两句等价
</code></pre><h3 id="3-比较运算符"><a href="#3-比较运算符" class="headerlink" title="3.比较运算符"></a>3.比较运算符</h3><pre><code>* 有 ==  !=  &gt;  &lt;  &gt;=  &lt;=  
* 注意:
     如：
                int  i = 3;
                int  j = 4;
                System.out.println(i=j);
                System.out.println(i==j);
                结果分别为4和true,因为程序自上而下执行,第一句输出语句执行完之后,i变为4.别忽视了输出语句中,赋值语句对变量在整个作用区间内也起作用.
</code></pre><h3 id="4-逻辑运算符"><a href="#4-逻辑运算符" class="headerlink" title="4.逻辑运算符"></a>4.逻辑运算符</h3><pre><code>* 对两个布尔数据进行计算,结果也是布尔类型
* 有 &amp;与  |或  !非  ^异或  &amp;&amp;短路与  ||短路或
    *^异或: 两边相同为false,不同为true
     如：
                true^flase 为    true 
                true^true  为   false
    *&amp;&amp;短路与: 左边结果为false,右边不执行
     如：
                int  i = 3;
                int  j = 4;
                System.out.println(i == j &amp;&amp; ++i &gt; 3);
                System.out.println(i);
                System.out.println(j);
                结果为3和4.   i == j 为flase, 所以++i &gt; 3并没有执行
    *||短路或: 左边结果为true,右边不执行
* 短路与 和 短路或 可以提高程序运行效率
</code></pre><h3 id="5-三元运算符"><a href="#5-三元运算符" class="headerlink" title="5.三元运算符"></a>5.三元运算符</h3><pre><code>* 公式:    布尔表达式 ? 结果1 : 结果2
</code></pre><h3 id="6-运算符优先级"><a href="#6-运算符优先级" class="headerlink" title="6.运算符优先级"></a>6.运算符优先级</h3><pre><code>优先级    描述          运算符
1    括号           ()、[]
2    正负号           +、-
3    自增自减，非     ++、--、!
4    乘除，取余      *、/、%
5    加减            +、-
6    移位运算       &lt;&lt;、&gt;&gt;、&gt;&gt;&gt;
7    大小关系       &gt;、&gt;=、&lt;、&lt;=
8    相等关系       ==、!=
9    按位与            &amp;
10    按位异或       ^
11    按位或            |
12    逻辑与            &amp;&amp;
13    逻辑或            ||
14    条件运算        ?:
15    赋值运算        =、+=、-=、*=、/=、%=
16    位赋值运算       &amp;=、|=、&lt;&lt;=、&gt;&gt;=、&gt;&gt;&gt;=
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-算数运算符&quot;&gt;&lt;a href=&quot;#1-算数运算符&quot; class=&quot;headerlink&quot; title=&quot;1.算数运算符&quot;&gt;&lt;/a&gt;1.算数运算符&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;* 注意事项
    *加法运算符在连接字符串时要注意，只有直接与字符串相加才会转成字符串.字符串后面的&amp;quot;+&amp;quot;为&amp;quot;连接&amp;quot;,字符串前面的&amp;quot;+&amp;quot;还是加法
* ++和--放前放后区别:
    *符号放前放后,在变量自己独立计算时,没有区别
    *在与其他运算符同时计算时会有区别             
     如：
                int  i = 5;
                int  j = i++;
                System.out.println(i);
                System.out.println(j);
                //结果为i=6,j=5.
                //因为int  j = i++;相当于(1)int j = i;
                                        (2)i++;
     如：
                int  m = 5;
                int  n = ++m;
                System.out.println(m);
                System.out.println(n);
                //结果为m=6,n=6.
                //因为int  n = ++m;相当于(1)++m;

     如：
            public class Test1 {
                public static void main(String[] args) {
                     int x = 4;
                     int y = (--x)+(x--)+(x*10);
                     System.out.println(&amp;quot;x = &amp;quot; + x + &amp;quot;,y = &amp;quot; + y);
                }
            }
            思维误区:不要以为(--x)+(x--)+(x*10),都有各自括号,就互不影响,执行完(--x),x为3,再执行(x--)后,x为2,(x*10)为20,所以输出x为2,但是y=3+3+20=26,第二个3是因为先赋值,再自减
    如：
            public class Test2{
                public static void main(String[] args){
                    int a = 1;
                    if(a++ &amp;gt; 1){
                        System.out.println(&amp;quot;用2在判断&amp;quot;);
                    }else{
                        System.out.println(&amp;quot;用1在判断&amp;quot;);
                    }
                    System.out.println(&amp;quot;a=&amp;quot;+a);
                }
            }
            本题证明了(a++ &amp;gt; 1)是用a=1与1做大小判断,而不是2,说明a先比较,再自增.但最终输出a的大小都是2
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="JAVA基础" scheme="https://geekhoon.github.io/categories/JAVA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JAVA基础语法" scheme="https://geekhoon.github.io/tags/JAVA%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>03.数据</title>
    <link href="https://geekhoon.github.io/2017/01/08/03-%E6%95%B0%E6%8D%AE/"/>
    <id>https://geekhoon.github.io/2017/01/08/03-数据/</id>
    <published>2017-01-08T01:56:31.000Z</published>
    <updated>2017-01-08T02:02:46.891Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-数据"><a href="#一-数据" class="headerlink" title="一.数据"></a>一.数据</h2><h3 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1.数据类型"></a>1.数据类型</h3><pre><code>* 程序=数据+逻辑
* 数据类型包括 
    * 1.基本数据类型:整数、小数、字符、布尔 
    * 2.引用数据类型:数组、类、接口
</code></pre><h3 id="2-常量"><a href="#2-常量" class="headerlink" title="2.常量"></a>2.常量</h3><pre><code>* 整数类型 
    * 十进制
    * 二进制:以0b(0B)开头,只有0和1  
    * 十六进制:以0x(0X)开头,0-9和A-F,F表示15 
    * 八进制:以0开头,最大数为7
* 小数类型(浮点类型)
* 布尔类型:true和flase为关键字
* 字符类型:单引号中仅能包含一个字符,不能不写字符,可以用一个空格
* 字符串类型:可以写0-n个字符  
</code></pre><a id="more"></a>
<h2 id="二-变量"><a href="#二-变量" class="headerlink" title="二.变量"></a>二.变量</h2><h3 id="1-变量概述"><a href="#1-变量概述" class="headerlink" title="1.变量概述"></a>1.变量概述</h3><pre><code>* 什么是变量?
    * 变量是内存中装载数据的小盒子，你只能用它来存数据和取数据
</code></pre><h3 id="2-计算机存储单元"><a href="#2-计算机存储单元" class="headerlink" title="2.计算机存储单元"></a>2.计算机存储单元</h3><pre><code>* 计算机中最小信息单元是?
    * 位(bit),也叫比特位.用b表示
* 计算机中储存和运算的最小单位是?
    * 一个字节,也就是一个byte.用B表示            
    * 常用储存单位
        *1B（字节） = 8bit
        *1KB = 1024B
        *1MB = 1024KB
        *1GB = 1024MB
        *1TB = 1024GB
        *1PB = 1024TB
</code></pre><h3 id="3-Java中数据类型四类八种"><a href="#3-Java中数据类型四类八种" class="headerlink" title="3.Java中数据类型四类八种"></a>3.Java中数据类型四类八种</h3><pre><code>* 数据类型四类八种
    * 四类    八种    字节数    数据表示范围
    * 整型    byte    1    -128～127
            short     2    
             int     4    
             long     8    
    * 浮点型    float    4    
              double   8    
    * 字符型    char    2    表示一个字符，如(&apos;a&apos;，&apos;A&apos;，&apos;0&apos;，&apos;家&apos;)
    * 布尔型    boolean    1    只有两个值true与false
</code></pre><h3 id="4-常量和数据类型"><a href="#4-常量和数据类型" class="headerlink" title="4.常量和数据类型"></a>4.常量和数据类型</h3><pre><code>* 常量
    * 整型常量默认是int类型.
    * 定义长整型数据如果值超过int取值范围后面要+&quot;L&quot;,凡添加了&quot;L&quot;,都是long类型
    * 浮点常量默认是double类型,没有后缀或以&quot;D&quot;为后缀,都是double型
    * 定义float类型的数据后面要+&quot;F&quot; 否则默认是double
* 写法:
    * long l = 1000; 对
    * long l = 12345678901; 错
    * long l = 12345678901L; 对 
    * float f = 1.0; 错
    * float f = 1.0F; 对
</code></pre><h3 id="5-定义变量"><a href="#5-定义变量" class="headerlink" title="5.定义变量"></a>5.定义变量</h3><pre><code>* 语法格式：
    数据类型  变量名  =  变量值;
     int        a    =  100;        
* 代码:
    public class Variable {
        public static void main(String[] args) {
            int a = 10;
            double b = 3.14;
            char c = &apos;z&apos;;
            String s = &quot;i love java&quot;;
            System.out.println(a);
        }
    }    
* 注意:
    a.字符串String属于引用类型,不属于基本类型
    b.变量定义后,不赋值,能编译通过,但运行时会报错.不赋值不能使用。
    c.变量使用时有作用域的限制。(所在的大括号范围内)
    d.变量不允许重复定义
</code></pre><h3 id="6-数据类型转换"><a href="#6-数据类型转换" class="headerlink" title="6.数据类型转换"></a>6.数据类型转换</h3><pre><code>* 自动类型转换：
    *表示范围小的数据类型转换成范围大的数据类型,如byte转成int
    *自动类型转换格式：
        范围大的数据类型 变量 = 范围小的数据类型值；
        如：
                double d = 1000;
        或
                int i = 100;
                double d2 = i;
* 强制类型转换：
    * 表示范围大的数据类型转换成范围小的数据类型
     *强制类型转换格式：
        范围小的数据类型  变量 = (范围小的数据类型) 范围大的数据类型值;
        如：
                int  i = (int)6.718;   //i的值为6
        或
                double  d = 3.14;
                int  i2 = (int)d;     //i2的值为3
* 注意：
    *布尔类型不参与类型转换
    *byte &lt; short &lt; int &lt; long &lt; float &lt; double
    *
                byte b = (byte)200;
                System.out.println(b);注意输出结果不是127,因为会损失精度
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-数据&quot;&gt;&lt;a href=&quot;#一-数据&quot; class=&quot;headerlink&quot; title=&quot;一.数据&quot;&gt;&lt;/a&gt;一.数据&lt;/h2&gt;&lt;h3 id=&quot;1-数据类型&quot;&gt;&lt;a href=&quot;#1-数据类型&quot; class=&quot;headerlink&quot; title=&quot;1.数据类型&quot;&gt;&lt;/a&gt;1.数据类型&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;* 程序=数据+逻辑
* 数据类型包括 
    * 1.基本数据类型:整数、小数、字符、布尔 
    * 2.引用数据类型:数组、类、接口
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;2-常量&quot;&gt;&lt;a href=&quot;#2-常量&quot; class=&quot;headerlink&quot; title=&quot;2.常量&quot;&gt;&lt;/a&gt;2.常量&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;* 整数类型 
    * 十进制
    * 二进制:以0b(0B)开头,只有0和1  
    * 十六进制:以0x(0X)开头,0-9和A-F,F表示15 
    * 八进制:以0开头,最大数为7
* 小数类型(浮点类型)
* 布尔类型:true和flase为关键字
* 字符类型:单引号中仅能包含一个字符,不能不写字符,可以用一个空格
* 字符串类型:可以写0-n个字符  
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="JAVA基础" scheme="https://geekhoon.github.io/categories/JAVA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JAVA基础语法" scheme="https://geekhoon.github.io/tags/JAVA%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>02.注释、关键字、标识符</title>
    <link href="https://geekhoon.github.io/2017/01/08/02-%E6%B3%A8%E9%87%8A%E3%80%81%E5%85%B3%E9%94%AE%E5%AD%97%E3%80%81%E6%A0%87%E8%AF%86%E7%AC%A6/"/>
    <id>https://geekhoon.github.io/2017/01/08/02-注释、关键字、标识符/</id>
    <published>2017-01-08T01:53:26.000Z</published>
    <updated>2017-01-08T02:04:09.576Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-注释"><a href="#1-注释" class="headerlink" title="1.注释"></a>1.注释</h3><pre><code>* 编译时,编译器会忽略注释
* 包含
    * 单行注释:// 
    * 多行注释:/*....*/ 
    * 文档注释:/**...*/ 
* 多行注释不能嵌套多行注释
</code></pre><h3 id="2-关键字"><a href="#2-关键字" class="headerlink" title="2.关键字"></a>2.关键字</h3><pre><code>* 被JAVA赋予特殊含义,具有专门用途的单词
* JAVA中关键字均为小写
* main不是关键字
</code></pre><h3 id="3-标识符"><a href="#3-标识符" class="headerlink" title="3.标识符"></a>3.标识符</h3><pre><code>* JAVA中,程序员自己定义的内容
* 规则: 
    * 1.组成:字母52个(a-z,A-Z)、数字(0-9)、下划线_、美元符$
    * 2.注意:不能以数字开头、不能是关键字、标识符不能有空格、严格区分大小写
    * 3.类的名字:首字母大写,第二个单词开始首字母大写
    * 4.方法名字与变量名一样:首字母小写,第二个单词开始首字母大写 
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-注释&quot;&gt;&lt;a href=&quot;#1-注释&quot; class=&quot;headerlink&quot; title=&quot;1.注释&quot;&gt;&lt;/a&gt;1.注释&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;* 编译时,编译器会忽略注释
* 包含
    * 单行注释:// 
    * 多行注释:/*....*/
    
    </summary>
    
      <category term="JAVA基础" scheme="https://geekhoon.github.io/categories/JAVA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JAVA基础语法" scheme="https://geekhoon.github.io/tags/JAVA%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>01.JAVA开发概述及HelloWorld</title>
    <link href="https://geekhoon.github.io/2017/01/08/01-JAVA%E5%BC%80%E5%8F%91%E6%A6%82%E8%BF%B0%E5%8F%8AHelloWorld/"/>
    <id>https://geekhoon.github.io/2017/01/08/01-JAVA开发概述及HelloWorld/</id>
    <published>2017-01-08T01:50:26.000Z</published>
    <updated>2017-01-08T01:51:20.189Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-JAVA环境搭建"><a href="#一-JAVA环境搭建" class="headerlink" title="一.JAVA环境搭建"></a>一.JAVA环境搭建</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h3><pre><code>* 创始团队:詹姆斯-高斯林
* sun开发,已被oracle收购.
* 版本(平台)
    * JAVASE(标准版):开发简单桌面应用,不能开发大型项目.也叫J2SE 
    * JAVAEE(企业版或Web版):可做电商、企业级应用(如ERP、CRM、BOS、OA等)，也叫J2EE
    * JAVAME（嵌入式开发）：也叫J2ME
</code></pre><a id="more"></a>
<h3 id="2-常用DOS命令"><a href="#2-常用DOS命令" class="headerlink" title="2.常用DOS命令"></a>2.常用DOS命令</h3><pre><code>* 清屏：cls(clear screen)
* 切换盘符：盘符:
* 进入指定目录：cd（change directory）
* 返回上一级目录：cd..
* 返回盘符根目录：cd\
* 进入其他盘符文件夹：cd 盘符:\文件夹名
* 显示当前目录下的文件和子目录信息：dir
</code></pre><h3 id="3-开发环境"><a href="#3-开发环境" class="headerlink" title="3.开发环境"></a>3.开发环境</h3><pre><code>* JDK(JAVA Development Kit):java开发工具包
* JDK包含
    * JRE(JAVA Runtime Environment):JAVA运行环境
    * JAVA开发工具
</code></pre><h3 id="4-跨平台特性"><a href="#4-跨平台特性" class="headerlink" title="4.跨平台特性"></a>4.跨平台特性</h3><pre><code>* 平台指操作系统(Windows/Linux/mac)
* 一次编写,到处运行
* 跨平台特性依赖于JVM(JAVA Virtual Machine)
* JRE包含
    * JVM 
    * 类库  
</code></pre><h2 id="二-HelloWorld"><a href="#二-HelloWorld" class="headerlink" title="二.HelloWorld"></a>二.HelloWorld</h2><pre><code>* 源文件:  .java 
* 编译(编译器):    .java   →    .class(字节码文件)
* 运行(解释器):    运行.class

public class HelloWorld{
    public static void main(String[] args){
        System.out.println(&quot;HelloWorld&quot;);
    }
}
</code></pre><p><strong>注意:</strong><br><strong>1.class前加上public,类名(HelloWorld)要与文件名(HelloWorld.java)一致,不加public,类名可换成其他</strong><br><strong>2.主方法是程序的入口,被虚拟机调用,它能保证程序的独立运行</strong><br>编译:<code>javac HelloWorld.java</code><br>编译时HelloWorld.java可以写成helloworld.java,因为对源文件来说HellWorld.java和helloworld.java所指的源文件是唯一的<br>运行:<code>java HelloWorld</code><br>运行时HelloWorxld是类名,不能写成helloworld</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-JAVA环境搭建&quot;&gt;&lt;a href=&quot;#一-JAVA环境搭建&quot; class=&quot;headerlink&quot; title=&quot;一.JAVA环境搭建&quot;&gt;&lt;/a&gt;一.JAVA环境搭建&lt;/h2&gt;&lt;h3 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1.概述&quot;&gt;&lt;/a&gt;1.概述&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;* 创始团队:詹姆斯-高斯林
* sun开发,已被oracle收购.
* 版本(平台)
    * JAVASE(标准版):开发简单桌面应用,不能开发大型项目.也叫J2SE 
    * JAVAEE(企业版或Web版):可做电商、企业级应用(如ERP、CRM、BOS、OA等)，也叫J2EE
    * JAVAME（嵌入式开发）：也叫J2ME
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="JAVA基础" scheme="https://geekhoon.github.io/categories/JAVA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JAVA基础语法" scheme="https://geekhoon.github.io/tags/JAVA%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>JAVA基础题</title>
    <link href="https://geekhoon.github.io/2017/01/05/JAVA%E5%9F%BA%E7%A1%80%E9%A2%98/"/>
    <id>https://geekhoon.github.io/2017/01/05/JAVA基础题/</id>
    <published>2017-01-05T12:51:09.000Z</published>
    <updated>2017-01-05T14:05:16.669Z</updated>
    
    <content type="html"><![CDATA[<p>1.Java注释有3种，单行注释、多行注释和文档注释，下列有关注释的说法，不正确的是（）</p>
<p>A. 注释指的是用来对程序的某个功能或者某行代码进行解释说明<br>B. 注释只在Java源文件中有效<br>C. 在多行注释中，能够嵌套多行注释<br>D. 注释不会被编译到class字节码文</p>
<p>2.下面哪种类型的文件可以在Java虚拟机中运行？（）</p>
<p>A. .java<br>B. .jre<br>C. .exe<br>D. .class<br><a id="more"></a><br>3.下列关于变量和常量的说法正确的是（）</p>
<p>A. 常量表示不能被改变的值，例如1、2、“abc”都是常量<br>B. 常量表示常见的变量<br>C. int x = 0;代码中，x表示常量，0表示变量<br>D. 在同一个大括号｛｝内，定义的变量不能够重名</p>
<p>4.下列定义变量格式，错误的是（）</p>
<p>A. float x,y=0;<br>B. float f = 1999.99F;<br>C. String str = 字符串;<br>D. char x = ‘0’;</p>
<p>5.下列各种符号的定义格式，那种在java语言中是错误的变量定义（）</p>
<p>A. int myVal =1;<br>B. char $myVal =1;<br>C. byte _myVal =1;<br>D.float 3.14myVal=1;</p>
<p>6.Java语言中的int及char数据类型的长度分别为（）</p>
<p>A. 16位和8位<br>B. 8位和16位<br>C. 32位和16位<br>D. 32位和8位</p>
<p>7.语句System.out.println(1+2+”java”+3+4)输出的结果是（）</p>
<p>A. 3java34<br>B. 12java34<br>C. 3java7<br>D. 12java7</p>
<p>8.下列关于Java函数的说法不正确的是（）</p>
<p>A.函数也叫方法，函数就是定义在类中，具有特定功能的一段小程序<br>B.方法体中不能有任何代码（抽象函数除外）<br>C.函数必须先定义，才能被调用<br>D.函数（构造函数除外）要有返回值类型</p>
<p>9.以下关于函数重载的说法正确的有（）</p>
<p>A. 方法名必须一样<br>B. 与返回值类型无关<br>C. 参数个数或者顺序不一样<br>D. 参数类型不一样</p>
<p>10.关于数组的说法，正确的是（）</p>
<p>A. 数组里面存放的是相同类型的数据<br>B. 获取数组的长度使用length属性<br>C. 获取数组的大小使用size方法<br>D. 数组的长度是可变的</p>
<p>11.想要结果输出为0，则可以做哪些修改？（）</p>
<pre><code>int [] arr = new int[1];
arr[0] = 3;               
System.out.println( arr[1] )
</code></pre><p>A. 2修改为<code>arr[3] = 0;</code><br>B. 3修改为<code>System.out.println(0)</code><br>C. 1修改为<code>int [ ] arr = new int[2];</code><br>D. 不用修改了，结果就是0会报错</p>
<p>12.下列二维数组定义错误的是（）</p>
<pre><code>A.int[][] arr = new int[3][2];
B.int arr[][] = new int[3][]; 
C.int[][] arr = {{1,2,3},{4,5},{6,7,8,9}};
D.int arr[][] ={{2,3},{6},9};
</code></pre><p>13.下面代码的运行结果是（）</p>
<pre><code>public static void main(String[] args){
int x = 80;
x ++;
switch(x){
case 80:
System.out.println(80);
case 81:
System.out.println(81);
default:
System.out.println(82);
}
}
</code></pre><p>A. 80<br>B. 80 81<br>C. 81<br>D. 81 82</p>
<p>14.下面程序运行的结果是（）</p>
<pre><code>public static void main(String[] args){
    int a = 1;
    if(a++&gt;1){
        System.out.println(a);
    }else{
        System.out.println(a);
    }
}
</code></pre><p>A.1<br>B.2<br>C.0<br>D.编译报错</p>
<p><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>答案:1~5:C,D,AD,C,D 6~10:C,A,B,ABCD,AB 11~14:BC,D,D,B</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.Java注释有3种，单行注释、多行注释和文档注释，下列有关注释的说法，不正确的是（）&lt;/p&gt;
&lt;p&gt;A. 注释指的是用来对程序的某个功能或者某行代码进行解释说明&lt;br&gt;B. 注释只在Java源文件中有效&lt;br&gt;C. 在多行注释中，能够嵌套多行注释&lt;br&gt;D. 注释不会被编译到class字节码文&lt;/p&gt;
&lt;p&gt;2.下面哪种类型的文件可以在Java虚拟机中运行？（）&lt;/p&gt;
&lt;p&gt;A. .java&lt;br&gt;B. .jre&lt;br&gt;C. .exe&lt;br&gt;D. .class&lt;br&gt;
    
    </summary>
    
      <category term="JAVA基础" scheme="https://geekhoon.github.io/categories/JAVA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="题目" scheme="https://geekhoon.github.io/tags/%E9%A2%98%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>写在最前面</title>
    <link href="https://geekhoon.github.io/2017/01/01/%E5%86%99%E5%9C%A8%E6%9C%80%E5%89%8D%E9%9D%A2/"/>
    <id>https://geekhoon.github.io/2017/01/01/写在最前面/</id>
    <published>2017-01-01T15:09:33.000Z</published>
    <updated>2017-01-01T15:14:41.840Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>一生中总会遇到这样的时候，你的内心已经兵荒马乱天翻地覆了，可是在别人看来你只是比平时沉默了一点，没人会觉得奇怪。这种战争，注定单枪匹马。           ———白岩松 《痛并快乐着》</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一生中总会遇到这样的时候，你的内心已经兵荒马乱天翻地覆了，可是在别人看来你只是比平时沉默了一点，没人会觉得奇怪。这种战争，注定单枪匹马。           ———白岩松 《痛并快乐着》&lt;/p&gt;
&lt;/blockquote&gt;

    
    </summary>
    
    
  </entry>
  
</feed>
