<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>geekhoon</title>
  <subtitle>怕, 你就输一辈子</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://geekhoon.github.io/"/>
  <updated>2017-04-07T08:55:21.093Z</updated>
  <id>https://geekhoon.github.io/</id>
  
  <author>
    <name>geekhoon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Cookie&amp;Session</title>
    <link href="https://geekhoon.github.io/2017/04/07/JavaWeb-10-Cookie-Session/"/>
    <id>https://geekhoon.github.io/2017/04/07/JavaWeb-10-Cookie-Session/</id>
    <published>2017-04-07T08:13:10.000Z</published>
    <updated>2017-04-07T08:55:21.093Z</updated>
    
    <content type="html"><![CDATA[<h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><p>用户打开浏览器访问某网站,做出一系列的请求及响应,直至用户退出浏览器的整个过程,视为一次”会话”<br><a id="more"></a></p>
<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>是客服端的会话技术,存取数据的对象</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>1.会话级别:<br>   Cookie默认是会话级别的,即会话结束,Cookie失效,通常会话结束即浏览器关闭<br>2.持久级别:<br>   可以通过setMaxAge(int code)(单位秒)方法设置Cookie的生命;<br>   当code &gt; 0时,代表Cookie生命周期是code秒<br>   当code = 0时,代表删除Cookie,Cookie失效;<br>   当code &lt; 0时,代表默认状态,即会话级别<br>注意:<br>(1)不设置setMaxAge,Cookie默认是存储在浏览器内存,会话结束即关闭浏览器时,Cookie就会消亡<br>(2)设置setMaxAge,在设定时间内关闭浏览器,浏览器会将Cookie序列化存储到磁盘,在过期时间前再次打开浏览器,浏览器存储的还是当前Cookie</p>
<h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><p>new Cookie(String name,String value);           –&gt; 创建Cookie;<br>setMaxAge(int code)                             –&gt; 设置Cookie的生命;<br>HttpServletResponse.addCookie(Cookie cookie);   –&gt; 向客户端设置Cookie;<br>HttpServletReqeust.getCookies();                –&gt; 获取客户端请求中的Cookie;<br>Cookie.getName();                               –&gt; 获取Cookie名称;<br>Cookie.setPath(String uri);                     –&gt; 设置Cookie的允许访问路径;<br>Cookie.setValue(String newValue);               –&gt; 重置Cookie值;<br>Cookie.getValue();                              –&gt; 获取Cookie值;</p>
<h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">(<span class="number">1</span>)服务器创建一个Cookie </div><div class="line">	Cookie c = <span class="keyword">new</span> Cookie(键,值);</div><div class="line">(<span class="number">2</span>)服务器发送Cookie到浏览器</div><div class="line">	response.addCookie(c);</div><div class="line">	在响应头中设置Cookie: set-Cookie: <span class="string">"键=值"</span></div><div class="line">(<span class="number">3</span>)浏览器解析响应头,取出Cookie信息,并存储</div><div class="line">(<span class="number">4</span>)接下来,再请求服务器时,请求头携带Cookie信息到服务器,格式Cookie:<span class="string">"键=值"</span></div><div class="line">(<span class="number">5</span>)服务器获取并处理Cookie</div><div class="line">	Cookies[] cs = request.getCookies();<span class="comment">//第一次访问,每次Cookie,cs为null</span></div><div class="line">	<span class="keyword">if</span>(cs != <span class="keyword">null</span>)&#123;</div><div class="line">		<span class="keyword">for</span>(Cookie c : cs)</div><div class="line">		&#123;</div><div class="line">			<span class="comment">//获取Cookie信息</span></div><div class="line">			c.getName() ---获取键</div><div class="line">			c.getValue() ---获取值</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h4 id="Cookie重名问题"><a href="#Cookie重名问题" class="headerlink" title="Cookie重名问题"></a>Cookie重名问题</h4><p>需求: 浏览器可以存储同名Cookie<br>实现:<br>   1.为同名Cookie设置不同Path标记<br>   2.所属站点不同(站点就是访问的域名)<br>   以上条件满足一个即可<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">默认:<span class="comment">//Cookie中只存储了A=2</span></div><div class="line">Cookie c1 = <span class="keyword">new</span> Cookie(<span class="string">"A"</span>,<span class="string">"1"</span>);</div><div class="line">Cookie c2 = <span class="keyword">new</span> Cookie(<span class="string">"A"</span>,<span class="string">"2"</span>);</div><div class="line">response.addCookie(c1);</div><div class="line">response.addCookie(c2);</div><div class="line"></div><div class="line">设置路径:</div><div class="line">Cookie c1 = <span class="keyword">new</span> Cookie(<span class="string">"A"</span>,<span class="string">"1"</span>);</div><div class="line">Cookie c2 = <span class="keyword">new</span> Cookie(<span class="string">"A"</span>,<span class="string">"2"</span>);</div><div class="line">c1.setPath(<span class="string">"项目名/test1"</span>);</div><div class="line">c2.setPath(<span class="string">"项目名/test2"</span>);</div><div class="line">response.addCookie(c1);</div><div class="line">response.addCookie(c2);</div></pre></td></tr></table></figure></p>
<p>Path值设置规则:<br>(1)设置Cookie允许访问的路径,设置的路径以及子路径都可以允许访问<br>   setPath(“/a/b/c”) 只有完全匹配该路径的Servlet或当前路径的子级Servlet才可以获取Cookie<br>   /a/b/c/hehe   true<br>   /a/b/c/d/hha  true<br>   /a/c/heh      false<br>(2)setPath(“/“):当前Tomcat下的所有项目都可以访问该Cookie</p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>1.Cookie存储在浏览器中<br>2.每个浏览器都有自己存储Cookie的策略,不同浏览器中Cookie互不影响<br>3.当前Cookie设置时,如果键名相同,后发送的Cookie,会覆盖之前发送的Cookie<br>4.浏览器关闭后重启,认为是第一次访问,因为关闭浏览器时,会话结束,浏览器保存的Cookie消亡了<br>  解决:浏览器关闭时.序列化Cookie,重启服务器时,读取Cookie<br>  实现:为Cookie设置一个有效时间(setMaxAge),在时间内关闭浏览器,浏览器会将Cookie序列化存储到磁盘</p>
<h3 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h3><p>1.Cookie除了name value maxage path 还有一些可选属性,可能有bug,不建议使用<br>2.理论上,浏览器端保存时,为一台服务器最多提供的空间是支持20个Cookie;<br>  理论上,浏览器最多可以存储300个Cookie<br>3.Cookie存储的信息量最好控制在4Kb之内,实际上只存少量数据<br>4.Cookie可以唯一的标志客户端,常用于管理Session(重要)</p>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>访问一个页面,如果是第一次访问,输出文本:这是第一次访问<br>如果不是第一次访问,输出上次的访问时间</p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.geekhoon.demo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Servlet implementation class Welcome</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Welcome</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line"></div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">		</div><div class="line">		response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</div><div class="line">		PrintWriter out = response.getWriter();</div><div class="line">		</div><div class="line">		<span class="comment">//创建Cookie对象</span></div><div class="line">		Cookie c = <span class="keyword">new</span> Cookie(<span class="string">"time"</span>,System.currentTimeMillis()+<span class="string">""</span>);</div><div class="line">		</div><div class="line">		<span class="comment">//c.setMaxAge(60);</span></div><div class="line">		</div><div class="line">		<span class="comment">//服务器获取浏览器传来的Cookie</span></div><div class="line">		Cookie[] cs = request.getCookies();</div><div class="line">		</div><div class="line">		<span class="comment">//不为null,说明不是第一次访问</span></div><div class="line">		<span class="keyword">if</span> (cs != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">for</span> (Cookie cookie : cs) &#123;</div><div class="line">				<span class="comment">//取出所有Cookie后,看有没有一个Cookie是记录上次访问时间的,即键是time的</span></div><div class="line">				<span class="keyword">if</span> (<span class="string">"time"</span>.equals(cookie.getName())) &#123;</div><div class="line">					out.write(<span class="string">"上次访问时间: "</span>+cookie.getValue());</div><div class="line">					<span class="comment">//将Cookie发送到浏览器,覆盖上一次time里的值</span></div><div class="line">					response.addCookie(c);</div><div class="line">					<span class="keyword">return</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;	</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="comment">//为null,说明是第一次访问</span></div><div class="line">			out.write(<span class="string">"这是第一次访问"</span>);</div><div class="line">			<span class="comment">//将Cookie发送到浏览器</span></div><div class="line">			response.addCookie(c);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		doGet(request, response);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;会话&quot;&gt;&lt;a href=&quot;#会话&quot; class=&quot;headerlink&quot; title=&quot;会话&quot;&gt;&lt;/a&gt;会话&lt;/h2&gt;&lt;p&gt;用户打开浏览器访问某网站,做出一系列的请求及响应,直至用户退出浏览器的整个过程,视为一次”会话”&lt;br&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="https://geekhoon.github.io/categories/JavaWeb/"/>
    
    
      <category term="前端开发" scheme="https://geekhoon.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="Tomcat" scheme="https://geekhoon.github.io/tags/Tomcat/"/>
    
      <category term="HTTP" scheme="https://geekhoon.github.io/tags/HTTP/"/>
    
      <category term="Session&amp;Cookie" scheme="https://geekhoon.github.io/tags/Session-Cookie/"/>
    
  </entry>
  
  <entry>
    <title>HttpServletRequest</title>
    <link href="https://geekhoon.github.io/2017/04/06/JavaWeb-09-HttpServletRequest/"/>
    <id>https://geekhoon.github.io/2017/04/06/JavaWeb-09-HttpServletRequest/</id>
    <published>2017-04-06T09:17:50.000Z</published>
    <updated>2017-04-06T10:29:29.658Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>HttpServletRequest对象是封装请求消息的对象,用于操作请求消息</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>操作请求行:<br>    getMethod();        –&gt; 获取请求方式;<br>    getContextPath();    –&gt; 获取项目名;<br>    getRemoteAddr();    –&gt; 获取客户端的ip地址;<br>    getServletPath();    –&gt; 获取url-pattern;</p>
<p>操作请求参数:<br>    getParameter(String name);    –&gt; 通过参数名获取第一个参数值;<br>    getParameterValues(String name);    –&gt; 通过参数名获取一组参数值;<br>    getParameterMap();                    –&gt; 获取所有参数(key:参数名;value:参数值);</p>
<p>解决请求中文乱码问题:<br>    Post方式:<br>            setCharacterEncoding(“字符集”);<br>    Get方式:<br>            new String(str.getBytes(“ISO8859-1”),”UTF-8”);</p>
<p>传递数据:<br>    setAttribute(String name , Object obj);    –&gt; 存数据;<br>    getAttribute(String name);                –&gt; 获取数据;<br>    removeAttribute(String name);            –&gt; 移除数据;<br>    getAttributeNames();                    –&gt; 获取所有数据名;</p>
<h2 id="请求处理"><a href="#请求处理" class="headerlink" title="请求处理"></a>请求处理</h2><h3 id="请求重发"><a href="#请求重发" class="headerlink" title="请求重发"></a>请求重发</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">HttpRequest(请求转发):</div><div class="line">    getRequestDispatcher(String <span class="string">"Servlet的路径"</span>).forward(HttpServletRequest request,HttpServletResponse response);</div></pre></td></tr></table></figure>
<h3 id="请求重定向"><a href="#请求重定向" class="headerlink" title="请求重定向"></a>请求重定向</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">HttpResponse(请求重定向):</div><div class="line">    sendRedirect(String <span class="string">"资源路径"</span>);</div></pre></td></tr></table></figure>
<h3 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h3><hr>
<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>1.<br>请求转发: 发生在服务器,只能转发服务器内部资源<br>重定向: 发生在客户端,可以重定向到任意资源<br>2.<br>请求转发: 最后执行的Servlet的路径不在浏览器地址栏显示,地址栏地址不变<br>重定向: 最后访问的Servlet的路径在地址栏显示,地址栏地址会发生变化<br>3.<br>请求转发: 只有一次请求,一次响应<br>重定向: 重定向次数+1次请求   重定向次数+1次响应<br>4.<br>请求转发: 路径不需要加项目名<br>重定向: 路径需要加项目名<br>5.<br>请求转发: 当前要转发的Servlet不能写出数据,写出也不会传递到客户端,转发之前,开启了流,流之前如果没有设置编码集还会产生乱码<br>重定向: 可以写出数据,但是意义不大,由于浏览器执行速度快,当前数据基本无法显示(这是合法操作)</p>
<h2 id="路径问题-———————————-看视频"><a href="#路径问题-———————————-看视频" class="headerlink" title="路径问题 ## ———————————-看视频"></a>路径问题 ## ———————————-看视频</h2><p> A、表单中使用 action  ——-  有项目名<br> B、超链接中使用了 ———— 有项目名<br> C、ServletContext.getResourceAsStream(“资源路径”); —— 没有项目名<br> D、请求转发  —————– 没有项目名<br> E、重定向 ——————- 有项目名</p>
<p> 记住：<br>  给浏览器用的都有项目名<br>  给服务器用的都没有项目名</p>
<h2 id="BeanUtils-———————————反射"><a href="#BeanUtils-———————————反射" class="headerlink" title="BeanUtils ## ———————————反射"></a>BeanUtils ## ———————————反射</h2><p>BeanUtils是将数据封装成JavaBean对象</p>
<h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">BeanUtils.populate(Object bean,Map&lt;String,String[] properties);</div><div class="line"></div><div class="line">ConvertUtils:</div><div class="line">    是什么:</div><div class="line">        格式转换器;</div><div class="line"></div><div class="line">    作用:</div><div class="line">        转换数据格式;</div><div class="line"></div><div class="line">    使用:(固定格式)</div><div class="line">        <span class="comment">// 1) 创建日期转换器;</span></div><div class="line">        DateConverter dateConverter = <span class="keyword">new</span> DateConverter();</div><div class="line">        <span class="comment">// 2) 设置当前日期转换的字符串格式;</span></div><div class="line">        dateConverter.setPattern(<span class="string">"yyyy-MM-dd"</span>);</div><div class="line">        <span class="comment">// 3) 注册日期转换器;</span></div><div class="line">        ConvertUtils.register(dateConverter, Date.class);</div></pre></td></tr></table></figure>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanUtils</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">populate</span><span class="params">(Object object, Map&lt;String, String[]&gt; properties)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// 1) 创建日期转换器;</span></div><div class="line">            DateConverter dateConverter = <span class="keyword">new</span> DateConverter();</div><div class="line">            <span class="comment">// 2) 设置当前日期转换的字符串格式;</span></div><div class="line">            dateConverter.setPatterns(<span class="keyword">new</span> String[] &#123; <span class="string">"yyyy-MM-dd"</span>, <span class="string">"yyyy/MM/dd"</span> &#125;);</div><div class="line">            <span class="comment">// 3) 注册日期转换器;</span></div><div class="line">            ConvertUtils.register(dateConverter, Date.class);</div><div class="line"></div><div class="line">            BeanUtils.populate(object, properties);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">	----------------------------使用反射-------------------------------</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">populate</span><span class="params">(Class&lt;T&gt; clazz, Map&lt;String, String[]&gt; properties)</span> </span>&#123;</div><div class="line">        T bean = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            bean = clazz.newInstance();</div><div class="line"></div><div class="line">            <span class="comment">// 1) 创建日期转换器;</span></div><div class="line">            DateConverter dateConverter = <span class="keyword">new</span> DateConverter();</div><div class="line">            <span class="comment">// 2) 设置当前日期转换的字符串格式;</span></div><div class="line">            dateConverter.setPatterns(<span class="keyword">new</span> String[] &#123; <span class="string">"yyyy-MM-dd"</span>, <span class="string">"yyyy/MM/dd"</span> &#125;);</div><div class="line">            <span class="comment">// 3) 注册日期转换器;</span></div><div class="line">            ConvertUtils.register(dateConverter, Date.class);</div><div class="line"></div><div class="line">            BeanUtils.populate(bean, properties);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> bean;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p> A、提供一个注册页面<br> B、注册页面客户可以录入个人信息（账号 密码 姓名 性别 ….）<br> C、单击注册按钮，跳转到一个Servlet,这个 Servlet要注册个人信息<br> D、根据最后的注册结果给出对应的提示</p>
<h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><h4 id="1-导入jar包及配置文件"><a href="#1-导入jar包及配置文件" class="headerlink" title="1.导入jar包及配置文件"></a>1.导入jar包及配置文件</h4><p>jar包: c3p0,dbutils,mysql,BeanUtils<br>配置文件: c3p0-config.xml</p>
<h4 id="2-创建数据库-表"><a href="#2-创建数据库-表" class="headerlink" title="2.创建数据库,表"></a>2.创建数据库,表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">database</span> my;</div><div class="line"><span class="keyword">use</span> my;</div><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</div><div class="line"> uid <span class="built_in">varchar</span>(<span class="number">32</span>) primary <span class="keyword">key</span>,</div><div class="line"> username <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">unique</span>,</div><div class="line"> <span class="keyword">password</span> <span class="built_in">varchar</span>(<span class="number">100</span>),</div><div class="line"> email <span class="built_in">varchar</span>(<span class="number">100</span>),</div><div class="line"> <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">100</span>),</div><div class="line"> sex <span class="built_in">varchar</span>(<span class="number">10</span>)</div><div class="line">);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span> (<span class="string">'00a'</span>,<span class="string">'admin'</span>,<span class="string">'123'</span>,<span class="string">'admin@163.com'</span>,<span class="string">'管理员'</span>,<span class="string">'man'</span>);</div></pre></td></tr></table></figure>
<h4 id="3-注册界面"><a href="#3-注册界面" class="headerlink" title="3.注册界面"></a>3.注册界面</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/day15/Servlet"</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"username"</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-6"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"inputPassword3"</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-6"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"inputPassword3"</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"confirmpwd"</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>确认密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-6"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"confirmpwd"</span> <span class="attr">placeholder</span>=<span class="string">"请输入确认密码"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"inputEmail3"</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-6"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"inputEmail3"</span> <span class="attr">placeholder</span>=<span class="string">"Email"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"usercaption"</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-6"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"usercaption"</span> <span class="attr">placeholder</span>=<span class="string">"请输入姓名"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group opt"</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"inlineRadio1"</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">label</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-6"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"radio-inline"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">id</span>=<span class="string">"inlineRadio1"</span> <span class="attr">value</span>=<span class="string">"boy"</span>&gt;</span> 男</div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"radio-inline"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">id</span>=<span class="string">"inlineRadio2"</span> <span class="attr">value</span>=<span class="string">"girl"</span>&gt;</span> 女</div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>		</div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-offset-2 col-sm-10"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>  <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">value</span>=<span class="string">"注册"</span> <span class="attr">border</span>=<span class="string">"0"</span></span></div><div class="line">	    <span class="attr">style</span>=<span class="string">"background: url('./images/register.gif') no-repeat scroll 0 0 rgba(0, 0, 0, 0);</span></div><div class="line">	    height:35px;width:100px;color:white;"&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="4-构建代码结构"><a href="#4-构建代码结构" class="headerlink" title="4.构建代码结构"></a>4.构建代码结构</h4><p>com.geekhoon.servlet<br>com.geekhoon.service<br>com.geekhoon.dao<br>com.geekhoon.domain<br>com.geekhoon.utils</p>
<h4 id="5-domain"><a href="#5-domain" class="headerlink" title="5.domain"></a>5.domain</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String uid;</div><div class="line">	<span class="keyword">private</span> String username;</div><div class="line">	<span class="keyword">private</span> String password;</div><div class="line">	<span class="keyword">private</span> String email;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> String sex;</div><div class="line"></div><div class="line">	<span class="comment">//无参构造</span></div><div class="line"></div><div class="line">	<span class="comment">//get&amp;set</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="6-servlet"><a href="#6-servlet" class="headerlink" title="6.servlet"></a>6.servlet</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.geekhoon.servlet;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.geekhoon.domain.User;</div><div class="line"><span class="keyword">import</span> com.geekhoon.service.UserService;</div><div class="line"><span class="keyword">import</span> com.geekhoon.utils.MyBeanUtils;</div><div class="line"><span class="keyword">import</span> com.geekhoon.utils.UUIDUtils;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Servlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">		User u = <span class="keyword">new</span> User();</div><div class="line"></div><div class="line">		MyBeanUtils.populate(u, request.getParameterMap());</div><div class="line">		u.setUid(UUIDUtils.getId());</div><div class="line">		UserService us = <span class="keyword">new</span> UserService();</div><div class="line">		<span class="keyword">boolean</span> flag = us.find(u);</div><div class="line">		String msg = <span class="string">""</span>;</div><div class="line">		<span class="keyword">if</span>(flag)&#123;</div><div class="line">			msg = <span class="string">"成功success"</span>;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			msg = <span class="string">"失败fail"</span>;</div><div class="line">		&#125;</div><div class="line">		request.setAttribute(<span class="string">"msg"</span>, msg);</div><div class="line">		</div><div class="line">		request.getRequestDispatcher(<span class="string">"/ShowMsg"</span>).forward(request, response);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">		doGet(request, response);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.geekhoon.servlet;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShowMsg</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">		response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</div><div class="line">		<span class="comment">//response.setContentType("text/html,charset=utf-8");</span></div><div class="line">		PrintWriter out = response.getWriter();</div><div class="line">		out.write(<span class="string">"&lt;html&gt;"</span>);</div><div class="line">		out.write(<span class="string">"&lt;head&gt;"</span>);</div><div class="line">		out.write(<span class="string">"&lt;title&gt;"</span>);</div><div class="line">		out.write(<span class="string">"提示信息"</span>);</div><div class="line">		out.write(<span class="string">"&lt;/title&gt;"</span>);</div><div class="line">		out.write(<span class="string">"&lt;/head&gt;"</span>);</div><div class="line">		out.write(<span class="string">"&lt;body&gt;"</span>);</div><div class="line">		out.write(request.getAttribute(<span class="string">"msg"</span>).toString());</div><div class="line">		out.write(<span class="string">"&lt;/body&gt;"</span>);</div><div class="line">		out.write(<span class="string">"&lt;/html&gt;"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">		doGet(request, response);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="7-service"><a href="#7-service" class="headerlink" title="7.service"></a>7.service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.geekhoon.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.geekhoon.dao.UserDao;</div><div class="line"><span class="keyword">import</span> com.geekhoon.domain.User;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * Service层价值: 为dao层进行逻辑划分</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">find</span><span class="params">(User u)</span> </span>&#123;</div><div class="line">		</div><div class="line">		UserDao ud = <span class="keyword">new</span> UserDao();</div><div class="line">		<span class="keyword">if</span>(ud.find(u))&#123;<span class="comment">//返回true,说明已存在,返回false</span></div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="keyword">boolean</span> b = ud.save(u);</div><div class="line">			<span class="keyword">return</span> b;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="8-dao"><a href="#8-dao" class="headerlink" title="8.dao"></a>8.dao</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.geekhoon.dao;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.commons.dbutils.QueryRunner;</div><div class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanHandler;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.geekhoon.domain.User;</div><div class="line"><span class="keyword">import</span> com.geekhoon.utils.C3P0Utils;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</div><div class="line">	QueryRunner qr = <span class="keyword">new</span> QueryRunner(C3P0Utils.getDs());</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">find</span><span class="params">(User u)</span> </span>&#123;</div><div class="line">		User data = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			data = qr.query(<span class="string">"SELECT * FROM user WHERE username = ?"</span>, <span class="keyword">new</span> BeanHandler&lt;User&gt;(User.class),</div><div class="line">					u.getUsername());</div><div class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> data != <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">save</span><span class="params">(User u)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> line = <span class="number">0</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			line = qr.update(<span class="string">"INSERT INTO user VALUES (?,?,?,?,?,?)"</span>, <span class="keyword">new</span> Object[] &#123; u.getUid(), u.getUsername(),</div><div class="line">					u.getPassword(), u.getEmail(), u.getName(), u.getSex() &#125;);</div><div class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> line &gt; <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="9-utils"><a href="#9-utils" class="headerlink" title="9.utils"></a>9.utils</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.geekhoon.utils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.sql.Connection;</div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.sql.DataSource;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C3P0Utils</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> DataSource ds = <span class="keyword">new</span> ComboPooledDataSource();</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDs</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> ds;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</div><div class="line">		<span class="keyword">return</span> ds.getConnection();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.geekhoon.utils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanUtils;</div><div class="line"><span class="keyword">import</span> org.apache.commons.beanutils.ConvertUtils;</div><div class="line"><span class="keyword">import</span> org.apache.commons.beanutils.converters.DateConverter;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanUtils</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">populate</span><span class="params">(Object obj,Map map)</span></span>&#123;</div><div class="line">		<span class="comment">//设置并注册一个时间转换器</span></div><div class="line">		DateConverter dc = <span class="keyword">new</span> DateConverter();</div><div class="line">		<span class="comment">//设置当前转换的字符串的格式</span></div><div class="line">		dc.setPattern(<span class="string">"yyyy-MM-dd"</span>);</div><div class="line">		<span class="comment">//注册该转换器</span></div><div class="line">		ConvertUtils.register(dc, Date.class);</div><div class="line">		<span class="comment">//2、使用BeanUtils 为 JavaBean 对象赋值</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			BeanUtils.populate(obj, map);</div><div class="line">		&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.geekhoon.utils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.UUID;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UUIDUtils</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getId</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;HttpServletRequest对象是封装请求消息的对象,用于操作请求消息&lt;/p&gt;
&lt;h2 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; 
    
    </summary>
    
      <category term="JavaWeb" scheme="https://geekhoon.github.io/categories/JavaWeb/"/>
    
    
      <category term="前端开发" scheme="https://geekhoon.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="Tomcat" scheme="https://geekhoon.github.io/tags/Tomcat/"/>
    
      <category term="HTTP" scheme="https://geekhoon.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>ServletContext&amp;HttpServletResponse</title>
    <link href="https://geekhoon.github.io/2017/04/04/JavaWeb-08-ServletContext-HttpServletResponse/"/>
    <id>https://geekhoon.github.io/2017/04/04/JavaWeb-08-ServletContext-HttpServletResponse/</id>
    <published>2017-04-04T09:20:32.000Z</published>
    <updated>2017-04-06T09:28:41.238Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="JavaWeb" scheme="https://geekhoon.github.io/categories/JavaWeb/"/>
    
    
      <category term="前端开发" scheme="https://geekhoon.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="Tomcat" scheme="https://geekhoon.github.io/tags/Tomcat/"/>
    
      <category term="HTTP" scheme="https://geekhoon.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>Servlet</title>
    <link href="https://geekhoon.github.io/2017/04/02/JavaWeb-07-Servlet/"/>
    <id>https://geekhoon.github.io/2017/04/02/JavaWeb-07-Servlet/</id>
    <published>2017-04-02T09:09:36.000Z</published>
    <updated>2017-04-06T09:22:44.112Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>1.概念</strong><br>Servlet是运行在服务器端的Java小程序,是Sun公司提供的一套规范,用来处理客户端请求的动态资源.<br>Servlet是JavaWeb三大组件之一(Servlet,Filter,Listener),最为重要.<br>Web资源分为静态资源与动态资源<br>静态资源: HTML,文件,CSS,图片…<br>动态资源: 由程序生成的,每次访问内容可能不一样,如Servlet,JSP<br><a id="more"></a><br><strong>2.作用</strong><br>处理从客户端发送的请求,并对该请求做出响应<br>任务:<br>  (1)获取请求参数<br>  (2)处理请求<br>  (3)响应</p>
<h2 id="Servlet实现方式"><a href="#Servlet实现方式" class="headerlink" title="Servlet实现方式"></a>Servlet实现方式</h2><h3 id="版本1"><a href="#版本1" class="headerlink" title="版本1"></a>版本1</h3><p><strong>1.实现类</strong>: 实现Servlet接口,重写抽象方法(主要是service方法)<br><strong>2.配置文件(</strong>WEB_INF/web.xml): URL与类产生映射关系<br><strong>3.访问</strong>: 浏览器输入与自己配置对应的URL,执行效果:调用自定义类的service方法,Tomcat自己创建了Servlet对象,并调用service方法,此过程隐藏了</p>
<h3 id="版本2"><a href="#版本2" class="headerlink" title="版本2"></a>版本2</h3><p><strong>1.编写类</strong>: 继承GenericServlet类,重写service方法<br>注意:<br>  (1)本质上与直接重写Servlet接口一样<br>  (2)采用当前方式只关心service方法<br>  (3)唯一优点: 代码简单<br>步骤2和3与版本1一样.</p>
<h3 id="版本3"><a href="#版本3" class="headerlink" title="版本3"></a>版本3</h3><p><strong>1.编写类</strong>: 继承javax.servlet.http.HttpServlet类,重写doGet()和doPost(),如果是GET请求调用doGet(),POST请求调用doPost()<br><strong>2.配置文件</strong>: web.xml</p>
<h4 id="HttpServlet源码分析"><a href="#HttpServlet源码分析" class="headerlink" title="HttpServlet源码分析"></a>HttpServlet源码分析</h4><p>doGet 和 doPost 怎么执行的？<br>A、本质上 HttpServlet 实现了 Servlet 接口也有 service 方法<br>B、执行时要找service 方法<br>C、service 方法会判断当前的请求方式，根据请求方式调用 doGet 或 doPost<br>使用Eclipse自动生成Servlet</p>
<h2 id="适配器设计模式"><a href="#适配器设计模式" class="headerlink" title="适配器设计模式"></a>适配器设计模式</h2><p>1.编写一个类实现一个A接口,按照Java语法,接口所有的方法都要重写,但是按照当前的业务逻辑,如果只需要重写几个方法的话,全部重写了必然导致代码严重冗余<br>2.优化方案:编写一个B类实现该接口,但都是空实现<br>3.写一个C类继承B中的空实现类,需要重写哪个方法就重写哪个,C类中只保存需要的方法,代码简洁</p>
<h2 id="Servlet编写具体实现"><a href="#Servlet编写具体实现" class="headerlink" title="Servlet编写具体实现"></a>Servlet编写具体实现</h2><p>需求:客户端录入帐号密码,如果用户名是geekhoon,密码是123456,浏览器显示success,否则fail<br>步骤:<br>1.编写html表单,提交到一个Servlet<br>2.Servlet获取提交的数据<br>  提交的数据,封装在request中,调用getParamter(“key”)获取对应值<br>  String[] values = request.getParameterValues(“key”) —- 获取一键多值<br>3.数据判断<br>4.response 获取数据流,往外写数据<br> PrintWriter out = response.getWriter();//使用IO流—打印流<br>注意: doGet和doPost中的re    quest和response是怎么来的?<br>Tomcat把请求数据封装,创建一个HTTPRequest对象,存储库户录入的键值对,调用doGet和doPost时,传入该对象</p>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>day13_MyServlet<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.geekhoon.MyServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/MyServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="login-html"><a href="#login-html" class="headerlink" title="login.html"></a>login.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/day13_MyServlet/MyServlet"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">		帐号:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span> = <span class="string">"username"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">		密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span> = <span class="string">"password"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span> =<span class="string">"提交"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="MyServlet-java"><a href="#MyServlet-java" class="headerlink" title="MyServlet.java"></a>MyServlet.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.geekhoon;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">		String username = request.getParameter(<span class="string">"username"</span>);</div><div class="line">		String password = request.getParameter(<span class="string">"password"</span>);</div><div class="line">		<span class="keyword">if</span>(<span class="string">"geekhoon"</span>.equals(username)&amp;&amp;<span class="string">"123456"</span>.equals(password))&#123;</div><div class="line">			response.getWriter().write(<span class="string">"success !!!"</span>);</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			response.getWriter().write(<span class="string">"fail    !!!"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">		doGet(request, response);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h2><p>出生: 服务器启动,用户第一次访问Servlet,Servlet被初始化(init出生);<br>死亡: 服务器被正常关闭(destory)或停止;</p>
<p>init    –&gt; 初始化数据;<br>service –&gt; 处理请求;<br>destory –&gt; 释放资源;</p>
<h3 id="设置Servlet初始化时机"><a href="#设置Servlet初始化时机" class="headerlink" title="设置Servlet初始化时机"></a>设置Servlet初始化时机</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">在&lt;servlet&gt;中配置:</div><div class="line">&lt;!-- 取值为0或正整数:服务器启动时初始化(数字越小,越优先); --&gt;</div><div class="line">&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</div></pre></td></tr></table></figure>
<h3 id="url-pattern配置"><a href="#url-pattern配置" class="headerlink" title="url-pattern配置"></a>url-pattern配置</h3><p>Servlet映射URL时,URL的取值:<br><strong>1.完全路径匹配</strong><br>  /目录1/目录2/….<br>  地址栏中的路径，必须和配置的完全一样<br><strong>2.目录匹配</strong><br>  /目录1/目录2/…./*<br>  地址栏中路径，必须完全符合目录，但是目录后面的路径编写随意</p>
<p><strong>3.后缀名匹配</strong><br>  <em>.do </em>.test<br>  地址栏中的路径，后缀名必须匹配，后缀名前面随意<br><strong>4.缺省匹配</strong><br>   /<br>   地址栏随便输入路径<br><strong>优先级</strong><br>  1 &gt; 2 &gt; 3 &gt;4<br>原则：越具体优先级越高</p>
<h3 id="访问路径编写"><a href="#访问路径编写" class="headerlink" title="访问路径编写"></a>访问路径编写</h3><pre><code>./      --&gt; 当前路径;
../     --&gt; 上一级目录;
</code></pre><p>1.绝对路径:<br>    <a href="http://localhost:8080/JavaWeb_day13-Servlet/login.html" target="_blank" rel="external">http://localhost:8080/JavaWeb_day13-Servlet/login.html</a><br>    <a href="http://localhost:8080/JavaWeb_day13-Servlet/UserServlet" target="_blank" rel="external">http://localhost:8080/JavaWeb_day13-Servlet/UserServlet</a><br>2.相对路径:<br>    浏览器 –&gt; 服务器:<br>        /项目名/资源路径….(需要加项目名);<br>    服务器 –&gt; 服务器:<br>        servlet –&gt; servlet<br>        /…(不需要加工程名);</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1.概念&lt;/strong&gt;&lt;br&gt;Servlet是运行在服务器端的Java小程序,是Sun公司提供的一套规范,用来处理客户端请求的动态资源.&lt;br&gt;Servlet是JavaWeb三大组件之一(Servlet,Filter,Listener),最为重要.&lt;br&gt;Web资源分为静态资源与动态资源&lt;br&gt;静态资源: HTML,文件,CSS,图片…&lt;br&gt;动态资源: 由程序生成的,每次访问内容可能不一样,如Servlet,JSP&lt;br&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="https://geekhoon.github.io/categories/JavaWeb/"/>
    
    
      <category term="前端开发" scheme="https://geekhoon.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="Tomcat" scheme="https://geekhoon.github.io/tags/Tomcat/"/>
    
      <category term="HTTP" scheme="https://geekhoon.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>Http</title>
    <link href="https://geekhoon.github.io/2017/04/01/JavaWeb-06-Http-Tomcat/"/>
    <id>https://geekhoon.github.io/2017/04/01/JavaWeb-06-Http-Tomcat/</id>
    <published>2017-03-31T23:18:14.000Z</published>
    <updated>2017-04-06T09:22:51.286Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>HTTP协议 —&gt; 超文本传输协议.<br>分两部分:<br>1.Request请求协议<br>2.Response响应协议<br><a id="more"></a>    </p>
<h3 id="作用及特点"><a href="#作用及特点" class="headerlink" title="作用及特点"></a>作用及特点</h3><p>作用: 规范请求与响应过程中数据交互的规范<br>特点:<br> (1)基于请求/响应模型的协议<br> (2)HTTP协议默认的端口:80</p>
<h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><p>1.0版本: 访问一次资源,就需要创建一个连接<br>1.1版本: 访问多个资源,也只需创建一个连接(效率高).keep-alive</p>
<h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><pre><code>HTTP协议
    |-- HTTP请求协议
        |-- 请求行

        |-- 请求头

        |-- 请求体

    |-- HTTP响应协议        
        |-- 响应行

        |-- 响应头

        |-- 响应体
</code></pre><h3 id="HTTP请求协议图解"><a href="#HTTP请求协议图解" class="headerlink" title="HTTP请求协议图解"></a>HTTP请求协议图解</h3><h4 id="普通请求"><a href="#普通请求" class="headerlink" title="普通请求"></a>普通请求</h4><p><img src="http://oj3s07yy0.bkt.clouddn.com/blog/20170402/122753927.png" alt="mark"></p>
<h4 id="表单请求"><a href="#表单请求" class="headerlink" title="表单请求"></a>表单请求</h4><p><img src="http://oj3s07yy0.bkt.clouddn.com/blog/20170402/160517355.png" alt="mark"><br>    请求头：<br>    accecpt —- 当前浏览器可以解析的数据类型<br>        text/html —- html文本文件<br>        application/xhtml+xml —- xml文件<br>        <em>/</em> ———- 任意文件</p>
<pre><code>User-agent ---- 本地浏览器以及操作系统的相关信息(给服务器使用)
Accept-Encoding --- 可以解析的压缩格式
Connection ----- keep-alive(连接未被终止)

If-Modified-Since    Wed, 04 Jan 2017 02:26:18 GMT
If-None-Match    W/&quot;179-1483496778700&quot;

referer ----- 当前页面是从哪个页面跳转来的
    防盗链 ---- 图片 新闻 防盗
    网站统计 --- 统计广告投放效果
</code></pre><h3 id="Post请求注意"><a href="#Post请求注意" class="headerlink" title="Post请求注意"></a>Post请求注意</h3><pre><code>POST请求时，有时需要上传图片或文件等字节内容，但是当前默认实现是上传文件名，怎么操作？

enctype=&quot;application/x-www-form-urlencoded&quot;
Post 表单的默认实现，特点：上传文件名，并且上传的数据要编码
                  key=value&amp;key=value

enctype=text/plain(不常用)
   特点：没有编码，上传的是文件名
                key=value
                key=value

enctype=&quot;multipart/form-data&quot; ------ 多部件表单数据上传，如果表单有文件上传，那么必须使用该值
 name ---- 键
 file-name ---- 上传的文件名
 content-type --- 上传的文件类型
     一些二进制数据 ----- 文件内容
</code></pre><h3 id="HTTP响应协议图解"><a href="#HTTP响应协议图解" class="headerlink" title="HTTP响应协议图解"></a>HTTP响应协议图解</h3><p><img src="http://oj3s07yy0.bkt.clouddn.com/blog/20170402/160857530.png" alt="mark"><br>     ETag<br>     Last-Modified :二者都是标记，适用于缓存的<br>     Content-type: text/html<br>     Content-length:内容的字节数<br>     Date:响应时间<br>     refresh:设置刷新 跟一个秒值，隔这个秒数之后，会重新请求网站，自动刷新</p>
<h4 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h4><p>1XX     –&gt;请求收到了，但是不给响应，原则上严禁出现;<br>200        –&gt;请求成功;<br>302        –&gt;请求重定向,重新去访问一个新URL;<br>304        –&gt;请求资源没有改变,访问本地缓存;<br>404        –&gt;请求资源不存在.通常是用户路径编写错误,也可能是服务器资源已删除;<br>500        –&gt;服务器内部错误.通常程序抛出异常;</p>
<h2 id="Web开发概述"><a href="#Web开发概述" class="headerlink" title="Web开发概述"></a>Web开发概述</h2><h3 id="Web通信"><a href="#Web通信" class="headerlink" title="Web通信"></a>Web通信</h3><p>采用B/S通信模式,通过HTTP协议进行通信,浏览器编写url向服务器发送request请求,服务器端处理后,向浏览器返回response响应,将服务器端资源发送给浏览器,完成通信.<br><img src="http://oj3s07yy0.bkt.clouddn.com/blog/20170402/162022962.png" alt="mark"></p>
<h3 id="软件架构"><a href="#软件架构" class="headerlink" title="软件架构"></a>软件架构</h3><p><strong>C/S架构</strong><br>1.模型: Client/Server,使用时需要在本地安装程序<br>2.案例: QQ,酷狗音乐,迅雷…<br>3.优点:<br> (1)动画效果更好(如游戏);<br> (2)服务器端计算压力小,客户端分担了一部分;<br> (3)数据交互更安全<br> (4)客户端可以找服务器,服务器也可以找客户端<br>4.缺点:<br> (1)富客户端(需要下载,占磁盘空间,且耗时)<br> (2)升级麻烦(客户端要和服务器同步升级)<br> (3)安装依赖其他环境<br><strong>B/S架构</strong><br>1.模型: Browser/Server,需要通过浏览器访问服务器<br>2.案例: 淘宝,京东电商网站,12306…<br>3.优点:<br> (1)节约磁盘空间<br> (2)升级简单(无缝升级)<br> (3)只需要安装浏览器<br>4.缺点:<br> (1)动画效果差<br> (2)服务器端计算压力大,并发访问量大时,可能崩溃<br> (3)数据交互规则是暴露的,不安全<br> (4)通常访问方式:客户端找服务器,服务器给出回应,但是服务器不能直接找客户端</p>
<h3 id="Web资源介绍"><a href="#Web资源介绍" class="headerlink" title="Web资源介绍"></a>Web资源介绍</h3><p>静态资源: web页面中浏览的数据是不变的,如html,css,js,图片,多媒体等<br>动态资源: web页面中浏览的数据是程序产生的,比如JSP/Servlet,ASP,PHP</p>
<h3 id="Web服务器"><a href="#Web服务器" class="headerlink" title="Web服务器"></a>Web服务器</h3><p>1.Tomcat: 免费的小型服务器软件,包含集群技术(多台计算机都安装Tomcat,串联成一个整体)<br>2.Weblogic: 大型的服务器软件,被oracle收购了<br>3.WebSphere: IBM公司的大型服务器软件<br>4.JBoss</p>
<h3 id="URL请求路径"><a href="#URL请求路径" class="headerlink" title="URL请求路径"></a>URL请求路径</h3><p>格式如下:<br>    协议://域名:端口号/资源位置?参数=值</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HTTP协议&quot;&gt;&lt;a href=&quot;#HTTP协议&quot; class=&quot;headerlink&quot; title=&quot;HTTP协议&quot;&gt;&lt;/a&gt;HTTP协议&lt;/h2&gt;&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;HTTP协议 —&amp;gt; 超文本传输协议.&lt;br&gt;分两部分:&lt;br&gt;1.Request请求协议&lt;br&gt;2.Response响应协议&lt;br&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="https://geekhoon.github.io/categories/JavaWeb/"/>
    
    
      <category term="前端开发" scheme="https://geekhoon.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="Tomcat" scheme="https://geekhoon.github.io/tags/Tomcat/"/>
    
      <category term="HTTP" scheme="https://geekhoon.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>XML</title>
    <link href="https://geekhoon.github.io/2017/03/31/JavaWeb-05-XML/"/>
    <id>https://geekhoon.github.io/2017/03/31/JavaWeb-05-XML/</id>
    <published>2017-03-31T00:31:37.000Z</published>
    <updated>2017-04-02T08:34:54.249Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>1.概念</strong><br>XML(Extensible Markup Language),是可扩展的标记语言.<br>标记—–由标签组成<br>可扩展—标签可以自定义<br><a id="more"></a><br><strong>2.与HTMl的区分</strong><br>HTML – 存储页面内容(写页面)<br>XML — 作为配置文件,作为数据传输的载体</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p><strong>1.后缀名</strong>是.xml,使用浏览器可以查看<br><strong>2.头部</strong>是xml的声明,声明必须位于第一行第一列<br>  声明的属性:version(版本:1.0),encoding(编码集)<br><strong>3.元素(标签)</strong><br>严格区分大小写<br>不能使用空格和冒号,冒号某些情况下可用<br>标签名不建议使用XML,xml,Xml等等开头<br>其余语法规则和HTML一样<br><strong>4.属性</strong><br>除了自定义的,其余和HTML规则一样<br><strong>5.注释</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 注释 --&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>6.转义字符</strong><br>一些特殊符号不能直接使用必须使用转义字符<br>空格需要使用全角输入法录入空格</p>
<pre><code>- 小于号: &amp;lt;
- 大于号: &amp;gt;
- 双引号: &amp;quot;
- 单引号: &amp;apos;
- 与符号: &amp;amp;
</code></pre><p>转义字符少用,因为大量使用会影响XML的解析效率,且易读性差<br><strong>7.转义字符使用的替换方案</strong><br>语法:&lt;![CDATA[存储任意内容]]&gt;,可以保证内容原样输出<br>解析时,只获取[]中的内容</p>
<h2 id="XML的解析"><a href="#XML的解析" class="headerlink" title="XML的解析"></a>XML的解析</h2><p>解析就是获得XML中标签的属性或内容<br>解析方案:(使用第三方实现)</p>
<h3 id="解析算法"><a href="#解析算法" class="headerlink" title="解析算法"></a>解析算法</h3><p>1.DOM解析方式: 将标签全部加载进内存,形成Dom树<br>2.SAX解析方式: 一行一行读取,当前行前面的数据已经销毁了<br>比较:<br>(1)内存角度,SAX解析方式占的内存更小<br>(2)功能角度,DOM方式可以根据当前标签进行上下推导,功能更强大<br>使用: XML比较小时使用DOM,比较大时使用SAX解析<br>基于上述两种解析实现,有不同的第三方封装:<br>(1)JAXP — JDK内置的解析实现,不常用<br>(2)JDOM — 只用到类,没使用接口,灵活性差<br>(3)DOM4J – 相对应JDOM使用了接口,扩展性更好<br>(4)JSOUP – 专门解析HTML,HTML可以理解为特殊的XML</p>
<h3 id="解析优化"><a href="#解析优化" class="headerlink" title="解析优化"></a>解析优化</h3><p>如果标签纵深比较多,那么要获取该标签对象,得逐级获取,代码实现比较麻烦,dom4j解析层级结构复杂的标签时,进行了优化：<br>优化方案是使用选择器(与 CSS 中，JQuery 中的选择器类似)</p>
<h2 id="DOM4J使用"><a href="#DOM4J使用" class="headerlink" title="DOM4J使用"></a>DOM4J使用</h2><p>1.导jar包</p>
<pre><code>- dom4j-1.6.1.jar
- jaxen-1.1-beta-6.jar
</code></pre><p>2.步骤:<br>(1)创建一个文件输入流<br>(2)创建DOM4J的解析器,读流<br>SAXReader r = new SAXReader();<br>(3)解析器读流,生成DOM树<br>Document doc = r.read(in);<br>(4)解析DOM树 — 获取配置信息</p>
<pre><code>- 获取根元素对应的对象: Element root = doc.getRootElement()
- 操作元素相关API
    - attributeValue(&quot;属性名&quot;); ---- 返回属性值
    - elements(&quot;标签名&quot;) ----------- 获取所有指定名称的子级标签,可以不指定名(获取所有子级标签)
    - element(&quot;标签名&quot;) ------------ 获取第一个有指定名称的标签,可以不指定名称(获取所有子级标签)
    - getText() ------------------- 获取标签的文本内容体
- 优化:如果标签有2级,获取子级标签的文本内容
    - 方案1: 先获取子级标签对象,调用 getText() --- 获取文本
    - 方案2: 父级标签.elementText(&quot;子级标签名&quot;) --- 简化代码 
</code></pre><h3 id="DOM4J常规使用案例"><a href="#DOM4J常规使用案例" class="headerlink" title="DOM4J常规使用案例"></a>DOM4J常规使用案例</h3><h4 id="配置文件animals-xml写法"><a href="#配置文件animals-xml写法" class="headerlink" title="配置文件animals.xml写法"></a>配置文件animals.xml写法</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">animals</span> <span class="attr">version</span>=<span class="string">"1.0"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">animal</span> <span class="attr">id</span>=<span class="string">"1.1"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>猫<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">age</span>&gt;</span>2<span class="tag">&lt;/<span class="name">age</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">animal</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">animal</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>狗<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">age</span>&gt;</span>3<span class="tag">&lt;/<span class="name">age</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">animal</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">animals</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DOM4JDemo</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="comment">//1.关联文件,创建一个文件输入流</span></div><div class="line">		InputStream in = DOM4JDemo.class.getClassLoader().getResourceAsStream(<span class="string">"animals.xml"</span>);</div><div class="line">		<span class="comment">//2.创建dom4j的解析器</span></div><div class="line">		SAXReader r = <span class="keyword">new</span> SAXReader();</div><div class="line">		<span class="comment">//读流,创建一个dom树</span></div><div class="line">		Document doc = r.read(in);</div><div class="line">		<span class="comment">//关流</span></div><div class="line">		in.close();</div><div class="line">		<span class="comment">//3.解析Dom树,获取配置信息</span></div><div class="line">		<span class="comment">//3.1获取根元素对应的对象</span></div><div class="line">		Element root = doc.getRootElement();</div><div class="line">		<span class="comment">//获取属性</span></div><div class="line">		String value = root.attributeValue(<span class="string">"version"</span>);</div><div class="line">		System.out.println(value);<span class="comment">//1.0</span></div><div class="line">		<span class="comment">//3.2内容体</span></div><div class="line">		<span class="comment">//获取所有名字为animal的子级标签</span></div><div class="line">		List es = root.elements(<span class="string">"animal"</span>);</div><div class="line">		System.out.println(es.size());<span class="comment">//2</span></div><div class="line">		<span class="comment">//获取第一个animal子级标签</span></div><div class="line">		Element first = root.element(<span class="string">"animal"</span>);</div><div class="line"></div><div class="line">		<span class="comment">//获取first的id属性</span></div><div class="line">		String value2 = first.attributeValue(<span class="string">"id"</span>);</div><div class="line">		System.out.println(<span class="string">"id:  "</span>+value2);</div><div class="line"></div><div class="line">		<span class="comment">//获取name这个子级标签</span></div><div class="line">		Element name = first.element(<span class="string">"name"</span>);</div><div class="line"></div><div class="line">		<span class="comment">//获取name文本内容</span></div><div class="line">		String text = name.getText();</div><div class="line">		System.out.println(<span class="string">"文本:"</span>+text);</div><div class="line">		</div><div class="line">		<span class="comment">//优化:(代码简单)</span></div><div class="line">		System.out.println(first.elementText(<span class="string">"name"</span>));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="模拟servlet"><a href="#模拟servlet" class="headerlink" title="模拟servlet"></a>模拟servlet</h2><p>Servlet是在服务器上运行的小程序.创建JavaEEServlet和AndroidServlet,假设它们是服务器上的两个小程序,导入官方web.xml配置文件,进行对应更改.<br>需求：<br>1.控制台录入访问路径<br>2.编写相关的实现程序（Servlet）<br>3.录入路径后，会执行相应的程序</p>
<h3 id="Servlet小程序"><a href="#Servlet小程序" class="headerlink" title="Servlet小程序"></a>Servlet小程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaEEServlet</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"JavaEE Servlet 创建了...."</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"JavaEE servlet 生成EE课程的 HTML 代码，发送回客户端"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"JavaEE Servlet 销毁....."</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AndroidServlet</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"Android Servlet 创建了...."</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"Android servlet 生成安卓课程的 HTML 代码，发送回客户端"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"Android Servlet 销毁....."</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="web-xml配置文件"><a href="#web-xml配置文件" class="headerlink" title="web.xml配置文件"></a>web.xml配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ee<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.geekhoon.demo.JavaEEServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ee<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/JavaEE<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>an<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.geekhoon.demo.AndroidServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>an<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/Android<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="测试类-1"><a href="#测试类-1" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Use</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		System.out.println(<span class="string">"请输入一个路径:"</span>);</div><div class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">		String url = sc.next();</div><div class="line">-----------------------------------------------------		</div><div class="line">DOM4J解析web.xml	</div><div class="line">		<span class="comment">//1.创建文件输入流</span></div><div class="line">		InputStream in = Use.class.getClassLoader().getResourceAsStream(<span class="string">"web.xml"</span>);</div><div class="line">		<span class="comment">//2.创建解析器</span></div><div class="line">		SAXReader r = <span class="keyword">new</span> SAXReader();</div><div class="line">		<span class="comment">//3.读流,生成dom树</span></div><div class="line">		Document doc = r.read(in);</div><div class="line">		in.close();</div><div class="line">		<span class="comment">//4.解析dom树</span></div><div class="line">		Element root = doc.getRootElement();</div><div class="line">		<span class="comment">//创建map集合存name和class</span></div><div class="line">		Map&lt;String,String&gt; nameClass = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</div><div class="line">		List&lt;Element&gt; es = root.elements(<span class="string">"servlet"</span>);</div><div class="line">-----------------------------------------------------</div><div class="line">使用XPath优化:使用选择器</div><div class="line">		<span class="comment">//List&lt;Element&gt; es = root.selectNodes("//servlet");</span></div><div class="line">		<span class="keyword">for</span> (Element e : es) &#123;</div><div class="line">			String name = e.elementText(<span class="string">"servlet-name"</span>);</div><div class="line">			String clazz = e.elementText(<span class="string">"servlet-class"</span>);</div><div class="line">			nameClass.put(name, clazz);</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//创建map集合存name和url</span></div><div class="line">		Map&lt;String,String&gt; nameUrl = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</div><div class="line">		List&lt;Element&gt; es2 = root.elements(<span class="string">"servlet-mapping"</span>);</div><div class="line">-----------------------------------------------------</div><div class="line">使用XPath优化:使用选择器</div><div class="line">		<span class="comment">//List&lt;Element&gt; es2 = root.selectNodes("//servlet-mapping");</span></div><div class="line">		<span class="keyword">for</span> (Element e2 : es2) &#123;</div><div class="line">			String name = e2.elementText(<span class="string">"servlet-name"</span>);</div><div class="line">			String urlpattern = e2.elementText(<span class="string">"url-pattern"</span>);</div><div class="line">			nameUrl.put(name, urlpattern);</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//整合上面两个数组,获得全类名及url</span></div><div class="line">		Map&lt;String,String&gt; urlClass = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</div><div class="line">		Set&lt;String&gt; keys = nameUrl.keySet();</div><div class="line">		<span class="keyword">for</span> (String key : keys) &#123;</div><div class="line">			String clazz = nameClass.get(key);</div><div class="line">			String urlpattern = nameUrl.get(key);</div><div class="line">			urlClass.put(urlpattern, clazz);</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//根据用户输入的url,查询对应的value</span></div><div class="line">		String className = urlClass.get(url);</div><div class="line">		<span class="comment">//System.out.println(className);</span></div><div class="line">		<span class="keyword">if</span>(className != <span class="keyword">null</span>)&#123;</div><div class="line">			<span class="comment">//反射,获得字节码对象</span></div><div class="line">			Class clazz = Class.forName(className);</div><div class="line">			<span class="comment">//获取构造方法</span></div><div class="line">			Constructor con = clazz.getConstructor();</div><div class="line">			<span class="comment">//创建对象</span></div><div class="line">			Object obj = con.newInstance();</div><div class="line">			<span class="comment">//获取方法</span></div><div class="line">			Method init = clazz.getMethod(<span class="string">"init"</span>);</div><div class="line">			Method service = clazz.getMethod(<span class="string">"service"</span>);</div><div class="line">			Method destory = clazz.getMethod(<span class="string">"destory"</span>);</div><div class="line">			<span class="comment">//执行方法</span></div><div class="line">			init.invoke(obj);</div><div class="line">			service.invoke(obj);</div><div class="line">			destory.invoke(obj);</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			System.out.println(<span class="string">"路径不存在"</span>);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>约束就是规范xml书写的规则,限制XML可以使用的标签的名称,属性及内容体</p>
<h3 id="DTD约束"><a href="#DTD约束" class="headerlink" title="DTD约束"></a>DTD约束</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">文档声明:</div><div class="line">	内部:</div><div class="line">		<span class="meta">&lt;!DOCTYPE 根元素[...]&gt;</span></div><div class="line"></div><div class="line">	外部:</div><div class="line">		本地:</div><div class="line">			<span class="meta">&lt;!DOCTYPE 根元素 SYSTEM "路径"&gt;</span></div><div class="line"></div><div class="line">		外网:</div><div class="line">			<span class="meta">&lt;!DOCTYPE 根元素 PUBLIC "DTD名称" "DTD路径"&gt;</span></div><div class="line"></div><div class="line">元素声明:</div><div class="line">	<span class="tag">&lt;<span class="name">!ELEMENT</span> 元素名 (元素描述)&gt;</span></div><div class="line">	元素描述:</div><div class="line">		+(1或多) ?(0或1) *(任意) #PCDATA(文本)...</div><div class="line"></div><div class="line">属性声明:</div><div class="line">	<span class="tag">&lt;<span class="name">!ATTLIST</span> 元素名 属性名 属性类型 约束&gt;</span></div><div class="line">	属性类型:</div><div class="line">		ID	唯一</div><div class="line">		CDATA	文本</div><div class="line">		(e1,e2,...)	枚举 ,多选一</div><div class="line">	约束:</div><div class="line">		#REQUIRED	必须</div><div class="line">		#IMPLIED	可选</div></pre></td></tr></table></figure>
<h3 id="Schema约束"><a href="#Schema约束" class="headerlink" title="Schema约束"></a>Schema约束</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">使用:</div><div class="line">	&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line">	<span class="comment">&lt;!-- </span></div><div class="line">		xmlns:默认名称空间;</div><div class="line">		xmlns:xsi:显示名称空间;</div><div class="line">		xsi:schemaLocation:设置名称空间对应的地址</div><div class="line">			语法:</div><div class="line">				名称空间 (空格) 位置</div><div class="line">	 --&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">users</span> <span class="attr">xmlns</span>=<span class="string">"geekhoon/schemaRules"</span></span></div><div class="line">		   <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">		   <span class="attr">xsi:schemaLocation</span>=<span class="string">"geekhoon/schemaRules cn/itcast/day11/schema/persons.xsd"</span>&gt;</div><div class="line"></div><div class="line">	<span class="tag">&lt;/<span class="name">users</span>&gt;</span></div><div class="line"></div><div class="line">自定义:</div><div class="line">	&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line">	<span class="comment">&lt;!-- </span></div><div class="line">		xmlns:默认名称空间;</div><div class="line">		targetNamespace:当前Schema的名称,可自定义;</div><div class="line">		xmlns:tns:显示名称空间;</div><div class="line">		elementFormDefault:使用默认值;</div><div class="line">	 --&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">schema</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span> </span></div><div class="line">		    <span class="attr">targetNamespace</span>=<span class="string">"geekhoon/schemaRules"</span></div><div class="line">		    <span class="attr">xmlns:tns</span>=<span class="string">"geekhoon/schemaRules"</span></div><div class="line">		    <span class="attr">elementFormDefault</span>=<span class="string">"qualified"</span>&gt;</div><div class="line">		<span class="comment">&lt;!-- 定义根标签name:定义根标签的名称;--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">"users"</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!-- 声明当前标签是一个复杂的标签(有属性,有子标签视为根标签) --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">complexType</span>&gt;</span></div><div class="line">				<span class="comment">&lt;!-- 限制子标签出现的个数,minOccurs:最少,maxOccurs:最多;maxOccurs="unbounded"可以任意 --&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">sequence</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">complexType</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">sequence</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span> <span class="attr">maxOccurs</span>=<span class="string">"1"</span>&gt;</span></div><div class="line">								<span class="comment">&lt;!-- 声明标签,name:标签名,type:数据类型 --&gt;</span></div><div class="line">								<span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">type</span>=<span class="string">"string"</span>&gt;</span><span class="tag">&lt;/<span class="name">element</span>&gt;</span></div><div class="line">								<span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"string"</span>&gt;</span><span class="tag">&lt;/<span class="name">element</span>&gt;</span></div><div class="line">							<span class="tag">&lt;/<span class="name">sequence</span>&gt;</span></div><div class="line">							<span class="comment">&lt;!-- 声明属性,name:属性名,type:属性类型,use:约束;use="required"必须写 --&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">attribute</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">type</span>=<span class="string">"ID"</span> <span class="attr">use</span>=<span class="string">"required"</span>&gt;</span><span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></div><div class="line">						<span class="tag">&lt;/<span class="name">complexType</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">element</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">sequence</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">complexType</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">element</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">schema</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1.概念&lt;/strong&gt;&lt;br&gt;XML(Extensible Markup Language),是可扩展的标记语言.&lt;br&gt;标记—–由标签组成&lt;br&gt;可扩展—标签可以自定义&lt;br&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="https://geekhoon.github.io/categories/JavaWeb/"/>
    
    
      <category term="前端开发" scheme="https://geekhoon.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>DBUtils</title>
    <link href="https://geekhoon.github.io/2017/03/30/22-DBUtils/"/>
    <id>https://geekhoon.github.io/2017/03/30/22-DBUtils/</id>
    <published>2017-03-30T12:37:56.000Z</published>
    <updated>2017-04-02T08:49:07.707Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>1.是JDBC的简化开发工具包,简化数据库相关操作<br>2.需要导入jar包: commons-dbutils-1.6.jar<br><a id="more"></a>    </p>
<h3 id="QueryRunner实现增删改"><a href="#QueryRunner实现增删改" class="headerlink" title="QueryRunner实现增删改"></a>QueryRunner实现增删改</h3><p>方法:<br>    update(Connection conn,String sql,Object…params): 执行增删改<br>    其中Object…params: 可变参数,Object类型,当SQL语句中出现?占位符时使用<br>DBUTils中补齐SQL语句的参数使用了可变参数,可以传递一个具体的数组,也可以直接传递数组元素,如果是后者,编译后直接将这些元素再组织成一个数组</p>
<h4 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="comment">//获取数据库连接</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Connection con = JDBCUtilsConfig.getConnection();</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">		insert();</div><div class="line">		<span class="comment">//update();</span></div><div class="line">		<span class="comment">//delete();</span></div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">		<span class="comment">//创建QueryRunner类对象</span></div><div class="line">		QueryRunner qr = <span class="keyword">new</span> QueryRunner();</div><div class="line">		String sql = <span class="string">"INSERT INTO sort (sname,sprice,sdesc) VALUES (?,?,?)"</span>;</div><div class="line">		<span class="comment">//将三个占位符的实际参数, 写在数组中</span></div><div class="line">		Object[] params = &#123;<span class="string">"体育用品"</span>,<span class="number">289.32</span>,<span class="string">"购买体育用品"</span>&#125;;</div><div class="line">		<span class="comment">//调用QueryRunner类的方法update执行sql语句</span></div><div class="line">		<span class="keyword">int</span> row = qr.update(con, sql, params);</div><div class="line">		System.out.println(row);</div><div class="line">		<span class="comment">//调用DBUtils释放资源</span></div><div class="line">		DbUtils.closeQuietly(con);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">	<span class="comment">//创建QueryRunner类对象</span></div><div class="line">	QueryRunner qr = <span class="keyword">new</span> QueryRunner();</div><div class="line">	String sql = <span class="string">"UPDATE sort SET sname = ?,sprice = ?,sdesc = ? WHERE sid = ?"</span>;</div><div class="line">	<span class="comment">//定于Object数组,存取实际参数</span></div><div class="line">	Object[] params = &#123;<span class="string">"花卉"</span>,<span class="number">100.88</span>,<span class="string">"情人节玫瑰"</span>,<span class="number">4</span>&#125;;</div><div class="line">	<span class="keyword">int</span> row = qr.update(con, sql, params);</div><div class="line">	System.out.println(row);</div><div class="line">	<span class="comment">//调用DBUtils释放资源</span></div><div class="line">	DbUtils.closeQuietly(con);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</div><div class="line">	<span class="comment">//创建QueryRunner对象</span></div><div class="line">	QueryRunner qr = <span class="keyword">new</span> QueryRunner();</div><div class="line">	String sql = <span class="string">"DELETE FROM sort WHERE sid = ?"</span>;</div><div class="line">	<span class="keyword">int</span> row = qr.update(con, sql, <span class="number">9</span>);</div><div class="line">	System.out.println(row);</div><div class="line">	DbUtils.closeQuietly(con);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="QueryRunner实现查询"><a href="#QueryRunner实现查询" class="headerlink" title="QueryRunner实现查询"></a>QueryRunner实现查询</h3><p>用来完成表数据的查询操作方法:<br>    query(Connection conn, String sql, ResultSetHandler<t> rsh, Object… params):<br>ResultSetHandler<t> rsh: 结果集的处理方式,传递的是ResultSetHandler接口的实现类<br>注意: query()的返回值是泛型类型T</t></t></p>
<h4 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h4><p><strong>1.概念</strong><br>一个普通Java类,在开发中常用封装数据,一般数据库的一张表对应一个Java类,类名对应表名,类中的字段对应表中的字段<br><strong>2.创建JavaBean时,必须得遵循一定的规范</strong><br> A、必须有包,所有数据表对应的类存放同一文件夹下<br> B、声明类时必须实现序列化接口,实现serializable(但是好多JavaBean实现没有遵守此规范)<br> C、属性私有，提供公共的set/get方法,让属性的数据赋值更为安全<br> D、必须提供无参构造<br>  场景1：如果当前类没有自定义构造方法，这是系统默认提供<br>  场景2：如果自定义了一个有参构造，这时，我们必须自己提供一个无参构造</p>
<h4 id="ResultSetHandler结果集处理类"><a href="#ResultSetHandler结果集处理类" class="headerlink" title="ResultSetHandler结果集处理类"></a>ResultSetHandler结果集处理类</h4><p>8种结果集的处理方式:<br>1.ArrayHandler——- 将第一条结果的每一个字段都当成数组的一个元素,组织成一个数组,即结果的字段个数就是数组长度<br>2.ArrayListHandler— 将每一条结果组织成一个数组，再将数组存储进集合<br>3.BeanHandler——– 将查询结果的第一条记录组织成一个 JavaBean 对象<br>4.BeanListHandler—- 将每一条记录组织成一个 JavaBean 对象，然后将对象存入集合<br>5.ColumnListHandler– 将结果集中某一列的数据存放到List中(List<object>)<br>6.ScalarHandler—— 获取单个结果，一般结合聚合函数使用<br>7.MapHandler——— 将第一条记录组织成一个 map 集合，键是字段名，值是字段对应的值<br>8.MapListHandler—– 将每一条记录组织成一个 map 集合，这些map 集合再存入 List</object></p>
<h4 id="ArrayHandler与ArrayListHandler查询"><a href="#ArrayHandler与ArrayListHandler查询" class="headerlink" title="ArrayHandler与ArrayListHandler查询"></a>ArrayHandler与ArrayListHandler查询</h4><p>1.ArrayHandler: 将结果集的第一行存储到对象数组中Object[]<br>不管查询到几行,只存储第一行<br>数组长度不等于0,代表查询到内容了<br>2.ArrayListHandler: 将结果集的每一行封装到对象数组中,出现很多对象数组,将对象数组存储到list集合<br>返回值: 存储很多对象数组的List集合<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="comment">//获取数据库连接</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Connection con = JDBCUtilsConfig.getConnection();</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">		arrayHandler();</div><div class="line">		<span class="comment">//arrayListHandler();</span></div><div class="line">		<span class="comment">//调用DBUtils释放资源</span></div><div class="line">		DbUtils.closeQuietly(con);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">ArrayHandler:</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">arrayHandler</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">	QueryRunner qr = <span class="keyword">new</span> QueryRunner();</div><div class="line">	String sql = <span class="string">"SELECT * FROM sort"</span>;</div><div class="line"><span class="comment">//query方法传递的参数有:</span></div><div class="line"><span class="comment">//连接对象,sql语句,结果集处理方式的实现类,有占位符的话还有加上实际参数</span></div><div class="line">	Object[] result = qr.query(con, sql, <span class="keyword">new</span> ArrayHandler());</div><div class="line">	<span class="keyword">if</span> (result.length != <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">for</span> (Object obj : result) &#123;</div><div class="line">			System.out.print(obj+<span class="string">"\t"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		System.out.println(<span class="string">"没有查询到数据"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ArrayListHandler:</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">arrayListHandler</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">	QueryRunner qr = <span class="keyword">new</span> QueryRunner();</div><div class="line">	String sql = <span class="string">"SELECT * FROM sort"</span>;</div><div class="line"><span class="comment">//query方法传递的参数有:</span></div><div class="line"><span class="comment">//连接对象,sql语句,结果集处理方式的实现类,有占位符的话还有加上实际参数</span></div><div class="line">	List&lt;Object[]&gt; result = qr.query(con, sql, <span class="keyword">new</span> ArrayListHandler());</div><div class="line">	<span class="keyword">if</span> (result.size() != <span class="number">0</span>) &#123;</div><div class="line">	<span class="comment">//遍历集合</span></div><div class="line">		<span class="keyword">for</span> (Object[] objs : result) &#123;</div><div class="line">			<span class="comment">//遍历对象数组</span></div><div class="line">			<span class="keyword">for</span> (Object obj : objs) &#123;</div><div class="line">				System.out.print(obj+<span class="string">"\t"</span>);</div><div class="line">			&#125;</div><div class="line">			System.out.println();</div><div class="line">		&#125;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		System.out.println(<span class="string">"没有查询到数据"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="BeanHandler与BeanListHandler查询"><a href="#BeanHandler与BeanListHandler查询" class="headerlink" title="BeanHandler与BeanListHandler查询"></a>BeanHandler与BeanListHandler查询</h4><p>1.BeanHandler: 将结果集的第一行数据,封装成JavaBean对象<br>注意: 将数据封装到JavaBean对象, Sort类必须有空参构造<br>2.BeanListHandler: 将结果集的每一行数据,封装成JavaBean对象<br>多个JavaBean对象,封装到List集合<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">BeanHandler:</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">beanHandler</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">	QueryRunner qr = <span class="keyword">new</span> QueryRunner();</div><div class="line">	String sql = <span class="string">"SELECT * FROM sort"</span>;</div><div class="line">	<span class="comment">//调用方法,传递结果实现类BeanHandler</span></div><div class="line">	<span class="comment">//BeanHandler(Class&lt;T&gt; type)</span></div><div class="line">	Sort s = qr.query(con, sql, <span class="keyword">new</span> BeanHandler&lt;Sort&gt;(Sort.class));</div><div class="line">	System.out.println(s);</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line">BeanListHandler:</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">beanListHandler</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">	QueryRunner qr = <span class="keyword">new</span> QueryRunner();</div><div class="line">	String sql = <span class="string">"SELECT * FROM sort"</span>;</div><div class="line">	<span class="comment">//调用方法传递结果集的实现类BeanListHandler</span></div><div class="line">	List&lt;Sort&gt; list = qr.query(con, sql, <span class="keyword">new</span> BeanListHandler&lt;Sort&gt;(Sort.class));</div><div class="line">	<span class="keyword">for</span> (Sort s : list) &#123;</div><div class="line">		System.out.println(s);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="ColumnListHandler与ScalarHandler查询"><a href="#ColumnListHandler与ScalarHandler查询" class="headerlink" title="ColumnListHandler与ScalarHandler查询"></a>ColumnListHandler与ScalarHandler查询</h4><p>1.ColumnListHandler: 将结果集指定列的数据存储到List集合<br>List<object>: 集合泛型是Object<br>2.ScalarHandler: 适用于查询后只有一个结果(聚合函数的结果)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">ColumnListHandler:</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">columnListHandler</span><span class="params">()</span><span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">	QueryRunner qr = <span class="keyword">new</span> QueryRunner();</div><div class="line">	String sql = <span class="string">"SELECT * FROM sort"</span>;</div><div class="line">	<span class="comment">//调用方法query,传递结果集实现类ColumnListHandler</span></div><div class="line">	<span class="comment">//实现类构造方法中,使用字符串的列名</span></div><div class="line">	List&lt;Object&gt; list = qr.query(con, sql, <span class="keyword">new</span> ColumnListHandler&lt;Object&gt;(<span class="string">"sname"</span>));</div><div class="line">	<span class="keyword">for</span> (Object obj : list) &#123;</div><div class="line">		System.out.println(obj);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ScalarHandler:</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">scalarHandler</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">	QueryRunner qr = <span class="keyword">new</span> QueryRunner();</div><div class="line">	String sql = <span class="string">"SELECT COUNT(*) FROM sort"</span>;</div><div class="line">	<span class="comment">//qr.query(con, sql, new ScalarHandler&lt;Object&gt;());</span></div><div class="line">	<span class="comment">//如果已知结果为int, 泛型直接写成long, 不知道的话使用Object</span></div><div class="line">	Long count = qr.query(con, sql, <span class="keyword">new</span> ScalarHandler&lt;Long&gt;());</div><div class="line">	System.out.println(count);</div><div class="line">&#125;</div></pre></td></tr></table></figure></object></p>
<h4 id="MapHandler与MapListHandler查询"><a href="#MapHandler与MapListHandler查询" class="headerlink" title="MapHandler与MapListHandler查询"></a>MapHandler与MapListHandler查询</h4><p>1.MapHandler: 将结果集的第一行数据,封装到map集合<br>键: 查询的列名<br>值: 对应列的数据<br>2.MapListHandler: 将结果集每一行存储到Map集合,键:列名,值:数据<br>Map集合过多,存储到List集合<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">MapHandler:</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mapHandler</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">	QueryRunner qr = <span class="keyword">new</span> QueryRunner();</div><div class="line">	String sql = <span class="string">"SELECT * FROM sort"</span>;</div><div class="line">	<span class="comment">//返回值是一个Map集合</span></div><div class="line">	Map&lt;String, Object&gt; map = qr.query(con, sql, <span class="keyword">new</span> MapHandler());</div><div class="line">	<span class="keyword">for</span> (String key : map.keySet()) &#123;</div><div class="line">		System.out.println(key+<span class="string">" "</span>+map.get(key));</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">MapListHandler:</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mapListHandler</span><span class="params">()</span><span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">	QueryRunner qr = <span class="keyword">new</span> QueryRunner();</div><div class="line">	String sql = <span class="string">"SELECT *  FROM sort"</span>;</div><div class="line">	<span class="comment">//返回值是List集合, 存储的是Map集合</span></div><div class="line">	List&lt;Map&lt;String, Object&gt;&gt; list = qr.query(con, sql, <span class="keyword">new</span> MapListHandler());</div><div class="line">	<span class="keyword">for</span> (Map&lt;String, Object&gt; map : list) &#123;</div><div class="line">		<span class="keyword">for</span> (String key : map.keySet()) &#123;</div><div class="line">			System.out.print(<span class="string">"\t"</span>+key+<span class="string">"\t"</span>+map.get(key)+<span class="string">"\t"</span>);</div><div class="line">		&#125;</div><div class="line">		System.out.println();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><p>对连接池对象进行测试:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>.工具类返回的是一个DataSource接口的数据源</div><div class="line"><span class="number">2</span>.QueryRunner类的构造方法中可以直接接收DataSource接口的实现类</div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.commons.dbutils.QueryRunner;</div><div class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.ArrayListHandler;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</div><div class="line">	<span class="comment">//QueryRunner类对象,写在类成员位置</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> QueryRunner qr = <span class="keyword">new</span> QueryRunner(JDBCUtils.getDataSource());</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">//insert();</span></div><div class="line">		select();</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//定义方法,实现数据的查询</span></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span> </span>&#123;</div><div class="line">		String sql = <span class="string">"SELECT * FROM sort"</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			List&lt;Object[]&gt; list = qr.query(sql, <span class="keyword">new</span> ArrayListHandler());</div><div class="line">			<span class="keyword">for</span> (Object[] objs : list) &#123;</div><div class="line">				<span class="keyword">for</span> (Object obj : objs) &#123;</div><div class="line">					System.out.print(obj+<span class="string">"\t"</span>);</div><div class="line">				&#125;</div><div class="line">				System.out.println();</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"查询数据失败"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//定义方法,实现数据的添加</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</div><div class="line">		String sql = <span class="string">"INSERT INTO sort (sname,sprice,sdesc) VALUES (?,?,?)"</span>;</div><div class="line">		Object[] params = &#123;<span class="string">"水果"</span>,<span class="number">100.00</span>,<span class="string">"香蕉	"</span>&#125;;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">int</span> row = qr.update(sql, params);</div><div class="line">			System.out.println(row);</div><div class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"添加数据失败"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><pre><code>1.在本地创建数据库和表
 数据库名称:demo
 表名:user
 表中的字段名称及类型:
    字段名称        类型        要求
    id                int            主键,自增
    username        字符串(20)
    password        字符串(20)
2.新建java工程或者web工程
3.导入jar包和提供好的工具类
4.完善c3p0.properties文件
5.编写相应的实体类(User)
6.通过单元测试使用DBUtils完成用户的添加操作
7.通过单元测试使用DBUtils完成用户的查询操作
</code></pre><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>1.jar包</p>
<pre><code>- mysql-connector-java-5.1.39-bin.jar
- commons-dbutils-1.4.jar
- c3p0-0.9.1.2.jar
</code></pre><p>2.工具类</p>
<pre><code>- DataSourceUtils.java    
</code></pre><p>3.配置文件</p>
<pre><code>- c3p0-config.xml
</code></pre><h4 id="c3p0配置文件"><a href="#c3p0配置文件" class="headerlink" title="c3p0配置文件"></a>c3p0配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">default-config</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 基本配置 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span>&gt;</span>jdbc:mysql://localhost:3306/demo<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">default-config</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="DataSourceUtils工具类"><a href="#DataSourceUtils工具类" class="headerlink" title="DataSourceUtils工具类"></a>DataSourceUtils工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.sql.Connection;</div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.sql.DataSource;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceUtils</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> DataSource ds=<span class="keyword">new</span> ComboPooledDataSource();</div><div class="line">	</div><div class="line">	<span class="comment">//获取连接池</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> ds;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//获取连接</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</div><div class="line">		<span class="keyword">return</span> ds.getConnection();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="User实体类"><a href="#User实体类" class="headerlink" title="User实体类"></a>User实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">	<span class="keyword">private</span> String username;</div><div class="line">	<span class="keyword">private</span> String password;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> username;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.username = username;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> password;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.password = password;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"User [id="</span> + id + <span class="string">", username="</span> + username + <span class="string">", password="</span> + password + <span class="string">"]"</span>;</div><div class="line">	&#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="测试类-1"><a href="#测试类-1" class="headerlink" title="测试类"></a>测试类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.sql.DataSource;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.commons.dbutils.QueryRunner;</div><div class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanListHandler;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> </span>&#123;</div><div class="line">	DataSource ds = DataSourceUtils.getDataSource();</div><div class="line">	<span class="comment">//单元测试</span></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		QueryRunner qr = <span class="keyword">new</span> QueryRunner(ds);</div><div class="line">		String sql = <span class="string">"INSERT INTO user (username,password) VALUES (?,?)"</span>;</div><div class="line">		<span class="keyword">int</span> row =qr.update(sql,<span class="string">"王五"</span>, <span class="string">"jsdhjd"</span>);</div><div class="line">		<span class="keyword">if</span> (row &gt; <span class="number">0</span>) &#123;</div><div class="line">			System.out.println(<span class="string">"添加成功"</span>);</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			System.out.println(<span class="string">"添加失败"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//单元测试</span></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		</div><div class="line">		QueryRunner qr = <span class="keyword">new</span> QueryRunner(ds);</div><div class="line">		String sql = <span class="string">"SELECT * FROM user"</span>;</div><div class="line">		List&lt;User&gt; list = qr.query(sql,<span class="keyword">new</span> BeanListHandler&lt;User&gt;(User.class));</div><div class="line">		<span class="keyword">for</span> (User user : list) &#123;</div><div class="line">			System.out.println(user);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="几个易混淆概念"><a href="#几个易混淆概念" class="headerlink" title="几个易混淆概念"></a>几个易混淆概念</h3><p>1.JDBC:Java提供的访问数据库规范<br>2.JDBCUtils:JDBC工具类,用于获得连接对象或连接池对象<br>3.JDBC连接池:作用在程序与数据库连接的中间环节,侧重于连接(Connection)的创建与管理实现资源复用,提高执行效率<br>4.DBCP:一种实现JDBC连接池的第三方形式<br>5.DBUtils:作用与程序端,侧重于SQL语句操作的优化封装功能实现,简化代码书写<br>备注:<br>(1)JDBCUtils和DBUtils,前者获取连接对象或连接池对象,后者可以对数据库中数据进行增删改查<br>(2)DBUtils不是只在有连接池的情况下才能使用,只要是有数据库连接对象,就可以使用</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;1.是JDBC的简化开发工具包,简化数据库相关操作&lt;br&gt;2.需要导入jar包: commons-dbutils-1.6.jar&lt;br&gt;
    
    </summary>
    
      <category term="JAVA进阶" scheme="https://geekhoon.github.io/categories/JAVA%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="数据库" scheme="https://geekhoon.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>JDBC连接池</title>
    <link href="https://geekhoon.github.io/2017/03/30/21-%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    <id>https://geekhoon.github.io/2017/03/30/21-连接池/</id>
    <published>2017-03-30T12:34:03.000Z</published>
    <updated>2017-03-30T16:47:21.944Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>连接池是存放连接的容器,如果频繁地获得连接和释放资源,非常消耗资源,通过连接池,共享连接,可以解决此类问题.当需要数据库连接时,通过池来获取Connection对象,用完后,调用Connection的close()回收对象,对象回到连接池中,并没有真正关闭.<br><a id="more"></a><br><strong>优点:</strong><br>1.实现了资源复用<br>2.效率更高</p>
<h3 id="连接池实现方式"><a href="#连接池实现方式" class="headerlink" title="连接池实现方式"></a>连接池实现方式</h3><p>1.DBCP(第三方实现)<br>2.C3P0(第三方实现)<br>3.自定义连接池</p>
<h3 id="DataSource接口"><a href="#DataSource接口" class="headerlink" title="DataSource接口"></a>DataSource接口</h3><p>Java为数据库连接提供了公共的接口,数据库厂商需要让自己的连接池实现这个接口</p>
<h3 id="BasicDataSource类"><a href="#BasicDataSource类" class="headerlink" title="BasicDataSource类"></a>BasicDataSource类</h3><p>数据源的规范接口javax.sql.DataSource的实现类<br>在org.apache.commons.dbcp中<br>方法: </p>
<pre><code>- setXXX(参数): setDriverClassName,setUrl,setUsername,setPassword
- getConnection(): 获取数据库连接
</code></pre><p><strong>常见配置项</strong><br>1.必须项<br>2.基本项:</p>
<pre><code>- maxActive: 最大连接数量
- minidle: 最小空闲连接
- maxidle: 最大空闲连接
- initialSize: 初始化连接
</code></pre><h2 id="DBCP实现连接池"><a href="#DBCP实现连接池" class="headerlink" title="DBCP实现连接池"></a>DBCP实现连接池</h2><p><strong>1.导jar包</strong></p>
<pre><code>- mysql-connector-java-5.1.37-bin.jar
- commons-dbcp-1.4.jar
- commons-pool-1.5.6.jar
</code></pre><p><strong>2.使用DBCP创建数据库连接池对象</strong></p>
<pre><code>- 创建语法:
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DataSource ds = BasicDataSourceFactory.createDatasource(<span class="string">"存储连接信息的 properties 集合"</span>);</div></pre></td></tr></table></figure>
<p><strong>3.使用DataSource,可以调用连接池对象的getConnection()获得Connection对象</strong><br>区别:con.close()时,之前是直接释放连接,但是现在是存储回连接池（详情看自定义连接池实现）</p>
<h3 id="配置文件代码实现"><a href="#配置文件代码实现" class="headerlink" title="配置文件代码实现"></a>配置文件代码实现</h3><p>dbcpconfig.properties放于src目录下<br>注意:工具类—方式2中只要4个必须配置项与配置文件匹配就可以,但是方式3和方式4中,因为是createDataSource(pro集合),直接进行加载,需要保证配置文件中4个必须项名字必须为driverClassName,url,username,password<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">#连接设置</div><div class="line">driverClassName=com.mysql.jdbc.Driver</div><div class="line">url=jdbc:mysql://localhost:3306/mybase</div><div class="line">username=root</div><div class="line">password=root</div><div class="line"></div><div class="line">#&lt;!-- 初始化连接 --&gt;</div><div class="line">initialSize=10</div><div class="line"></div><div class="line">#最大连接数量</div><div class="line">maxActive=50</div><div class="line"></div><div class="line">#&lt;!-- 最大空闲连接 --&gt;</div><div class="line">maxIdle=20</div><div class="line"></div><div class="line">#&lt;!-- 最小空闲连接 --&gt;</div><div class="line">minIdle=5</div><div class="line"></div><div class="line">#&lt;!-- 超时等待时间以毫秒为单位 6000毫秒/1000等于60秒 --&gt;</div><div class="line">maxWait=60000</div><div class="line"></div><div class="line"></div><div class="line">#JDBC驱动建立连接时附带的连接属性属性的格式必须为这样：[属性名=property;] </div><div class="line">#注意："user" 与 "password" 两个属性会被明确地传递，因此这里不需要包含他们。</div><div class="line">connectionProperties=useUnicode=true;characterEncoding=gbk</div><div class="line"></div><div class="line">#指定由连接池所创建的连接的自动提交（auto-commit）状态。</div><div class="line">defaultAutoCommit=true</div><div class="line"></div><div class="line">#driver default 指定由连接池所创建的连接的事务级别（TransactionIsolation）。</div><div class="line">#可用值为下列之一：（详情可见javadoc。）NONE,READ_UNCOMMITTED, READ_COMMITTED, REPEATABLE_READ, SERIALIZABLE</div><div class="line">defaultTransactionIsolation=READ_UNCOMMITTED</div></pre></td></tr></table></figure></p>
<h3 id="JDBCUtils工具类代码实现"><a href="#JDBCUtils工具类代码实现" class="headerlink" title="JDBCUtils工具类代码实现"></a>JDBCUtils工具类代码实现</h3><p>工具类—方式1: 使用DataSource的setXXX方法进行赋值<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</div><div class="line">	<span class="comment">//创建BasicDataSource类对象</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> BasicDataSource datasource = <span class="keyword">new</span> BasicDataSource();</div><div class="line">	</div><div class="line">	<span class="comment">//静态代码块,对BasicDataSource对象进行配置</span></div><div class="line">	<span class="keyword">static</span>&#123;</div><div class="line">		<span class="comment">//必须项</span></div><div class="line">		datasource.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</div><div class="line">		datasource.setUrl(<span class="string">"jdbc:mysql://localhost:3306/mybase"</span>);</div><div class="line">		datasource.setUsername(<span class="string">"root"</span>);</div><div class="line">		datasource.setPassword(<span class="string">"root"</span>);</div><div class="line">		<span class="comment">//自定义基本项,可选配置</span></div><div class="line">		datasource.setInitialSize(<span class="number">10</span>);<span class="comment">//初始化的连接数</span></div><div class="line">		datasource.setMaxActive(<span class="number">8</span>);<span class="comment">//最大连接数量</span></div><div class="line">		datasource.setMaxIdle(<span class="number">5</span>);<span class="comment">//最大空闲数</span></div><div class="line">		datasource.setMinIdle(<span class="number">1</span>);<span class="comment">//最小空闲数</span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//定义静态方法,返回BasicDataSource类的对象</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> datasource;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>工具类—方式2: 读取配置文件,使用DataSource的setXXX方法进行赋值<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtilsConfig</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> BasicDataSource dataSource = <span class="keyword">new</span> BasicDataSource();</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String driverClass;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String url;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String username;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String password;</div><div class="line">	</div><div class="line">	<span class="keyword">static</span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			readConfig();</div><div class="line">			dataSource.setDriverClassName(driverClass);</div><div class="line">			dataSource.setUrl(url);</div><div class="line">			dataSource.setUsername(username);</div><div class="line">			dataSource.setPassword(password);</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			<span class="comment">//e.printStackTrace();</span></div><div class="line">			System.out.println(e);</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"数据库连接失败"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readConfig</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		InputStream in = JDBCUtilsConfig.class.getClassLoader().getResourceAsStream(<span class="string">"database.properties"</span>);</div><div class="line">		Properties pro = <span class="keyword">new</span> Properties();</div><div class="line">		pro.load(in);</div><div class="line">		</div><div class="line">		driverClass = pro.getProperty(<span class="string">"driverClass"</span>);</div><div class="line">		url = pro.getProperty(<span class="string">"url"</span>);</div><div class="line">		username = pro.getProperty(<span class="string">"username"</span>);</div><div class="line">		password = pro.getProperty(<span class="string">"password"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> dataSource;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>工具类—方式3: (这种方式只是与方式4进行对比,并不会使用,因为效率极低)<br>读取配置文件,使用BasicDataSourceFactory.createDatasource()方法创建数据库连接池对象,但是每调用一次 getDs 方法,就创建一个新的连接池对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDs</span><span class="params">()</span></span>&#123;</div><div class="line">		DataSource ds = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//创建DBCP的数据库连接池对象</span></div><div class="line">			<span class="comment">//1、获取配置文件对应的输入流</span></div><div class="line">			InputStream in = JDBCUtils.class.getClassLoader().getResourceAsStream(<span class="string">"dbcpconfig.properties"</span>);</div><div class="line">			<span class="comment">//2、将流中数据读入集合</span></div><div class="line">			Properties pro = <span class="keyword">new</span> Properties();</div><div class="line">			pro.load(in);</div><div class="line">			ds = BasicDataSourceFactory.createDataSource(pro);</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> ds;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>工具类—方式4: 读取配置文件,使用BasicDataSourceFactory.createDatasource()方法创建数据库连接池对象,但只创建一个连接池对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> DataSource ds;</div><div class="line">	<span class="comment">//DatatSource 对象只会创建一个</span></div><div class="line">	<span class="keyword">static</span> &#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//创建DBCP的数据库连接池对象</span></div><div class="line">			<span class="comment">//1、获取配置文件对应的输入流</span></div><div class="line">			InputStream in = JDBCUtils.class.getClassLoader().getResourceAsStream(<span class="string">"dbcpconfig.properties"</span>);</div><div class="line">			<span class="comment">//2、将流中数据读入集合</span></div><div class="line">			Properties pro = <span class="keyword">new</span> Properties();</div><div class="line">			pro.load(in);</div><div class="line">			ds = BasicDataSourceFactory.createDataSource(pro);</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDs</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> ds;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="测试类代码实现"><a href="#测试类代码实现" class="headerlink" title="测试类代码实现"></a>测试类代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception  </span>&#123;</div><div class="line">		<span class="comment">//获取连接对象</span></div><div class="line">		Connection con = JDBCUtils.getDs().getConnection();</div><div class="line">		<span class="comment">//获取执行者对象</span></div><div class="line">		PreparedStatement ps = con.prepareStatement(<span class="string">"select * from teacher"</span>);</div><div class="line">		<span class="comment">//执行sql</span></div><div class="line">		ResultSet rs = ps.executeQuery();</div><div class="line">		<span class="comment">//处理结果集</span></div><div class="line">		<span class="keyword">while</span>(rs.next())&#123;</div><div class="line">			System.out.println(rs.getString(<span class="number">1</span>) + <span class="string">"\t"</span> + rs.getString(<span class="number">2</span>));</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//关闭</span></div><div class="line">		rs.close();</div><div class="line">		ps.close();</div><div class="line">		<span class="comment">//和以前不同,连接池中取出的con调用close()没有真正关闭,而是存回连接池</span></div><div class="line">		con.close();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="C3P0实现连接池"><a href="#C3P0实现连接池" class="headerlink" title="C3P0实现连接池"></a>C3P0实现连接池</h2><p><strong>1.导jar包</strong></p>
<pre><code>- 驱动:mysql-connector-java-5.1.39-bin.jar
- c3p0-0.9.2-pre5.jar
- mchange-commons-java-0.2.3.jar
</code></pre><p><strong>2.使用C3P0创建对应的数据库连接池对象</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DataSource ds = <span class="keyword">new</span> ComboPooledDataSource();</div></pre></td></tr></table></figure></p>
<p>注意:<br>1)、虽然有配置文件,但是配置文件并没有自己读取,new对象时,c3p0会自动读取配置文件,此过程隐藏<br>2)、保证配置文件存在的路径在src下,其实复制到bin目录下,读取时是从bin目录下查找的<br>3)、配置文件的文件名必须固定— c3p0-config.xml<br><strong>3.具体的连接对象使用与DBCP、JDBC一样.con.close()不是真的释放,而是存储回连接池</strong><br><strong>4.C3P0配置信息</strong><br>默认配置(default-config)与命名配置(named-config)</p>
<pre><code>- 一般一个程序对应一个数据库，但是可能一个程序对应多个数据库
- 使用 default-config 配置最常用的数据库,使用 named-config 配置其余数据库
- new ComboPooledDataSource() 根据默认配置创建一个连接池
- new ComboPooledDataSource(&quot;name值&quot;) 根据指定的配置创建一个连接池
</code></pre><h3 id="配置文件代码实现-1"><a href="#配置文件代码实现-1" class="headerlink" title="配置文件代码实现"></a>配置文件代码实现</h3><p>c3p0-config.xml放于src目录下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 默认配置，如果没有指定则使用这个配置</span></div><div class="line">		默认配置最常用</div><div class="line">		</div><div class="line">		建议放在最开头。</div><div class="line">		放其他地方也没问题</div><div class="line">	 --&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">default-config</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span>&gt;</span>jdbc:mysql://127.0.0.1:3306/mybase<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"checkoutTimeout"</span>&gt;</span>30000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"idleConnectionTestPeriod"</span>&gt;</span>30<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdleTime"</span>&gt;</span>30<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span>&gt;</span>100<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatements"</span>&gt;</span>200<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">user-overrides</span> <span class="attr">user</span>=<span class="string">"test-user"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatements"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">user-overrides</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">default-config</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 命名的配置</span></div><div class="line">		一般的大型项目中，使用最多是命名配置</div><div class="line">	 --&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">named-config</span> <span class="attr">name</span>=<span class="string">"geekhoon"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 连接数据库的4项基本参数 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span>&gt;</span>jdbc:mysql://127.0.0.1:3306/geekhoon<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 如果池中数据连接不够时一次增长多少个 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireIncrement"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 初始化连接数 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span>&gt;</span>20<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 最小连接受 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 最大连接数 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span>&gt;</span>40<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- -JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatements"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 连接池内单个连接所拥有的最大缓存statements数 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatementsPerConnection"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">named-config</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">named-config</span> <span class="attr">name</span>=<span class="string">"geek"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 连接数据库的4项基本参数 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span>&gt;</span>jdbc:mysql://127.0.0.1:3306/geek<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 如果池中数据连接不够时一次增长多少个 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireIncrement"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 初始化连接数 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span>&gt;</span>20<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 最小连接受 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 最大连接数 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span>&gt;</span>40<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- -JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatements"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 连接池内单个连接所拥有的最大缓存statements数 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatementsPerConnection"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">named-config</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="JDBCUtils工具类代码实现-1"><a href="#JDBCUtils工具类代码实现-1" class="headerlink" title="JDBCUtils工具类代码实现"></a>JDBCUtils工具类代码实现</h3><p>工具类—方式1: 读取默认配置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> DataSource ds = <span class="keyword">new</span> ComboPooledDataSource();</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">ds</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> ds;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>工具类—方式2: 读取命名配置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> DataSource ds = <span class="keyword">new</span> ComboPooledDataSource(<span class="string">"geekhoon"</span>);</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">ds</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> ds;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="测试类代码实现-1"><a href="#测试类代码实现-1" class="headerlink" title="测试类代码实现"></a>测试类代码实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class Test &#123;</div><div class="line">	public static void main(String[] args) throws Exception &#123;</div><div class="line">		Connection con = JDBCUtils.ds().getConnection();</div><div class="line">		PreparedStatement ps = con.prepareStatement(&quot;select * from 表名&quot;);</div><div class="line">		ResultSet rs = ps.executeQuery();</div><div class="line">		while(rs.next())&#123;</div><div class="line">			System.out.println(rs.getString(1) + &quot;\t&quot; + rs.getString(2));</div><div class="line">		&#125;</div><div class="line">		rs.close();</div><div class="line">		ps.close();</div><div class="line">		con.close();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="自定义连接池"><a href="#自定义连接池" class="headerlink" title="自定义连接池"></a>自定义连接池</h2><p>三个步骤:<br>1.定义一个集合,存储若干连接<br>2.提供一个方法,获取相关连接,再将连接移出给调用者<br>3.提供一个方法,使用完连接时,再将连接存回该连接池</p>
<h3 id="自定义连接池写法1"><a href="#自定义连接池写法1" class="headerlink" title="自定义连接池写法1"></a>自定义连接池写法1</h3><p>写法1中,当使用完连接对象存回的时候,需要调用MyPool.close(Connection con);<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPool</span></span>&#123;</div><div class="line">	<span class="comment">//1.定义集合,存储连接</span></div><div class="line">	<span class="comment">//由于增删频繁,因此使用 LinkedList 而不是 ArrayList</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> LinkedList&lt;Connection&gt; pool = <span class="keyword">new</span> LinkedList&lt;Connection&gt;();</div><div class="line">	<span class="comment">//一旦创建,集合预先存储一些连接</span></div><div class="line">	<span class="keyword">static</span> &#123;</div><div class="line">		<span class="comment">//存储三个连接</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</div><div class="line">			pool.add(getCon());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Connection <span class="title">getCon</span><span class="params">()</span></span>&#123;</div><div class="line">		Connection con = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</div><div class="line">			con = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/geekhoon"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> con;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//2.提供一个方法,获取相关连接,再将连接移出给调用者</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConByPool</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="comment">//从集合取出一个连接 ---- 获取并移出</span></div><div class="line">		<span class="comment">/*</span></div><div class="line">		 * remove 和 get 区别：</div><div class="line">		 *  前者是获取并从集合移出</div><div class="line">		 *  后者只是获取,不移除 </div><div class="line">		 * </div><div class="line">		 */</div><div class="line">		<span class="comment">//版本1</span></div><div class="line">		<span class="comment">//return pool.remove();</span></div><div class="line">		<span class="comment">//版本2优化 ---- 判断是不是连接都被占用者，如果是，新建连接</span></div><div class="line">		<span class="keyword">if</span>(!pool.isEmpty())&#123;</div><div class="line">			<span class="keyword">return</span> pool.remove();</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> getCon();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//3.提供一个方法,使用完连接时,再将连接存回该连接池</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection con)</span></span>&#123;</div><div class="line">		pool.add(con);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="测试类代码实现-2"><a href="#测试类代码实现-2" class="headerlink" title="测试类代码实现"></a>测试类代码实现</h4><p>测试类1: 获取连接后,打印连接对象地址,然后存回连接池,由于连接池只有三个连接对象,当获取第四个连接对象时,由于之前的连接对象使用完后,已经存回了,所以con4打印的对象地址和con1的对象地址一样,实现了连接池的功能<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">//获取连接</span></div><div class="line">		Connection con1 = MyPool.getConByPool();</div><div class="line">		System.out.println(con1);</div><div class="line">		MyPool.close(con1);</div><div class="line">		Connection con2 = MyPool.getConByPool();</div><div class="line">		System.out.println(con2);</div><div class="line">		MyPool.close(con2);</div><div class="line">		Connection con3 = MyPool.getConByPool();</div><div class="line">		System.out.println(con3);</div><div class="line">		MyPool.close(con3);</div><div class="line">		</div><div class="line">		Connection con4 = MyPool.getConByPool();</div><div class="line">		System.out.println(con4);</div><div class="line">		MyPool.close(con4);</div><div class="line">		</div><div class="line">		System.out.println(MyPool.pool);<span class="comment">//打印的是3个元素,con4并没有创建新的连接对象</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试类2: 获取连接对象,打印对象地址后,并不存回,当获取第四个连接对象时,池中并没有连接,所以创建了新的连接,所以打印的四个对象地址都不相同,注意代码中1,2,3处打印,1处打印0个元素的集合,2处也打印0个元素的集合,3处打印4个元素的集合<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		Connection con1 = MyPool.getConByPool();</div><div class="line">		System.out.println(con1);</div><div class="line">		Connection con2 = MyPool.getConByPool();</div><div class="line">		System.out.println(con2);</div><div class="line">		Connection con3 = MyPool.getConByPool();</div><div class="line">		System.out.println(con3);</div><div class="line">		<span class="comment">//1	</span></div><div class="line">		System.out.println(MyPool.pool);</div><div class="line"></div><div class="line">		Connection con4 = MyPool.getConByPool();</div><div class="line">		System.out.println(con4);</div><div class="line">		<span class="comment">//2</span></div><div class="line">		System.out.println(MyPool.pool);</div><div class="line">		</div><div class="line">		MyPool.close(con1);</div><div class="line">		MyPool.close(con2);</div><div class="line">		MyPool.close(con3);</div><div class="line">		MyPool.close(con4);</div><div class="line">		<span class="comment">//3</span></div><div class="line">		System.out.println(MyPool.pool);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="自定义连接池写法2"><a href="#自定义连接池写法2" class="headerlink" title="自定义连接池写法2"></a>自定义连接池写法2</h3><p>写法2中,不再使用自定义连接池MyPool的close()进行存回,而是使用Connection接口的close()进行存回,但是我们知道Connection接口的close()只是单纯地释放掉资源,并没有存回操作.所以我们现在的想法是:<strong>重写close()</strong><br>在重写之前,首先我们要知道下面操作返回的是什么?<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Connection con = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/geekhoon"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</div><div class="line">DriverManager.getConnection()返回的是MySQL jar包中Connection接口的实现类对象</div><div class="line">这个实现类重写了Connection接口的方法</div></pre></td></tr></table></figure></p>
<p>第一种想法是:<strong>继承类</strong><br>找到jar包中Connection接口的实现类,重写close(),但有以下几方面问题:<br>1.这个类,在jar包,需要通过反射找到相关类<br>2.更换其他数据库jar包后,还要重新找,重新重写<br>3.Java只支持单继承,如果继承一个类,就不能继承其他类,使用起来有限制<br>第二中想法是:<strong>实现接口</strong><br>实现java.sql.Connection接口,即使更换jar包,连接池依然可用<br><strong>步骤:</strong><br>1.自定义实现类MyConnection实现Connection接口,重写里面的所有方法<br>2.在MyConnection类中传入一个Connection接口对象con,方法中除了自己要重写的方法外,其余的方法都要调用con原来的方法实现,即MySQL jar包下Connection接口的实现类重写的方法<br>3.需要重写的方法,不再调用con原来的方法实现,而是自定义实现<br><strong>MyConnection对象相对于Connection对象,前者包裹了后者,可以调用后者的功能,并且进行了功能增强,称之为装饰设计模式</strong></p>
<h4 id="MyConnection代码实现"><a href="#MyConnection代码实现" class="headerlink" title="MyConnection代码实现"></a>MyConnection代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConnection</span> <span class="keyword">implements</span> <span class="title">Connection</span> </span>&#123;</div><div class="line">	<span class="comment">//创建一个连接对象</span></div><div class="line">	<span class="keyword">private</span> Connection con;</div><div class="line">	<span class="comment">//创建一个集合,存连接对象,这个集合对象pool也就是连接池对象</span></div><div class="line">	<span class="keyword">private</span> LinkedList&lt;Connection&gt; pool;</div><div class="line">	<span class="comment">//定义有参构造</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyConnection</span><span class="params">(Connection con,LinkedList&lt;Connection&gt; pool)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.con = con;</div><div class="line">		<span class="keyword">this</span>.pool = pool;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">		<span class="comment">//con.close(); 这样写的话就是释放资源了</span></div><div class="line">		</div><div class="line">		pool.add(<span class="keyword">this</span>);<span class="comment">//存回缓存池,this代表调用者</span></div><div class="line">	&#125;</div><div class="line">	...还有N多方法不需要增强,但也需要重写,如下,就不一一列举了</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> PreparedStatement <span class="title">prepareStatement</span><span class="params">(String sql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">		<span class="keyword">return</span> con.prepareStatement(sql);<span class="comment">//调用con原来的方法实现</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="MyPool代码实现"><a href="#MyPool代码实现" class="headerlink" title="MyPool代码实现"></a>MyPool代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPool</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> LinkedList&lt;Connection&gt; pool = <span class="keyword">new</span> LinkedList&lt;Connection&gt;();</div><div class="line">	<span class="keyword">static</span> &#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</div><div class="line">			pool.add(getCon());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Connection <span class="title">getCon</span><span class="params">()</span></span>&#123;</div><div class="line">		Connection con = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</div><div class="line">			<span class="comment">//----------------------关键步骤------------------------</span></div><div class="line">			Connection conByJar = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/geekhoon"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</div><div class="line">			<span class="comment">//将Connection接口的实现类对象和连接池pool作为参数,传入有参构造,重写close()</span></div><div class="line">			con = <span class="keyword">new</span> MyConnection(conByJar,pool);<span class="comment">//con的close()就已经重写啦</span></div><div class="line">			<span class="comment">//-----------------------------------------------------</span></div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> con;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConByPool</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">if</span>(!pool.isEmpty())&#123;</div><div class="line">			<span class="keyword">return</span> pool.remove();</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> getCon();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="测试类代码实现-3"><a href="#测试类代码实现-3" class="headerlink" title="测试类代码实现"></a>测试类代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		Connection con1 = MyPool.getConByPool();</div><div class="line">		System.out.println(con1);</div><div class="line">		Connection con2 = MyPool.getConByPool();</div><div class="line">		System.out.println(con2);</div><div class="line">		Connection con3 = MyPool.getConByPool();</div><div class="line">		System.out.println(con3);</div><div class="line"></div><div class="line">		Connection con4 = MyPool.getConByPool();</div><div class="line">		System.out.println(con4);</div><div class="line">		</div><div class="line">		con1.close();</div><div class="line">		con2.close();</div><div class="line">		con3.close();</div><div class="line">		con4.close();</div><div class="line"></div><div class="line">		System.out.println(MyPool.pool);<span class="comment">//打印集合中有4个元素</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;连接池是存放连接的容器,如果频繁地获得连接和释放资源,非常消耗资源,通过连接池,共享连接,可以解决此类问题.当需要数据库连接时,通过池来获取Connection对象,用完后,调用Connection的close()回收对象,对象回到连接池中,并没有真正关闭.&lt;br&gt;
    
    </summary>
    
      <category term="JAVA进阶" scheme="https://geekhoon.github.io/categories/JAVA%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="数据库" scheme="https://geekhoon.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Bootstrap</title>
    <link href="https://geekhoon.github.io/2017/03/26/JavaWeb-04-Bootstrap/"/>
    <id>https://geekhoon.github.io/2017/03/26/JavaWeb-04-Bootstrap/</id>
    <published>2017-03-25T17:52:21.000Z</published>
    <updated>2017-03-28T13:17:46.789Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><pre><code>1. 是基于HTML,CSS,JS的前端框架(半成品).
   只需要提供固定的HTML结构,添加固定的css样式,就可以完成指定效果的实现
   框架------&gt; 也是一种封装,封装的高级形式
   封装------&gt; 方法---&gt;类(Java中封装特指类)---&gt;jar包---&gt;框架
</code></pre><a id="more"></a>
<pre><code>       1. jar包-----&gt; 封装的是某个功能模块(侧重于功能实现)
       2. 框架------&gt; 封装的是流程(结构性封装)    
2. 在JQuery的基础上实现的,是JQuery的插件
</code></pre><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><pre><code>1. 内置了一些常见的复杂的页面实现(封装了一些常见功能)
2. 可以实现响应式布局(根据响应终端自适应显示)
    根据访问终端屏幕的大小,动态的改变显示样式(只提供一套代码即可)
</code></pre><h4 id="Bootstrap开发环境"><a href="#Bootstrap开发环境" class="headerlink" title="Bootstrap开发环境"></a>Bootstrap开发环境</h4><pre><code>1. 引入JQuery实现,注意版本必须兼容
2. 将dist目录下的css font js文件夹复制到当前项目
注意: 这些文件夹必须平级
</code></pre><h3 id="Bootstrap容器"><a href="#Bootstrap容器" class="headerlink" title="Bootstrap容器"></a>Bootstrap容器</h3><pre><code>编写页面(界面),必然涉及的概念:
1. 容器: 存储页面元素的一个组件
2. 布局: 怎么在容器排放组件
容器:
1. 容器1:
    * 语法: &lt;div class=&quot;container&quot;&gt;&lt;/div&gt;
    * 效果: 大页面下两端有留白
2. 容器2:
    * 语法: &lt;div class=&quot;container-fluid&quot;&gt;&lt;/div&gt;
    * 效果: 两端无留白
拓展:
    我们只声明了class,但效果显现了,这个class怎么运行的?
    在引入的css文件中,编写相关的class样式了
So: class写错,可能识别不了,因为class值都是Bootstrap内置好的,不能随便使用
</code></pre><h3 id="Bootstrap布局"><a href="#Bootstrap布局" class="headerlink" title="Bootstrap布局"></a>Bootstrap布局</h3><pre><code>栅格(表格)系统:
1. 栅格本质是表格 ---- 行与列是两要素
2. 行与列实现
    1. 行 --- &lt;div class=&quot;row&quot;&gt;&lt;/div&gt; --- 可以写多个,代表多行
    2. 列 --- &lt;div class=&quot;col-屏幕代号-比例&quot;&gt;&lt;/div&gt;
       * Bootstrap中一行默认12单元列,编写的列必须声明一个所占的单元列数
注意:
    1. 12列是一个折中方案
    2. 行中分配列:
        * 所有列(比例)相加和为12
        * 小于12,空余部分不做处理
        * 大于12,大于12的部分会自动换行
</code></pre><h4 id="响应式布局机制"><a href="#响应式布局机制" class="headerlink" title="响应式布局机制"></a>响应式布局机制</h4><pre><code>1. Bootstrap将屏幕划分为四大类:
    1. 超小屏幕 &lt;= 768px ---- xs
    2. 小屏幕: 768 - 992 ---- sm
    3. 中等屏幕: 992 - 1200 - md
    4. 大屏幕: &gt;= 1200px ---- lg
2. 响应式布局的代码实现
    要设置某个屏幕下的占比 --- col-屏幕代号-占比
    现象: 
        1. 如果只设置lg,其余屏幕不按照占比分配
        2. 如果只设置xs,其余屏幕按照占比分配
    原则: 
        小屏幕优先,如果屏幕比我大,但是没设置占比,就按照我的占比来
        如果屏幕比我小,但是没设置占比,默认是换行,不受我的占比影响
    补充: 一个class属性可以设置多个值,不同值之间使用空格隔开
3. 拓展需求: 
    某些页面元素可能在某些屏幕下显示,某些屏幕下不显示:
    语法:
        方式1:(设置显示) 添加class visible-屏幕代号
        方式2:(设置隐藏) 添加class hidden-屏幕代号
    效果:
        在指定屏幕下显示(或隐藏),没有指定的不显示(或隐藏),没有小屏优先,必须严格对应
</code></pre><h3 id="基本模板"><a href="#基本模板" class="headerlink" title="基本模板"></a>基本模板</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"../css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/jquery-1.11.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/bootstrap.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;1. 是基于HTML,CSS,JS的前端框架(半成品).
   只需要提供固定的HTML结构,添加固定的css样式,就可以完成指定效果的实现
   框架------&amp;gt; 也是一种封装,封装的高级形式
   封装------&amp;gt; 方法---&amp;gt;类(Java中封装特指类)---&amp;gt;jar包---&amp;gt;框架
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="https://geekhoon.github.io/categories/JavaWeb/"/>
    
    
      <category term="前端开发" scheme="https://geekhoon.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>JQuery</title>
    <link href="https://geekhoon.github.io/2017/03/23/JavaWeb-03-JQuery/"/>
    <id>https://geekhoon.github.io/2017/03/23/JavaWeb-03-JQuery/</id>
    <published>2017-03-22T17:25:56.000Z</published>
    <updated>2017-03-28T13:17:42.173Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><pre><code>核心理念: write less,do more 
作用: 动态地修改内存中的html或css代码
1. JQuery是一个JavaScript框架,是对JS的封装,将一些常见的JS操作进行了封装,提高开发效率
    JQuery与JS的区别:类似与commons-io与JDK内置IO的关系
2. 兼容CSS3
3. 相对于JS,能更好地兼容浏览器(并没有完全兼容)
</code></pre><a id="more"></a>
<h3 id="JQuery的使用"><a href="#JQuery的使用" class="headerlink" title="JQuery的使用"></a>JQuery的使用</h3><pre><code>1. JQuery是一个第三方实现,必须下载相关实现库
2. 将实现库导入当前项目,类似于Java导入jar包
3. 当前HTML页面引入JQuery
&lt;script src=&quot;JQuery路径&quot;&gt;&lt;/script&gt;
</code></pre><h3 id="JQuery语法"><a href="#JQuery语法" class="headerlink" title="JQuery语法"></a>JQuery语法</h3><pre><code>记: JQuery是将JS对象的属性操作函数化了
注: JQuery中频繁使用jQuery函数,简化成一个$,二者等价
变量:
    var $变量名 = $(&quot;选择器&quot;);
    变量名前可以加$,代表是JQuery对象,区别于JS对象

    alert($变量名);//打印的是object Object代表是JQuery对象

注释:
    /*注解*/
    //注解
</code></pre><h4 id="获取JQuery对象"><a href="#获取JQuery对象" class="headerlink" title="获取JQuery对象"></a>获取JQuery对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">方式<span class="number">1</span>: 选择器获取</div><div class="line">	<span class="number">1.</span> 标签名(返回的是数组)</div><div class="line">		<span class="keyword">var</span> vs = $(<span class="string">"标签名"</span>); ====等价于==== <span class="built_in">document</span>.getElementByTagName(<span class="string">"标签名"</span>)</div><div class="line">	<span class="number">2.</span> 类名(返回的是数组)</div><div class="line">		<span class="keyword">var</span> vs = $(<span class="string">".类名"</span>); ====等价于==== <span class="built_in">document</span>.getElementByClassName(<span class="string">"类名"</span>)</div><div class="line">	<span class="number">3.</span> id(其实吧,id选择器返回的也是数组,只是数组长度为<span class="number">1</span>罢了)</div><div class="line">		<span class="keyword">var</span> v = $(<span class="string">"#id"</span>); ====等价于==== <span class="built_in">document</span>.getElementById(<span class="string">"id"</span>)</div><div class="line">方式<span class="number">2</span>: </div><div class="line">	<span class="number">1.</span> 获取JS对象</div><div class="line">	<span class="number">2.</span> 转换成JQuery对象</div><div class="line">	   语法: <span class="keyword">var</span> v = $(JS对象);</div><div class="line">	拓展:</div><div class="line">	   JQuery对象转换成JS对象: (不适用于数组)</div><div class="line">	   		语法(两种): </div><div class="line">				<span class="keyword">var</span> v = $(<span class="string">"选择器"</span>)[index];  <span class="comment">//如JQuery对象[0];</span></div><div class="line">				<span class="keyword">var</span> v = $(<span class="string">"选择器"</span>).get(index);</div><div class="line">	备注:</div><div class="line">	   JQuery对象转换成JS对象,数组不适用值得是JS数组,比如下面的例子</div><div class="line">	   但是如果是JQuery数组,是可以转成JS对象的,因为一句很重要的话:</div><div class="line">		JQ数组中每个元素都是JS对象	</div><div class="line">	<span class="comment">//JQuery 对象转 JS 对象注意</span></div><div class="line">		$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>);</div><div class="line">			<span class="comment">//JS数组转成 JQuery对象</span></div><div class="line">			<span class="keyword">var</span> arr2 = $(arr1);</div><div class="line">			<span class="comment">//arr2转为JS对象</span></div><div class="line">			<span class="keyword">var</span> arr3 = arr2[<span class="number">0</span>];</div><div class="line">			alert(arr3); <span class="comment">//打印a,所以说这种数组不适用这种转换方式</span></div><div class="line">		&#125;)</div><div class="line">	<span class="comment">//这种情况并不常见, JS对象转成JQ对象再转成JS....(似乎没什么意义)</span></div></pre></td></tr></table></figure>
<h4 id="操作JQuery对象"><a href="#操作JQuery对象" class="headerlink" title="操作JQuery对象"></a>操作JQuery对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">  * HTML代码/文本/值:</div><div class="line">  		$(<span class="string">"选择器"</span>).html();			--&gt;获取内容体;</div><div class="line">       $(<span class="string">"选择器"</span>).html(<span class="string">"文本/标签"</span>);	--&gt;设置内容体;</div><div class="line">       $(<span class="string">"选择器"</span>).text();		--&gt;获取文本;</div><div class="line">       $(<span class="string">"选择器"</span>).text(<span class="string">"文本"</span>);	--&gt;设置文本;</div><div class="line">       $(<span class="string">"选择器"</span>).val();		--&gt;获取value值;</div><div class="line">       $(<span class="string">"选择器"</span>).val(<span class="string">"新值"</span>);		--&gt;设置value值;</div><div class="line">  * 属性:</div><div class="line">       $(<span class="string">"选择器"</span>).prop(<span class="string">"属性名"</span>);         --&gt;获取属性值;</div><div class="line">       $(<span class="string">"选择器"</span>).prop(<span class="string">"属性名"</span>,<span class="string">"属性值"</span>); --&gt;设置属性;</div><div class="line">  * CSS类:</div><div class="line">       $(<span class="string">"选择器"</span>).css(<span class="string">"属性名"</span>)          --&gt;获取指定css样式;</div><div class="line">       $(<span class="string">"选择器"</span>).css(<span class="string">"属性名"</span>,<span class="string">"属性值"</span>)  --&gt;设置css样式;</div><div class="line">       $(<span class="string">"选择器"</span>).addClass(<span class="string">"class名"</span>);   --&gt;添加新的<span class="string">"样式类"</span>;</div><div class="line">       $(<span class="string">"选择器"</span>).removeClass(<span class="string">"class名"</span>); -&gt;移除指定<span class="string">"样式类"</span>;</div><div class="line">  * 文档操作:</div><div class="line">       内部(子元素):</div><div class="line">           $A.append($B)     --&gt;将$B追加到$A内部后;</div><div class="line">           $A.appendTo($B)   --&gt;将$A追加到$B内部后;($A的$不能去掉,因为appendTo是JQuery方法)</div><div class="line">           $A.prepend($B)    --&gt;将$B添加到$A内部前;</div><div class="line">           $A.prependTo($B)  --&gt;将$A添加到$B内部前;</div><div class="line">       外部(兄弟元素):</div><div class="line">           $A.after($B)        --&gt;将$B添加到$A之后;</div><div class="line">           $A.before($B)       --&gt;将$B添加到$A之前;</div><div class="line">           $A.insertAfter($B)  --&gt;将$A添加到$B之后;</div><div class="line">           $A.insertBefore($B) --&gt;将$A添加到$B之前;</div><div class="line">拓展:</div><div class="line">	prop之前是attr函数,后者由于兼容性问题已废弃</div><div class="line">注意:</div><div class="line"><span class="number">1.</span> prop和.css使用: 设置样式时使用css,因为不是所有的属性都能通过prop改</div><div class="line">	比如,tr中的bgcolor</div><div class="line"><span class="number">2.</span> html()和text()区别:</div><div class="line">	相同点: 二者都可以获取和设置内容体</div><div class="line">	不同点:</div><div class="line">		(<span class="number">1</span>)获取内容体:</div><div class="line">			html() ---&gt; 标签+文本</div><div class="line">			text() ---&gt; 纯文本</div><div class="line">		(<span class="number">2</span>)设置内容体:</div><div class="line">			html(<span class="string">""</span>) -&gt; 如果设置的内容有标签,标签会被浏览器解析</div><div class="line">			text(<span class="string">""</span>) -&gt; 如果设置的内容有标签,标签不会被浏览器解析,被当作普通文本</div><div class="line">	在html中常用html()</div><div class="line">	在xml中常用text()</div><div class="line"><span class="number">3.</span> $A.append($B)举例:</div><div class="line">      $(<span class="string">"#id值"</span>).append(<span class="string">"&lt;option&gt;北京&lt;/option&gt;"</span>);</div><div class="line">      $A.appendTo($B):</div><div class="line">   $(<span class="string">"&lt;option&gt;北京&lt;/option&gt;"</span>).appendTo($(<span class="string">"#id值"</span>));</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">更改样式时,推荐使用css进行更改,因为prop不是什么属性都能更改</div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> v = $(<span class="string">"#t1"</span>);</div><div class="line">		v.prop(<span class="string">"bgcolor"</span>,<span class="string">"red"</span>);<span class="comment">// 这种是改不了的</span></div><div class="line">		v.css(<span class="string">"background-color"</span>,<span class="string">"red"</span>); <span class="comment">//正解</span></div><div class="line">	&#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1px"</span> <span class="attr">cellpadding</span>=<span class="string">"0"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">tr</span> <span class="attr">id</span>=<span class="string">"t1"</span> <span class="attr">bgcolor</span>=<span class="string">"blue"</span> &gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>haha<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">html()和text()使用:</div><div class="line">首先要明白:</div><div class="line">1. 当设置值时,$(选择器).html("")和$(选择器).text("")更改的都是选择器下</div><div class="line">所有内容,而不是text只设置文本值了</div><div class="line">2. 获取值是,html()会获取包括标签在内的所有内容</div><div class="line">   text()只能获取标签内的文本内容</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/jquery-1.11.0.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">			$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="keyword">var</span> v = $(<span class="string">"#d1"</span>);</div><div class="line">				alert(v.html());<span class="comment">//&lt;font color="red"&gt;红&lt;/font&gt;</span></div><div class="line">				alert(v.text());<span class="comment">//红</span></div><div class="line">				v.html(<span class="string">"&lt;font color='blue'&gt;蓝&lt;/font&gt;"</span>);</div><div class="line">				alert(v.html());<span class="comment">//&lt;font color='blue'&gt;蓝&lt;/font&gt;</span></div><div class="line">				alert(v.text());<span class="comment">//蓝</span></div><div class="line">				v.text(<span class="string">"黑"</span>);</div><div class="line">				alert(v.html());<span class="comment">//黑</span></div><div class="line">				alert(v.text());<span class="comment">//黑</span></div><div class="line">				v.text(<span class="string">"&lt;font color='black'&gt;黑&lt;/font&gt;"</span>);</div><div class="line">				<span class="comment">//下面这句,尖括号进行了转义</span></div><div class="line">				alert(v.html());<span class="comment">//&amp;lt;font color='black'&amp;gt;黑&amp;lt;/font&amp;gt;</span></div><div class="line">				alert(v.text());<span class="comment">//&lt;font color='black'&gt;黑&lt;/font&gt;</span></div><div class="line">			&#125;);</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"d1"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span>红<span class="tag">&lt;/<span class="name">font</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">文档操作:</div><div class="line">需求:分别在div前后添加start和end,观察区别</div><div class="line">观察结果得出的结论:</div><div class="line">利用$A.prependTo($B)和$A.appendTo($B)添加时:</div><div class="line">$A必须是JQuery对象,不能直接编写一个标签字符串"<span class="tag">&lt;<span class="name">font</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">font</span>&gt;</span>"</div><div class="line">当然直接编写一个不含标签的字符串,如"abc"就更不行了</div><div class="line">因为prependTo和appendTo函数是JQuery的特有函数,字符串是无法调用的</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/jquery-1.11.0.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">			$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="comment">/*</span></div><div class="line">				 * 添加start</div><div class="line">				 */</div><div class="line">				<span class="comment">//方式1:</span></div><div class="line">				$(<span class="string">"#d1"</span>).prepend(<span class="string">"start1"</span>);<span class="comment">//start1div</span></div><div class="line">				$(<span class="string">"#d1"</span>).prepend(<span class="string">"&lt;font&gt;start2&lt;/font&gt;"</span>);<span class="comment">//start2start1div</span></div><div class="line">				<span class="comment">//方式2:</span></div><div class="line">				$(<span class="string">"start3"</span>).prependTo($(<span class="string">"#d1"</span>));<span class="comment">//并没有任何改变!!!</span></div><div class="line">				$(<span class="string">"&lt;font&gt;start4&lt;/font&gt;"</span>).prependTo($(<span class="string">"#d1"</span>));<span class="comment">//start4start2start1div</span></div><div class="line">				<span class="comment">/*</span></div><div class="line">				 * 添加end</div><div class="line">				 */</div><div class="line">				<span class="comment">//方式1:</span></div><div class="line">				$(<span class="string">"#d1"</span>).append(<span class="string">"end1"</span>);<span class="comment">//divend1</span></div><div class="line">				$(<span class="string">"#d1"</span>).append(<span class="string">"&lt;font&gt;end2&lt;/font&gt;"</span>);<span class="comment">//divend1end2</span></div><div class="line">				<span class="comment">//方式2:</span></div><div class="line">				$(<span class="string">"end3"</span>).appendTo($(<span class="string">"#d1"</span>));<span class="comment">//并没有任何改变!!!</span></div><div class="line">				$(<span class="string">"&lt;font&gt;end4&lt;/font&gt;"</span>).appendTo($(<span class="string">"#d1"</span>));<span class="comment">//divend1end2end4</span></div><div class="line">			&#125;);</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"d1"</span>&gt;</span>div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">JQuery页面加载:</div><div class="line">	方式<span class="number">1</span>:</div><div class="line">	$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">//内容体;</span></div><div class="line">    &#125;)</div><div class="line">	方式<span class="number">2</span>:</div><div class="line">	$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="comment">//内容体;</span></div><div class="line">	&#125;)</div><div class="line">   JS页面加载与JQuery页面加载的比较:</div><div class="line"><span class="number">1.</span> JS页面加载属于属性操作,加载多次,最后面的会覆盖前面的(属性操作的特点)</div><div class="line"><span class="number">2.</span> JQuery页面加载属于函数操作,加载多次,执行多次,因为函数每被调用一次,执行一次</div></pre></td></tr></table></figure>
<h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">   JS中:</div><div class="line">   JS对象.onXXX = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">   JQ中:</div><div class="line">   JQ对象.XXX(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</div><div class="line">* 常用事件:</div><div class="line">       click();        --&gt;点击事件;</div><div class="line">       submit();       --&gt;表单提交事件;</div><div class="line">       focus();        --&gt;聚焦事件;</div><div class="line">       blur();         --&gt;失焦事件;</div><div class="line">       mouseover();    --&gt;鼠标移入事件;</div><div class="line">       mouseout();     --&gt;鼠标移出事件;</div><div class="line">       change();       --&gt;元素值改变事件;</div></pre></td></tr></table></figure>
<h4 id="自实现循环"><a href="#自实现循环" class="headerlink" title="自实现循环"></a>自实现循环</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">取出数组的每一个元素，分别调用<span class="function"><span class="keyword">function</span>，调用时传入索引以及当前元素</span></div><div class="line">方式1:</div><div class="line">	<span class="title">$</span>.<span class="title">each</span>(<span class="params">jQuery数组, function(index,obj</span>)&#123;</div><div class="line">	    <span class="comment">//内容体;</span></div><div class="line">	&#125;)</div><div class="line">方式<span class="number">2</span>:</div><div class="line">	jQuery数组.each(<span class="function"><span class="keyword">function</span>(<span class="params">index,obj</span>)</span>&#123;</div><div class="line">	    <span class="comment">//内容体;</span></div><div class="line">	&#125;)</div><div class="line">举例:</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></div><div class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>];</div><div class="line"><span class="comment">//转换成 JQuery数组</span></div><div class="line"><span class="keyword">var</span> arr2 = $(arr);</div><div class="line"><span class="comment">//循环 --- 取出每一个元素</span></div><div class="line"><span class="comment">//方式1:</span></div><div class="line">$.each(arr2, <span class="function"><span class="keyword">function</span>(<span class="params">p1,p2</span>) </span>&#123;</div><div class="line">	alert(p1 + <span class="string">"  ---- "</span> + p2);</div><div class="line">&#125;);</div><div class="line"><span class="comment">//方式2:</span></div><div class="line">arr2.each(<span class="function"><span class="keyword">function</span>(<span class="params">p1,p2</span>)</span>&#123;</div><div class="line">	alert(p1 + <span class="string">"  ---- "</span> + p2);</div><div class="line">&#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="优化写法"><a href="#优化写法" class="headerlink" title="优化写法"></a>优化写法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">有些循环不需要索引，此时可以在函数中不传参数，直接使用 <span class="keyword">this</span> 代表当前元素</div><div class="line">&lt;script&gt;</div><div class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>];</div><div class="line">	<span class="comment">//转换成 JQuery数组</span></div><div class="line">	<span class="keyword">var</span> arr2 = $(arr);</div><div class="line">	<span class="comment">//循环 --- 取出每一个元素</span></div><div class="line">	<span class="comment">/*arr2.each(function()&#123;</span></div><div class="line">		alert(this);</div><div class="line">	&#125;);*/</div><div class="line">	</div><div class="line">	$.each(arr2, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		alert(<span class="keyword">this</span>);</div><div class="line">	&#125;);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><h4 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  格式:</div><div class="line"><span class="number">1.</span> $(<span class="string">"标签名"</span>) --------&gt; 元素选择器;</div><div class="line">   <span class="number">2.</span> $(<span class="string">"#ID值"</span>) ---------&gt; id选择器;</div><div class="line">   <span class="number">3.</span> $(<span class="string">".class值"</span>) ------&gt; <span class="class"><span class="keyword">class</span>类选择器</span>;</div><div class="line">   <span class="number">4.</span> $(<span class="string">"*"</span>) -------------&gt; 匹配所有;</div></pre></td></tr></table></figure>
<h4 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  格式:</div><div class="line"><span class="number">1.</span> $(<span class="string">"选择器1 选择器2"</span>) --------&gt; 获取<span class="number">1</span>标签下的所有子级和孙子级<span class="number">2</span>标签</div><div class="line"><span class="number">2.</span> $(<span class="string">"选择器1&gt;选择器2"</span>) ------&gt; 获取<span class="number">1</span>标签下的所有子级(不包含孙子级)<span class="number">2</span>标签</div><div class="line"><span class="number">3.</span> $(<span class="string">"选择器1+选择器2"</span>) ------&gt; 获取<span class="number">1</span>标签的同级向下第一个兄弟级<span class="number">2</span>标签</div><div class="line"><span class="number">4.</span> $(<span class="string">"选择器1~选择器2"</span>) ------&gt; 获取<span class="number">1</span>标签的同级向下所有兄弟级<span class="number">2</span>标签</div></pre></td></tr></table></figure>
<h4 id="基本过滤选择器-待整理"><a href="#基本过滤选择器-待整理" class="headerlink" title="基本过滤选择器(待整理)"></a>基本过滤选择器(待整理)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">  格式: (带空格代表子级孙子级,不带空格代表同级)</div><div class="line"><span class="number">1.</span> $(<span class="string">"选择器:first"</span>);  --------&gt; 获取匹配的第一个(同级);</div><div class="line"><span class="number">2.</span> $(<span class="string">"选择器:last"</span>);   --------&gt; 获取匹配的最后一个(同级);</div><div class="line"><span class="number">3.</span> $(<span class="string">"过滤器1 :first"</span>) --------&gt; 获取过滤器<span class="number">1</span>下的第一个子级元素</div><div class="line"><span class="number">4.</span> $(<span class="string">"过滤器1 :last"</span>)  --------&gt; 获取过滤器<span class="number">1</span>下的最后一个子级元素</div><div class="line"><span class="number">5.</span> $(<span class="string">"过滤器1 标签2:even(偶数)/odd(奇数)"</span>) -&gt; 获取过滤器<span class="number">1</span>下所以标签<span class="number">2</span>,取出标签<span class="number">2</span>的奇数或偶数标签<span class="number">2</span></div><div class="line"> 索引从<span class="number">0</span>开始</div><div class="line"><span class="number">6.</span> $(<span class="string">"选择器:not(选择器)"</span>);	--&gt; 去除与给定选择器匹配的;</div><div class="line"><span class="number">7.</span> $(<span class="string">"选择器:eq(index)"</span>);	--&gt; 获取匹配的脚标为指定的;</div><div class="line"><span class="number">8.</span> $(<span class="string">"选择器:gt(index)"</span>);	--&gt; 获取匹配的脚标大于指定的;</div><div class="line"><span class="number">9.</span> $(<span class="string">"选择器:lt(index)"</span>);	--&gt; 获取匹配的脚标小于指定的;</div></pre></td></tr></table></figure>
<h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">  格式: </div><div class="line"><span class="number">1.</span> $(<span class="string">"选择器[属性名]"</span>) --------&gt; 获取所有属性名属性的标签	</div><div class="line"><span class="number">2.</span> $(<span class="string">"选择器[属性名 = '值']"</span>) --------&gt; 获取所有属性名等于某值的标签</div><div class="line"><span class="number">3.</span> $(<span class="string">"选择器[属性名 != '值']"</span>) -------&gt; 获取所有属性名不等于某值的标签</div><div class="line"><span class="number">4.</span> $(<span class="string">"选择器[属性名 ^= '值']"</span>) -------&gt; 获取属性值以指定值开头的;</div><div class="line"><span class="number">5.</span> $(<span class="string">"选择器[属性名 $= '值']"</span>) -------&gt; 获取属性值以指定值结尾的;</div><div class="line"><span class="number">6.</span> $(<span class="string">"选择器[属性名 *= '值']"</span>) -------&gt; 获取属性值包含指定值的;</div><div class="line"><span class="number">7.</span> $(<span class="string">"选择器[属性名1 = '值'][属性名2 = '值']"</span>) --------&gt; 复合条件</div></pre></td></tr></table></figure>
<h4 id="表单属性选择器-重点"><a href="#表单属性选择器-重点" class="headerlink" title="表单属性选择器(重点)"></a>表单属性选择器(重点)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">  格式: </div><div class="line"><span class="number">1.</span> $(<span class="string">"input:enabled"</span>) --------&gt; 获取所有可用的input标签的表单输入项</div><div class="line"><span class="number">2.</span> $(<span class="string">"input:disabled"</span>) -------&gt; 获取所有不可用的input标签的表单输入项</div><div class="line"><span class="number">3.</span> $(<span class="string">"input:checked"</span>) --------&gt; 获取所有被选定的复选框</div><div class="line"><span class="number">4.</span> $(<span class="string">"#selected的id值 option:selected"</span>) ---&gt; 获取所有下拉列表中被选定的项</div><div class="line">  拓展:</div><div class="line"> 实现相同的效果,不一定使用一样的选择器</div></pre></td></tr></table></figure>
<h3 id="JQuery内置的显示与隐藏"><a href="#JQuery内置的显示与隐藏" class="headerlink" title="JQuery内置的显示与隐藏"></a>JQuery内置的显示与隐藏</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">* 基本实现:</div><div class="line">	<span class="number">1.</span> 显示</div><div class="line">		<span class="number">1.</span> show(): 直接显示</div><div class="line">		<span class="number">2.</span> show(毫秒值): 在指定时间内慢慢显示</div><div class="line">		<span class="number">3.</span> show(毫秒值,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;): 显示完毕后,调用函数</div><div class="line">	<span class="number">2.</span> 隐藏 </div><div class="line">		<span class="number">1.</span> hide(): 直接隐藏</div><div class="line">		<span class="number">2.</span> hide(毫秒值): 在指定时间内慢慢隐藏</div><div class="line">		<span class="number">3.</span> hide(毫秒值,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;): 隐藏完毕后,调用函数</div><div class="line">	<span class="number">3.</span> 切换</div><div class="line">		<span class="number">1.</span> toggle(): 根据当前显示/隐藏状况,进行切换</div><div class="line">		<span class="number">2.</span> toggle(毫秒值)</div><div class="line">* 滑动实现</div><div class="line">	<span class="number">1.</span> 显示</div><div class="line">		<span class="number">1.</span> slideDown()</div><div class="line">		<span class="number">2.</span> slideDown(毫秒值)</div><div class="line">	<span class="number">2.</span> 隐藏</div><div class="line">		<span class="number">1.</span> slideUp()</div><div class="line">		<span class="number">2.</span> slideUp(毫秒值)</div><div class="line">* 淡入淡出</div><div class="line">	<span class="number">1.</span> 显示</div><div class="line">		<span class="number">1.</span> fadeIn()</div><div class="line">		<span class="number">2.</span> fadeIn(毫秒值)</div><div class="line">	<span class="number">2.</span> 隐藏</div><div class="line">		<span class="number">1.</span> fadeOut()</div><div class="line">		<span class="number">2.</span> fadeOut(毫秒值)</div><div class="line">	<span class="number">3.</span> 切换</div><div class="line">		<span class="number">1.</span> fadeToggle()</div><div class="line">		<span class="number">2.</span> fadeToggle(毫秒值)</div></pre></td></tr></table></figure>
<h3 id="validate"><a href="#validate" class="headerlink" title="validate"></a>validate</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><pre><code>1. 一个校验框架,对表单校验的一个封装,是一个第三方实现,并且是JQuery的一个插件
    使用前提:
        1. 导入JQuery
        2. 导入validation相关实现
2. 下载validation相关实现
3. 环境搭建
    1. 引入jquery.validate.js文件
    2. 在当前html中导入该文件
4. 表单校验两要素:
    1. 校验规则rules
    2. 提示信息messages
validation使用: 
    1. 参考validation资料中的demo文件夹
</code></pre><h4 id="validation语法"><a href="#validation语法" class="headerlink" title="validation语法"></a>validation语法</h4><pre><code>jquery表单对象.validate({
        // 规则
        rules:{
            字段名(name值):{
                校验器:取值,
                校验器:取值
            },
            字段名(name值):{
                校验器:取值,
                校验器:取值
            }
        },
        // 提示信息
        messages:{
            字段名(name值):{
                校验器:&apos;提示信息(自定义)&apos;,
                校验器:&apos;提示信息(自定义)&apos;
            },
            字段名(name值):{
                校验器:&apos;提示信息(自定义)&apos;,
                校验器:&apos;提示信息(自定义)&apos;
            }
        }
    })

    &lt;!-- 指定提示信息显示位置
        class=&apos;error&apos;   固定;
        for=&apos;&apos;          绑定字段名(name值);
     --&gt;
    &lt;label for=&quot;gender&quot; class=&quot;error&quot;&gt;&lt;/label&gt;
</code></pre><h4 id="校验规则"><a href="#校验规则" class="headerlink" title="校验规则"></a>校验规则</h4><pre><code>这些校验规则是 validation 内置好的，我们按照语法规范调用这些校验类型即可
 *   A、required ---- 必填 ----- true | false
 *   B、rangelength - 长度 ----- [最小长度,最大长度]
 *   C、eamil ------- 邮箱 ----- true |　false
 *   D、date -------- 日期 ----- true | false
 *              日期以后一般使用下拉列表选择
 *   E、number ------ 数字 ----- true | false
 *   F、min(max) ---- 最小(大)值- 具体数字
 *   G、range ------- 数字取值 --- [最小值,最大值]
 *   H、euqalTo ----- 内容是否一样- JQuery选择器
</code></pre><h4 id="错误提示信息"><a href="#错误提示信息" class="headerlink" title="错误提示信息"></a>错误提示信息</h4><pre><code>1. 错误提示好多都是通用的,validation中已经内置了一些现成的错误提示
2. 如果不想自己编写错误提示的话,可以使用默认的,直接不编写 messages 部分
3. 但是不建议使用默认的,因为自定义的描述性更强
</code></pre><h4 id="自定义校验器"><a href="#自定义校验器" class="headerlink" title="自定义校验器"></a>自定义校验器</h4><pre><code>$.validator.addMethod(name, method, messages);
   name:校验器名称;
   method:校验处理函数
       function(value, element, params){
           value:被校验的表单项的value值;
           element:被校验的表单项对象;
           params:规则参数;

           方法体: 校验实现,返货true代表通过,false代表不符合规则
       }
   messages:错误提示信息;    
</code></pre><h4 id="改变提示信息的样式"><a href="#改变提示信息的样式" class="headerlink" title="改变提示信息的样式"></a>改变提示信息的样式</h4><pre><code>查原码可知,validate会将错误信息放在一个label中,样式为&quot;error&quot;,故这里定义一个同名的样式类:
    &lt;style type=&quot;text/css&quot;&gt;
        .error {
            color: red;
        }
    &lt;/style&gt;
</code></pre><h4 id="国际化-语言包"><a href="#国际化-语言包" class="headerlink" title="国际化(语言包)"></a>国际化(语言包)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(i18n)程序不变,在不同地区显示其本地的语言;</div><div class="line">* 国际化怎么实现？</div><div class="line">	1. 程序主体</div><div class="line">	2. 程序集成语言包</div><div class="line">* validation 中的国际化</div><div class="line">	* dist 内置不同的语言包,当前项目引入该语言包</div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/messages_zh.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="定时广告"><a href="#定时广告" class="headerlink" title="定时广告"></a>定时广告</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/jquery-1.11.0.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> gg = $(<span class="string">"#gg"</span>);</div><div class="line">		<span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="comment">//gg.css("display","block");</span></div><div class="line">			gg.slideDown(<span class="number">2000</span>);</div><div class="line">			<span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="comment">//gg.css("display","none");</span></div><div class="line">				gg.slideUp(<span class="number">2000</span>);</div><div class="line">			&#125;,<span class="number">3000</span>);</div><div class="line">			</div><div class="line">		&#125;,<span class="number">1000</span>);</div><div class="line">	&#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"gg"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../img/image/3.jpg"</span> <span class="attr">width</span>=<span class="string">"100%"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="隔行换色"><a href="#隔行换色" class="headerlink" title="隔行换色"></a>隔行换色</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">	.jishu &#123;</div><div class="line">		background-color: #13777E;</div><div class="line">	&#125;</div><div class="line">	.oushu &#123;</div><div class="line">		background-color: red;</div><div class="line">	&#125;</div><div class="line">	.pink&#123;</div><div class="line">		background-color: pink;</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/jquery-1.11.0.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="comment">//var trs = $("tr[id != 'header']");</span></div><div class="line">		<span class="keyword">var</span> jishu = $(<span class="string">"tr[id != 'header']:odd"</span>);</div><div class="line">		<span class="comment">//alert(jishu.length);</span></div><div class="line">		jishu.prop(<span class="string">"class"</span>,<span class="string">"jishu"</span>);</div><div class="line">		<span class="keyword">var</span> oushu = $(<span class="string">"tr[id != 'header']:even"</span>);</div><div class="line">		oushu.prop(<span class="string">"class"</span>,<span class="string">"oushu"</span>);</div><div class="line">		</div><div class="line">		<span class="keyword">var</span> temp;</div><div class="line">		$(<span class="string">"tr[id != 'header']"</span>).mouseover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			temp = $(<span class="keyword">this</span>).prop(<span class="string">"class"</span>);</div><div class="line">			$(<span class="keyword">this</span>).prop(<span class="string">"class"</span>,<span class="string">"pink"</span>);</div><div class="line">		&#125;);</div><div class="line">		$(<span class="string">"tr[id != 'header']"</span>).mouseout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			$(<span class="keyword">this</span>).prop(<span class="string">"class"</span>,temp);</div><div class="line">		&#125;);</div><div class="line">	&#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">cellpadding</span>=<span class="string">"0"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"80%"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">tr</span> <span class="attr">id</span>=<span class="string">"header"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">th</span>&gt;</span>商品名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">th</span>&gt;</span>商品描述<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"itemSelect"</span> /&gt;</span>		</div><div class="line">		<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>手机数码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>手机数码商品信息<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">tr</span> &gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"itemSelect"</span> /&gt;</span>		</div><div class="line">		<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>电脑办公<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>电脑办公商品信息<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"itemSelect"</span> /&gt;</span>		</div><div class="line">		<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>鞋靴箱包<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>鞋靴箱包商品信息<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"itemSelect"</span> /&gt;</span>		</div><div class="line">		<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>家居饰品<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>家居饰品商品信息<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="复选框全选-反选"><a href="#复选框全选-反选" class="headerlink" title="复选框全选/反选"></a>复选框全选/反选</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">反选时,常规思路是</div><div class="line">	1. 取当前checkbox数组的选定状态</div><div class="line">		var b = $(".itemSelect").prop("checked");</div><div class="line">	2. 设置反值</div><div class="line">		$(".itemSelect").prop("checked",!b);</div><div class="line">但这样是错误的.当前结果是所有复选框取第一个复选框的反值,因为:</div><div class="line"> 	1. 获取数组的属性值时，没有循环，获取的是第一个元素的值</div><div class="line">	2. 设置时，每一个元素根据第一个元素的值取反</div><div class="line"></div><div class="line">我们需要知道的是:</div><div class="line">数组.prop("属性","值") 设置时,底层封装了一个循环,遍历数组的每一个元素分别设置prop的值</div><div class="line">但是呢? </div><div class="line">并不是所有的属性底层都封装了一个循环,隔行换色案例中的class封装了,本例中的checked就没有封装循环.</div><div class="line"></div><div class="line">所以解决方案是: 自实现循环</div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		$(<span class="string">"#all"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			$(<span class="string">".itemSelect"</span>).prop(<span class="string">"checked"</span>,<span class="literal">true</span>);</div><div class="line">		&#125;);</div><div class="line">		$(<span class="string">"#none"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			$(<span class="string">".itemSelect"</span>).prop(<span class="string">"checked"</span>,<span class="literal">false</span>);</div><div class="line">		&#125;);</div><div class="line">		$(<span class="string">"#fan"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="comment">/*	</span></div><div class="line">			错误写法:</div><div class="line">			var b = $(".itemSelect").prop("checked");</div><div class="line">			$(".itemSelect").prop("checked",!b);</div><div class="line">		*/</div><div class="line">		<span class="comment">/*	</span></div><div class="line">			自定义循环写法1:</div><div class="line">			//1、获取所有的复选框</div><div class="line">			$(".itemSelect").each(function()&#123;</div><div class="line">				//获取当前复选框的状态</div><div class="line">				var b = $(this).prop("checked");</div><div class="line">				//取反值</div><div class="line">				$(this).prop("checked",!b);</div><div class="line">			&#125;);</div><div class="line">		*/</div><div class="line">			自定义循环写法<span class="number">2</span>:</div><div class="line">			$.each($(<span class="string">".itemSelect"</span>), <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				<span class="keyword">var</span> b = $(<span class="keyword">this</span>).prop(<span class="string">"checked"</span>);</div><div class="line">				$(<span class="keyword">this</span>).prop(<span class="string">"checked"</span>,!b);</div><div class="line">			&#125;);</div><div class="line">		&#125;);</div><div class="line">	&#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="表单校验"><a href="#表单校验" class="headerlink" title="表单校验"></a>表单校验</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div></pre></td><td class="code"><pre><div class="line">	表单校验需求:</div><div class="line">		错误提示信息为红色</div><div class="line">		错误提示显示在输入项下面</div><div class="line">		自定义校验类型,用户名不能包含敏感词汇</div><div class="line">	* 首先要知道validation是如何显示错误提示的</div><div class="line">		1. 在输入项后面内置了一个标签,显示提示信息</div><div class="line">			<span class="tag">&lt;<span class="name">label</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"error"</span> <span class="attr">for</span>=<span class="string">"name值"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">		2. 修改为红色,可以设置 CSS 属性</div><div class="line">			所有的错误提示有相同的标签和相同的class---error</div><div class="line">		3. 可以自定义错误出现的位置</div><div class="line">			默认位置 ---- 紧跟当前 input</div><div class="line">			<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"error"</span> <span class="attr">for</span>=<span class="string">"name值"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span> 或</div><div class="line">			<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"error"</span> <span class="attr">for</span>=<span class="string">"id值"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			注意上面这两种形式:如果<span class="tag">&lt;<span class="name">input</span>&gt;</span>标签内设置id了,只能使用for="id值"</div><div class="line">			如果只设置了name值,可以使用for="name值"</div><div class="line">			自定义的label标签，位置可以随意存储</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">			/*label &#123;</div><div class="line">				color: red;</div><div class="line">			&#125;*/</div><div class="line">			.error &#123;</div><div class="line">				color: red;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/jquery-1.11.0.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/jquery.validate.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		$.validator.addMethod("my",function(v)&#123;</div><div class="line">				/*</div><div class="line">				 * 如果包含 具体的数字 &gt;= 0  false ----- 非法</div><div class="line">				 * 如果不包含 -1		 ------ true ----- 合法</div><div class="line">				 * </div><div class="line">				 */</div><div class="line">				return v.indexOf("falungong") == -1;</div><div class="line">			&#125;,"不能包含政治敏感词");</div><div class="line">			$(function()&#123;</div><div class="line">				$("#f1").validate(&#123;</div><div class="line">					rules:&#123;</div><div class="line">						username:&#123;</div><div class="line">							required:true,</div><div class="line">							rangelength:[6,10],</div><div class="line">							my:true</div><div class="line">						&#125;,</div><div class="line">						email:&#123;</div><div class="line">							required:true,</div><div class="line">							email:true</div><div class="line">						&#125;,</div><div class="line">						birthday:&#123;</div><div class="line">							date:true</div><div class="line">						&#125;,</div><div class="line">						sal:&#123;</div><div class="line">							number:true,</div><div class="line">							min:1600</div><div class="line">						&#125;,</div><div class="line">						workForday:&#123;</div><div class="line">							range:[6,16]</div><div class="line">						&#125;,</div><div class="line">						pwd:&#123;</div><div class="line">							required:true</div><div class="line">						&#125;,</div><div class="line">						repwd:&#123;</div><div class="line">							required:true,</div><div class="line">							equalTo:"input[name='pwd']"</div><div class="line">						&#125;</div><div class="line">					&#125;,</div><div class="line">					//提示信息部分</div><div class="line">					messages:&#123;</div><div class="line">						username:&#123;</div><div class="line">							required:"账号必须填写",</div><div class="line">							rangelength:"长度必须在6-10个字符之间"</div><div class="line">						&#125;,</div><div class="line">						email:&#123;</div><div class="line">							required:"邮箱必填",</div><div class="line">							email:"邮箱不符合规则"</div><div class="line">						&#125;,</div><div class="line">						birthday:&#123;</div><div class="line">							date:"日期格式不对"</div><div class="line">						&#125;,</div><div class="line">						sal:&#123;</div><div class="line">							number:"必须是数字",</div><div class="line">							min:"至少1600块"</div><div class="line">						&#125;,</div><div class="line">						workForday:&#123;</div><div class="line">							range:"一天工作时长必须在6-16个小时之间"</div><div class="line">						&#125;,</div><div class="line">						pwd:&#123;</div><div class="line">							required:"密码必填"</div><div class="line">						&#125;,</div><div class="line">						repwd:&#123;</div><div class="line">							required:"必须填写确认密码",</div><div class="line">							equalTo:"两次密码不一致"</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">				&#125;);</div><div class="line">			&#125;);</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"f1"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">cellpadding</span>=<span class="string">"0"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"cornflowerblue"</span> <span class="attr">size</span>=<span class="string">"5"</span>&gt;</span>测试表单<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名（必填字段，长度范围6~10）<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>  /&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">id</span>=<span class="string">"unmsg"</span> <span class="attr">class</span>=<span class="string">"error"</span> <span class="attr">for</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>Email（符合邮件格式）<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"email"</span> /&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>出生日期（日期格式）<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"birthday"</span> /&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>薪资（数字）<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"sal"</span> /&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>一天工作时长（值范围6~16）<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"workForday"</span> /&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>密码（必须填写）<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"pwd"</span> /&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>确认密码（必须填写，且与密码值要相同）<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"repwd"</span> /&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span> /&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="省市联动"><a href="#省市联动" class="headerlink" title="省市联动"></a>省市联动</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/jquery-1.11.0.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="comment">// 定义二维数组,存储城市信息</span></div><div class="line">			<span class="keyword">var</span> cities = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">			cities[<span class="number">0</span>] = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"海淀"</span>,<span class="string">"昌平"</span>);</div><div class="line">			cities[<span class="number">1</span>] = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"长春市"</span>,<span class="string">"吉林市"</span>,<span class="string">"松原市"</span>,<span class="string">"延边市"</span>);</div><div class="line">			cities[<span class="number">2</span>] = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"济南市"</span>,<span class="string">"青岛市"</span>,<span class="string">"烟台市"</span>,<span class="string">"潍坊市"</span>,<span class="string">"淄博市"</span>);</div><div class="line">			cities[<span class="number">3</span>] = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"石家庄市"</span>,<span class="string">"唐山市"</span>,<span class="string">"邯郸市"</span>,<span class="string">"廊坊市"</span>);</div><div class="line">			cities[<span class="number">4</span>] = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"南京市"</span>,<span class="string">"苏州市"</span>,<span class="string">"扬州市"</span>,<span class="string">"无锡市"</span>);</div><div class="line"></div><div class="line">			<span class="comment">//方式1:</span></div><div class="line">			<span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params">node</span>)</span>&#123;</div><div class="line">				<span class="comment">//node拿到的是当前选中的option对象</span></div><div class="line">				<span class="keyword">var</span> cs = cities[$(node).val()]</div><div class="line">				<span class="keyword">var</span> $s2 = $(<span class="string">"#city"</span>);</div><div class="line">				$s2.html(<span class="string">"&lt;option value=''&gt;----请-选-择-市----&lt;/option&gt;"</span>);</div><div class="line">				$.each(cs,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">					<span class="keyword">var</span> opt = <span class="string">"&lt;option&gt;"</span>+<span class="keyword">this</span>+<span class="string">"&lt;/option&gt;"</span>;</div><div class="line">					$s2.html($s2.html() + opt);</div><div class="line">				&#125;);</div><div class="line">			&#125;</div><div class="line">			<span class="comment">//方式2:(优化)</span></div><div class="line">			<span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params">node</span>)</span>&#123;</div><div class="line">				<span class="keyword">var</span> cs = cities[$(node).val()];</div><div class="line">				<span class="keyword">var</span> $s2 = $(<span class="string">"#city"</span>);</div><div class="line">				$s2.html(<span class="string">"&lt;option value=''&gt;----请-选-择-市----&lt;/option&gt;"</span>);</div><div class="line">				$.each(cs,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">					<span class="keyword">var</span> opt = <span class="string">"&lt;option&gt;"</span>+<span class="keyword">this</span>+<span class="string">"&lt;/option&gt;"</span>;</div><div class="line">					<span class="comment">//$s2.append(opt);</span></div><div class="line">					$(opt).appendTo($s2);</div><div class="line">				&#125;);</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"province"</span> <span class="attr">style</span>=<span class="string">"width:150px"</span> <span class="attr">onchange</span>=<span class="string">"run(this)"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>----请-选-择-省----<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>吉林省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>山东省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>河北省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"4"</span>&gt;</span>江苏省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"city"</span> <span class="attr">style</span>=<span class="string">"width:150px"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>----请-选-择-市----<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="左右选择"><a href="#左右选择" class="headerlink" title="左右选择"></a>左右选择</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/jquery-1.11.0.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">			$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				$s1 = $(<span class="string">"#leftSelectId"</span>);</div><div class="line">				$s2 = $(<span class="string">"#rightSelectId"</span>);</div><div class="line">				$btn1 = $(<span class="string">"#leftToRightSimple"</span>);</div><div class="line">				$btn1.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">					<span class="comment">//错误写法:(一定注意这种)</span></div><div class="line">					<span class="comment">//$leftSelected = $("$s1 option:selected");</span></div><div class="line">					$leftSelected = $(<span class="string">"#leftSelectId option:selected"</span>);</div><div class="line">					<span class="comment">//方式1:</span></div><div class="line">					$.each($leftSelected, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">						$s2.append(<span class="keyword">this</span>);</div><div class="line">					&#125;);</div><div class="line">					<span class="comment">//方式2:</span></div><div class="line">					<span class="comment">//$s2.append($leftSelected);</span></div><div class="line">					<span class="comment">//注意:如果移动到右边时,左边不想删除,要这样写:</span></div><div class="line">					<span class="comment">//$s2.append($leftSelected).clone();</span></div><div class="line">				&#125;);</div><div class="line">				</div><div class="line">				$btn2 = $(<span class="string">"#leftToRight"</span>);</div><div class="line">				$btn2.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">					$leftall = $(<span class="string">"#leftSelectId option"</span>);</div><div class="line">					$s2.append($leftall);</div><div class="line">				&#125;);</div><div class="line">				</div><div class="line">				$btn3 = $(<span class="string">"#rightToLeftSimple"</span>);</div><div class="line">				$btn3.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">					$rightSelected = $(<span class="string">"#rightSelectId option:selected"</span>);</div><div class="line">					$s1.append($rightSelected);</div><div class="line">				&#125;);</div><div class="line">				</div><div class="line">				$btn4 = $(<span class="string">"#rightToLeft"</span>);</div><div class="line">				$btn4.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">					$rightall = $(<span class="string">"#rightSelectId option"</span>);</div><div class="line">					$s1.append($rightall);</div><div class="line">				&#125;);</div><div class="line">			&#125;);</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"leftSelectId"</span> <span class="attr">multiple</span>=<span class="string">"multiple"</span> <span class="attr">style</span>=<span class="string">"width: 100px;height: 200px;"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span>&gt;</span>左1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span>&gt;</span>左2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span>&gt;</span>左3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span>&gt;</span>左4<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span>&gt;</span>左5<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"》"</span> <span class="attr">id</span>=<span class="string">"leftToRightSimple"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"》》"</span> <span class="attr">id</span>=<span class="string">"leftToRight"</span>  /&gt;</span></div><div class="line">		&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"《"</span>   <span class="attr">id</span>=<span class="string">"rightToLeftSimple"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"《《"</span>   <span class="attr">id</span>=<span class="string">"rightToLeft"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"rightSelectId"</span> <span class="attr">multiple</span>=<span class="string">"multiple"</span> <span class="attr">style</span>=<span class="string">"width: 100px;height: 200px;"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span>&gt;</span>右1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span>&gt;</span>右2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span>&gt;</span>右3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span>&gt;</span>右4<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span>&gt;</span>右5<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></div><div class="line">		</div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;核心理念: write less,do more 
作用: 动态地修改内存中的html或css代码
1. JQuery是一个JavaScript框架,是对JS的封装,将一些常见的JS操作进行了封装,提高开发效率
    JQuery与JS的区别:类似与commons-io与JDK内置IO的关系
2. 兼容CSS3
3. 相对于JS,能更好地兼容浏览器(并没有完全兼容)
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="https://geekhoon.github.io/categories/JavaWeb/"/>
    
    
      <category term="前端开发" scheme="https://geekhoon.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript</title>
    <link href="https://geekhoon.github.io/2017/03/21/JavaWeb-02-JavaScript/"/>
    <id>https://geekhoon.github.io/2017/03/21/JavaWeb-02-JavaScript/</id>
    <published>2017-03-21T10:12:43.000Z</published>
    <updated>2017-04-02T02:01:36.929Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><pre><code>* 概念: 
    * 是基于对象和事件驱动的脚本语言, 用于开发交互式web页面
    * 解释型语言,不需要进行编译,由浏览器执行
* 作用:
    * 动态的修改内存中的html和css
</code></pre><a id="more"></a>    
<pre><code>* 组成部分:
    1. 基本语法部分 ---&gt; ECMAScript ---&gt; 规范了JS使用基本语法
    2. 浏览器对象 -----&gt; BOM ----------&gt; Browser Object Model
        (浏览器内置对象)
    3. 文档对象 -------&gt; DOM ----------&gt; Document Object Model
        (HTML文档以及文档的每一个标签,都被JS当作对象)
* 学习路线:
    1. 基本语法
        (1)变量
            运算符
            流程控制
        (2)方法
    2. 面向对象
        (3)获取对象(和Java不同,Java对象大多数要自己创建,JS是获取内置好的对象)
        (4)操作对象
</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">使用:</div><div class="line">	<span class="number">1.</span>内部脚本:</div><div class="line">	    <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></span></div><div class="line">	        <span class="comment">/**</span></div><div class="line">	         * js脚本;</div><div class="line">	         */</div><div class="line">	    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="number">2.</span>外部脚本:</div><div class="line">	    <span class="number">1</span>)编写*.js文件,内部编写脚本;</div><div class="line">	        first.js:</div><div class="line">	            <span class="comment">/**</span></div><div class="line">	             * js脚本;</div><div class="line">	             */</div><div class="line">	</div><div class="line">	    <span class="number">2</span>)在*.html中引入脚本文件;</div><div class="line">	        *.html:</div><div class="line">	            <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/first.js"</span>&gt;</span><span class="javascript"></span></span></div><div class="line">	                <span class="comment">/**</span></div><div class="line">	                 * 这里不能在写js脚本;</div><div class="line">	                 */</div><div class="line">	            <span class="tag">&lt;/<span class="name">script</span>&gt;</span>&gt;</div><div class="line">	注意:</div><div class="line">		(<span class="number">1</span>)外部JS文件一般存储在JS目录中</div><div class="line">		(<span class="number">2</span>)方案二引入的外部JS文件时,<span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">标签中不能再编写其他JS代码</span></span></div></pre></td></tr></table></figure>
<h3 id="ECMAScript-基本语法"><a href="#ECMAScript-基本语法" class="headerlink" title="(ECMAScript)基本语法"></a>(ECMAScript)基本语法</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><pre><code>1.声明格式: 
    var 变量名;      --&gt;js变量可以不声明,直接使用,默认值:undefined;
    var 变量名 = 值; --&gt;js变量是弱类型,即同一个变量可以存放不同类型的数据;
    var在JS中是一个关键字,代表变量    
2.变量命名规则:
    1)必须以字母或下划线开头,中间可是数字,字母或下划线或$;
    2)变量名不能包含空格等符号;
    3)不能使用能够Js关键字作为变量名;
    4)js严格区分大小写;
3.变量值可以是任意类型,并且可以被重复赋其他类型的值
</code></pre><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><pre><code>分类: 
    基本类型:
        1. number数字类型 ---&gt; 整型,浮点
        2. boolean布尔类型 ---&gt; true,false
        3. string字符串类型 -&gt; &quot;&quot; 或 &apos;&apos; 包裹
        4. null --&gt; 空类型
        5. undefined -&gt; 未定义,null的衍生,变量只声明不赋值时,就是undefined
            undefinerd == null :结果是true
    引用类型: 
        Object
拓展:
    (1)NaN ---&gt; not a number :JS中非数字运算得出的结果
    (2)typeof(变量) ---&gt; 返回当前变量的数据类型
</code></pre><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><pre><code>JS特殊运算符:
    == : 比较值而不比较数据类型
    ===: 既比较值也比较数据类型
</code></pre><h4 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h4><pre><code>在判断语句中,JS会将相关数据类型转成对应的boolean值,和Java不同
</code></pre><p><img src="http://oj3s07yy0.bkt.clouddn.com/blog/20170320/165450398.png" alt=""><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)&#123;</div><div class="line">	<span class="built_in">window</span>.alert(i);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(<span class="number">1</span>)&#123;</div><div class="line">	<span class="built_in">window</span>.alert(<span class="string">"true"</span>);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">	<span class="built_in">window</span>.alert(<span class="string">"false"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span>概念</div><div class="line">	Java --- method --- 方法</div><div class="line">  	Js ----- <span class="function"><span class="keyword">function</span> - 函数</span></div><div class="line">2.函数声明</div><div class="line">	普通函数:</div><div class="line">           <span class="title">function</span> 函数名(<span class="params">参数名即可</span>)&#123;</div><div class="line">               <span class="comment">// 函数体;</span></div><div class="line">           &#125;</div><div class="line">		举例: </div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">num1,num2</span>)</span>&#123;</div><div class="line">			<span class="keyword">return</span> num1 + num2;</div><div class="line">		&#125;</div><div class="line">       匿名函数:</div><div class="line">           <span class="keyword">var</span> 函数名 = <span class="function"><span class="keyword">function</span>(<span class="params">参数名即可</span>)</span>&#123;</div><div class="line">               <span class="comment">// 函数体;</span></div><div class="line">           &#125;</div><div class="line"><span class="number">3.</span>调用</div><div class="line">	<span class="keyword">var</span> result = getSum(<span class="number">1</span>,<span class="number">2</span>);  --- 标准调用</div><div class="line">	特殊:JS调用函数,可以传入与函数声明不一致的参数列表,如:</div><div class="line">		<span class="keyword">var</span> result = getSum(<span class="number">1</span>); <span class="comment">//result值为NaN</span></div><div class="line"><span class="number">4.</span>注意</div><div class="line">	(<span class="number">1</span>)JS没有重载的概念</div><div class="line">	(<span class="number">2</span>)JS中只依赖于函数名调用,不考虑参数列表,如果函数名相同,后面的会覆盖前面的</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">num1,num2</span>)</span>&#123;</div><div class="line">		<span class="built_in">window</span>.alert(<span class="string">"get1"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">num1</span>)</span>&#123;</div><div class="line">		<span class="built_in">window</span>.alert(<span class="string">"get2"</span>);</div><div class="line">	&#125;</div><div class="line">	get(<span class="number">1</span>,<span class="number">2</span>); <span class="comment">//打印的是get2</span></div></pre></td></tr></table></figure>
<h3 id="BOM对象-浏览器对象模型"><a href="#BOM对象-浏览器对象模型" class="headerlink" title="BOM对象(浏览器对象模型)"></a>BOM对象(浏览器对象模型)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">概述: 	</div><div class="line">	* JS是基于对象的,对象不是自己<span class="keyword">new</span>的,而是获取第三方内置的对象,来使用</div><div class="line">	* 浏览器内置的对象就是BOM对象</div><div class="line">常用对象</div><div class="line">	<span class="number">1.</span> <span class="built_in">window</span>对象 --- 当前浏览器内置的对象</div><div class="line">		* alert(<span class="string">"信息"</span>) --&gt;警告框;</div><div class="line">		* confirm(<span class="string">"信息"</span>)   --&gt;确认框(确认返回<span class="literal">true</span>,取消返回<span class="literal">false</span>);</div><div class="line">			<span class="keyword">var</span> flag = confirm(<span class="string">""</span>);</div><div class="line">		*  prompt(<span class="string">"信息"</span>)    --&gt;输入框(确认返回输入的数据,取消返回<span class="literal">false</span>);</div><div class="line">			<span class="keyword">var</span> txt = prompt(<span class="string">""</span>);</div><div class="line">		凡是<span class="built_in">window</span>对象的方法,都可以不加<span class="built_in">window</span>前缀</div><div class="line">	<span class="number">2.</span> <span class="built_in">window</span>计时器--两种:往复性计时器和一次性计时器</div><div class="line">		底层： 为计时器开启一个线程，线程中隔一会调用一次函数</div><div class="line">	(<span class="number">1</span>)setInterval(code(代码),millisec(毫秒))  </div><div class="line">			--&gt;循环定时器(这个方法会返回一个id值,是当前定时器的标识);</div><div class="line">           <span class="number">1</span>):</div><div class="line">               <span class="function"><span class="keyword">function</span> <span class="title">fun01</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                   <span class="comment">/**</span></div><div class="line">                    * 内容;</div><div class="line">                    */</div><div class="line">               &#125;</div><div class="line">               <span class="built_in">window</span>.setInterval(fun01, <span class="number">2000</span>);</div><div class="line">           <span class="number">2</span>):</div><div class="line">               <span class="function"><span class="keyword">function</span> <span class="title">fun01</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                   <span class="comment">/**</span></div><div class="line">                    * 内容;</div><div class="line">                    */</div><div class="line">               &#125;</div><div class="line">               <span class="built_in">window</span>.setInterval(<span class="string">"fun01()"</span>, <span class="number">2000</span>);</div><div class="line">           <span class="number">3</span>):</div><div class="line">               <span class="built_in">window</span>.setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                   <span class="comment">/**</span></div><div class="line">                    * 内容;</div><div class="line">                    */</div><div class="line">               &#125;, <span class="number">2000</span>);</div><div class="line">        clearInterval(id)    --&gt;取消定时器;</div><div class="line">		举例:</div><div class="line">			<span class="keyword">var</span> id = <span class="built_in">window</span>.setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				alert(<span class="string">"----"</span>);</div><div class="line">			&#125;,<span class="number">3000</span>);</div><div class="line">			<span class="comment">//通过编号清除</span></div><div class="line">			<span class="built_in">window</span>.clearInterval(id);</div><div class="line">	(<span class="number">2</span>)setTimeout(code(代码),millisec(毫秒))   </div><div class="line">			--&gt;执行一次定时器(这个方法会返回一个id值,是当前定时器的标识);</div><div class="line">           <span class="number">1</span>):</div><div class="line">               <span class="function"><span class="keyword">function</span> <span class="title">fun01</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                   <span class="comment">/**</span></div><div class="line">                    * 内容;</div><div class="line">                    */</div><div class="line">               &#125;</div><div class="line">               <span class="built_in">window</span>.setTimeout(fun01, <span class="number">2000</span>);</div><div class="line">           <span class="number">2</span>):</div><div class="line">               <span class="function"><span class="keyword">function</span> <span class="title">fun01</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                   <span class="comment">/**</span></div><div class="line">                    * 内容;</div><div class="line">                    */</div><div class="line">               &#125;</div><div class="line">               <span class="built_in">window</span>.setTimeout(<span class="string">"fun01()"</span>, <span class="number">2000</span>);</div><div class="line">           <span class="number">3</span>):</div><div class="line">               <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                   <span class="comment">/**</span></div><div class="line">                    * 内容;</div><div class="line">                    */</div><div class="line">               &#125;, <span class="number">2000</span>);</div><div class="line">        clearTimeout(id)    --&gt;取消定时器;</div><div class="line">	<span class="number">3.</span> location: </div><div class="line">       	location.href = <span class="string">"资源路径"</span>;跳转到一个新的页面;</div><div class="line">		举例:</div><div class="line">		<span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></div><div class="line">			<span class="function"><span class="keyword">function</span> <span class="title">toIndex</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="comment">//执行跳转</span></div><div class="line">				location.href = <span class="string">"../../index.html"</span>;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span>&gt;</div><div class="line">		<span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"首页"</span> <span class="attr">onclick</span>=<span class="string">"toIndex()"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">	4.  history:</div><div class="line">        history.go();   --&gt;go(-1) 后退,go(1) 前进;</div><div class="line">        history.back(); 后退;</div><div class="line">        history.forward();前进</div><div class="line">		举例:</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">第一页:</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="function"><span class="keyword">function</span> <span class="title">toNext</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="comment">//history.forward();</span></div><div class="line">				history.go(<span class="number">1</span>);</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		这是start</div><div class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"end.html"</span>&gt;</span>end页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"下一页"</span> <span class="attr">onclick</span>=<span class="string">"toNext()"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line">第二页:</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="function"><span class="keyword">function</span> <span class="title">backToStart</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="comment">//history.back();</span></div><div class="line">				history.go(<span class="number">-1</span>);</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		这是 end 页面</div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"上一页"</span> <span class="attr">onclick</span>=<span class="string">"backToStart()"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="DOM对象-文档对象模型"><a href="#DOM对象-文档对象模型" class="headerlink" title="DOM对象(文档对象模型)"></a>DOM对象(文档对象模型)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">* JS主要操作的是HTML中的内容</div><div class="line">	* 操作流程:</div><div class="line">		1. 获取要操作的标签对应的DOM对象 --- 获取</div><div class="line">		2. 操作这个DOM对象 --------------- 调用</div><div class="line">获取DOM对象方式:</div><div class="line">1. var v = document.getElementById("ID值");</div><div class="line">2. var vs = document.getElementsByClassName("类名");</div><div class="line">3. var vs = document.getElementsByName("name值");</div><div class="line">4. var vs = document.getElementsByTagName("标签名");</div><div class="line">	----&gt; 2,3,4返回的是一个数组,数组中存放的是标签对象;</div><div class="line">调用方式:</div><div class="line">标签对象.innerHTML = "";  --&gt;重置标签内容体;</div><div class="line">标签对象.innerText = "";  --&gt;重置文本;</div><div class="line">标签对象.属性名 = "属性值"; --&gt;设置属性;</div><div class="line">标签对象.className  --&gt; 获取标签的class值;</div><div class="line">标签对象.checked;   --&gt; 获取当前对象的选中状态;</div></pre></td></tr></table></figure>
<h4 id="获取对象举例"><a href="#获取对象举例" class="headerlink" title="获取对象举例"></a>获取对象举例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">获取div标签对象,然后获取内容体并打印:</div><div class="line">	(1)先给标签添加id</div><div class="line">	(2)获取语法: var d1 = document.getElementById("id");</div><div class="line">	(3)注意加载顺序:</div><div class="line">		如果script在head中,直接调用获取语法,不能获取,因为div还没加载</div><div class="line">	解决方案:</div><div class="line">	1. 将script实现存储在div后面</div><div class="line">	2. 在body标签中添加属性onload = "函数"</div><div class="line">	   script中有对应的函数实现,获取div对象</div><div class="line">	执行效果: 页面加载完(注意是加载完),调用这个函数</div><div class="line">	* 方案一:</div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"d1"</span>&gt;</span> hello <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">		<span class="keyword">var</span> d1 = <span class="built_in">document</span>.getElementById(<span class="string">"d1"</span>);</div><div class="line">		alert(d1);			</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	* 方案二:</div><div class="line">		<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">				<span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"></span>)</span>&#123;</div><div class="line">					<span class="keyword">var</span> d1 = <span class="built_in">document</span>.getElementById(<span class="string">"d1"</span>);</div><div class="line">					alert(d1);		</div><div class="line">				&#125;</div><div class="line">			<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span> = <span class="string">"get()"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"d1"</span>&gt;</span> hello <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">	* 方案三(优化):</div><div class="line">		1. 编写函数</div><div class="line">		2. window.onload = 方法名; (方法没有括号)</div><div class="line">		<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">				<span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"></span>)</span>&#123;</div><div class="line">					<span class="keyword">var</span> d1 = <span class="built_in">document</span>.getElementById(<span class="string">"d1"</span>);</div><div class="line">					alert(d1);		</div><div class="line">				&#125;</div><div class="line">				<span class="built_in">window</span>.onload = get;</div><div class="line">			<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"d1"</span>&gt;</span> hello <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">body</span>&gt;</span>	</div><div class="line">	* 方案四(优化): 匿名函数</div><div class="line">		<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">				<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">					<span class="keyword">var</span> d1 = <span class="built_in">document</span>.getElementById(<span class="string">"d1"</span>);</div><div class="line">					alert(d1);		</div><div class="line">				&#125;</div><div class="line">			<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"d1"</span>&gt;</span> hello <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="调用对象举例"><a href="#调用对象举例" class="headerlink" title="调用对象举例"></a>调用对象举例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">获取font标签对象,并调用该对象</div><div class="line">内容体操作:</div><div class="line">	获取内容体 --- 标签对象.innerHTML</div><div class="line">	设置内容体 --- 标签对象.innerHTML = "新值";</div><div class="line">属性操作:</div><div class="line">	获取属性 --- 标签对象.属性名</div><div class="line">	设置属性 --- 标签对象.属性名 = "新值"</div><div class="line">注意：</div><div class="line">	* class 操作必须使用相关替换 --- className</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">			.test1 &#123;</div><div class="line">				color: red;</div><div class="line">			&#125;</div><div class="line">			.test2 &#123;</div><div class="line">				color: green;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="keyword">var</span> f1 = <span class="built_in">document</span>.getElementById(<span class="string">"f1"</span>);</div><div class="line">				<span class="comment">//内容体操作</span></div><div class="line">				<span class="comment">//获取内容体</span></div><div class="line">				<span class="comment">//alert(f1.innerHTML);</span></div><div class="line">				<span class="comment">//设置内容体</span></div><div class="line">				<span class="comment">//f1.innerHTML = "haha";</span></div><div class="line">				</div><div class="line">				<span class="comment">//获取color属性</span></div><div class="line">				<span class="comment">//alert(f1.color);</span></div><div class="line">				<span class="comment">//修改属性值</span></div><div class="line">				<span class="comment">//f1.color = "blue";</span></div><div class="line">				</div><div class="line">				<span class="comment">//f1.size = "1";</span></div><div class="line">				<span class="keyword">var</span> f2 = <span class="built_in">document</span>.getElementById(<span class="string">"f2"</span>);</div><div class="line">				<span class="comment">//获取class 值</span></div><div class="line">				alert(f2.className);</div><div class="line">				f2.className = <span class="string">"test2"</span>;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">font</span> <span class="attr">id</span>=<span class="string">"f1"</span> <span class="attr">size</span>=<span class="string">"6"</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span>hehe<span class="tag">&lt;/<span class="name">font</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">font</span> <span class="attr">id</span>=<span class="string">"f2"</span> <span class="attr">class</span>=<span class="string">"test1"</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">font</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><pre><code>概念: 页面上的一个动作
      动作可以是用户产生的 --- 用户操作 --单机,鼠标移入移出,获得失去焦点,下拉列表选定
      也可以是浏览器产生的 --- 页面加载
常见事件:
    onload      --&gt;页面加载完成事件;
    onsubmit    --&gt;表单提交事件;                 
    onclick     --&gt;单击事件;
    onchange    --&gt;改变事件,下拉列表选项改变时触发
    onfocus/onblur    --&gt;焦点事件(获得焦点/失去焦点);
    onmouseover/onmouseout/onmousemove --&gt;鼠标事件(鼠标移入/移出/移动)
    onkeydown/onkeypress/onkeyup --&gt;按键事件(按键按下/按键按住/按键弹起)    

注意: 
    1. 按键事件可以在方法中传入参数,参数有个keycode属性,可以获取当前按键对应的数字.
       通过判断数字,获取按的键位.回车键是13
    2. onload事件只能在body和img标签中使用
</code></pre><h4 id="事件的使用格式"><a href="#事件的使用格式" class="headerlink" title="事件的使用格式"></a>事件的使用格式</h4><pre><code>格式一: 
    1. 标签中添加属性 onxxx = &quot;函数&quot;
    2. 编写函数实现
格式二:
    1. 页面加载完,获取标签对象
    2. 标签对象.onxxx = function(){}
</code></pre><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">1)在标签上使用事件属性:</div><div class="line">    &lt;button onclick="myClick()"&gt;点击事件&lt;/button&gt;</div><div class="line"></div><div class="line">    &lt;script type="text/javascript"&gt;</div><div class="line">        function myClick() &#123;</div><div class="line">            alert("被点击了...");</div><div class="line">    	&#125;	</div><div class="line">    &lt;/script&gt;</div><div class="line">2)使用标签对象添加事件属性:</div><div class="line">    &lt;button id="button01"&gt;点击事件&lt;/button&gt;</div><div class="line"></div><div class="line">    &lt;script type="text/javascript"&gt;</div><div class="line">        window.onload = function() &#123;</div><div class="line">            var buttonObj = document.getElementById("button01");</div><div class="line">            buttonObj.onclick = function() &#123;</div><div class="line">                alert("被点击了...");</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &lt;/script&gt;</div></pre></td></tr></table></figure>
<h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><pre><code>this是当前对象,谁是当前对象,谁调用这个方法谁就是当前对象
</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>的两种使用方式:</div><div class="line">第一种:</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params">node</span>)</span>&#123;</div><div class="line">		<span class="comment">//获取当前输入框对象的value</span></div><div class="line">		alert(node.value);</div><div class="line">	&#125;	</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">&lt;body&gt;</div><div class="line">	&lt;input type="text" id="t1" onfocus="run(this)" value="test1"/&gt;</div><div class="line">	&lt;br /&gt;</div><div class="line">	&lt;input type="text" id="t2" onfocus="run(this)" value="test2"/&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">第二种:</div><div class="line">&lt;script&gt;	</div><div class="line">	window.onload = function()&#123;</div><div class="line">		var t1 = document.getElementById("t1");</div><div class="line">		//获取焦点时，打印t1里面的内容</div><div class="line">		t1.onfocus = function()&#123;</div><div class="line">			//alert(t1.value);</div><div class="line">			alert(this.value);//this 与 t1 等价</div><div class="line">		&#125;;</div><div class="line">	&#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	&lt;input type="text" id="t1" value="t1"/&gt;</div><div class="line">	&lt;br /&gt;</div><div class="line">	&lt;input type="text" id="t2"/&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>
<h3 id="数组对象-Array"><a href="#数组对象-Array" class="headerlink" title="数组对象(Array)"></a>数组对象(Array)</h3><pre><code>JS中数组长度是可变的,不存在索引越界问题
索引不一定只有数字,字符也可以
数组中可以存储不同类型的元素
</code></pre><h4 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h4><pre><code>格式: 
1. 创建空数组: var arr = new Array();
2. 创建指定长度数组: var arr = new Array(3);
    注意: 数组默认值是undefined
3. 创建数组时直接赋值: var arr = new Array(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;);
4. 方式3的变形: var arr = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;];
</code></pre><h4 id="常用属性及方法"><a href="#常用属性及方法" class="headerlink" title="常用属性及方法"></a>常用属性及方法</h4><pre><code>1. 获取长度: arr.length
2. 为数组赋值 arr[0] = &quot;a&quot;;
3. 将数组中的元素用指定字符拼成一个字符串: join(separator)
</code></pre><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>);</div><div class="line">两种遍历方式:</div><div class="line"><span class="number">1.</span>普通遍历:</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.lenth; i++)&#123;</div><div class="line">        alert(<span class="string">"普通遍历"</span>+arr[i]);</div><div class="line">    &#125;</div><div class="line"><span class="number">2.</span><span class="keyword">in</span>遍历</div><div class="line">	<span class="keyword">for</span>(index <span class="keyword">in</span> arr)&#123;</div><div class="line">		alert(<span class="string">"in遍历"</span>+arr[index]);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">alert(arr.join(<span class="string">"--"</span>); <span class="comment">//将数组元素以--连接打印</span></div></pre></td></tr></table></figure>
<h4 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">数组和数组嵌套就是二维数组</div><div class="line">var out = new Array()'</div><div class="line">out[0] = new Array("a","b","c");</div><div class="line">out[1] = new Array("d","e","f","g");</div><div class="line">out[2] = new Array("h","i");</div><div class="line">//获取大盒子长度</div><div class="line">alert(out.length);</div><div class="line">//获取第二个小盒子的长度</div><div class="line">alert(out[1].length);</div><div class="line">//获得i值</div><div class="line">alert(out[2][1]);</div></pre></td></tr></table></figure>
<h3 id="其它对象-全局对象"><a href="#其它对象-全局对象" class="headerlink" title="其它对象(全局对象)"></a>其它对象(全局对象)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">string(字符串):</div><div class="line">    常用方法:</div><div class="line">        charAt(); 返回在指定位置的字符;</div><div class="line">        indexOf(searchvalue,fromindex); 从指定位置处向后搜索匹配字符串;</div><div class="line">            searchvalue(必选) --&gt; 要匹配的字符串; fromindex(可选) --&gt; 开始位置;</div><div class="line">        lastIndexOf(searchvalue,fromindex); 从指定位置处向前搜索匹配字符串;</div><div class="line">            searchvalue(必选) --&gt; 要匹配的字符串; fromindex(可选) --&gt; 开始位置;</div><div class="line">        split(separator, howmany); 用指定的字符串分割成字符串数组;</div><div class="line">            separator(必选) --&gt; 字符串或正则表达式; howmany --&gt; 返回指定最大长度的数组;</div><div class="line">        toLocaleLowerCase(); toLowerCase();把字符串转换为小写。</div><div class="line">        toLocaleUpperCase(); toUpperCase()把字符串转换为大写。</div><div class="line"></div><div class="line"><span class="built_in">Date</span>(日期):</div><div class="line">    创建对象:</div><div class="line">        <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">//获取当前时间;</span></div><div class="line">        <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(毫秒值); <span class="comment">//生成指定时间;</span></div><div class="line">    常用方法:</div><div class="line">        date.toString(); <span class="comment">//获取时间的string类型;</span></div><div class="line">        date.toLocaleString(); <span class="comment">//获取本地格式的时间;</span></div><div class="line">        date.gettime(); <span class="comment">//获取毫秒值;</span></div><div class="line"></div><div class="line"><span class="built_in">Math</span>(数学):</div><div class="line">    常用方法:</div><div class="line">        ceil(); 向上取整;</div><div class="line">        floor(); 向下取整;</div><div class="line">        round(); 四舍五入;</div><div class="line">        random(); <span class="number">0</span>~<span class="number">1</span>之间的随机数;</div><div class="line">        pow(x,y); 返回x的y次幂;</div><div class="line">        sqrt(x); x的平方根;</div><div class="line"></div><div class="line"><span class="built_in">RegExp</span>(正则):</div><div class="line">    创建:</div><div class="line">        <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(正则规则);</div><div class="line">        <span class="keyword">var</span> reg = <span class="regexp">/^正则规则$/</span>;</div><div class="line">    常用方法:</div><div class="line">        test(要校验的字符串);</div></pre></td></tr></table></figure>
<h3 id="全局函数"><a href="#全局函数" class="headerlink" title="全局函数"></a>全局函数</h3><pre><code>封装在window对象中
1. 数字转换:
    parseInt(&quot;字符串&quot;): 将字符串解析成整数
    parseFloat(&quot;字符串&quot;): 将字符串解析成小数
    注意: JS解析时,会解析非数字字符前面的数字,不会报错
        如如果字符串是12ab3,会解析成12
        如果字符串是abc123,会解析成NaN    
2. 编码解码:
    encodeURL();    把字符串编码为URL;
    decodeURL();    将某个编码的URL解码;
    问题: 客户端和服务器端编码集不同,数据传输乱码
    解决方案:
        第一步(编码): 将中文字符根据编码集转换成固定格式的数字:
                %数字%数字%....
        第二步(解码): 发送到服务器,服务器使用和客户端相同的编码集转换成字符
3. eval();     将字符串转换为可执行的代码;
</code></pre><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="表单校验-简单"><a href="#表单校验-简单" class="headerlink" title="表单校验(简单)"></a>表单校验(简单)</h4><pre><code>* 要求: 注册时对用户名和密码进行非空校验,用户名还要进行非空格校验
* 语法: 
    1. form标签中onsubmit = &quot;return 函数() &quot;;
    2. JS编写函数实现,函数返回true或false,如果是true就提交表单,否则不提交
* JS中正则的使用: 以/^开始 以 $/结束
* 匹配 --- 两种方式
    1. 数据.match(正则);
    2. 正则.test(数据);
</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div></pre></td><td class="code"><pre><div class="line">主要看两个标签: <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="xml">和<span class="tag">&lt;<span class="name">form</span>&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="keyword">var</span> un = <span class="built_in">document</span>.getElementById(<span class="string">"un"</span>);</div><div class="line">				<span class="keyword">var</span> pw = <span class="built_in">document</span>.getElementById(<span class="string">"pw"</span>);</div><div class="line">				<span class="keyword">if</span>(un.value == <span class="string">""</span>)&#123;</div><div class="line">					alert(<span class="string">"用户名不能为空!"</span>);</div><div class="line">					<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">var</span> re = <span class="regexp">/^ +$/</span>;</div><div class="line">				<span class="comment">/*if(un.value.match(re))&#123;</span></div><div class="line">					alert("用户名不能包含空格!");</div><div class="line">					return false;</div><div class="line">				&#125;*/</div><div class="line">				<span class="keyword">if</span>(re.test(un.value))&#123;</div><div class="line">					alert(<span class="string">"用户名不能包含空格!"</span>);</div><div class="line">					<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span>(pw.value == <span class="string">""</span>)&#123;</div><div class="line">					alert(<span class="string">"密码不能为空!"</span>);</div><div class="line">					<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"../index.html"</span> <span class="attr">method</span>=<span class="string">"get"</span> <span class="attr">onsubmit</span>=<span class="string">"return check()"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">"6"</span> <span class="attr">color</span>=<span class="string">"#46B8DA"</span>&gt;</span>会员注册<span class="tag">&lt;/<span class="name">font</span>&gt;</span>UserRegister</div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>帐号:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">"un"</span>/&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>密码:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"pw"</span> /&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>确认密码:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> /&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>邮箱:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"email"</span> /&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>/&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>自我介绍:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">"5"</span> <span class="attr">cols</span>=<span class="string">"14"</span>&gt;</span>打篮球<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>性别:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"man"</span> <span class="attr">checked</span>=<span class="string">"checked"</span>/&gt;</span>男</div><div class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"woman"</span> /&gt;</span>女</div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>出生日期:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"year"</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1990"</span>&gt;</span>1990<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1991"</span>&gt;</span>1991<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1992"</span>&gt;</span>1992<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1993"</span>&gt;</span>1993<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">						<span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"month"</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"4"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">						<span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"day"</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"4"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">						<span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>验证码:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"code"</span>/&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../img/image/captcha.jhtml"</span> /&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span> /&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="表单校验-优化"><a href="#表单校验-优化" class="headerlink" title="表单校验(优化)"></a>表单校验(优化)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">不以警告框的形式弹出校验信息,而是在文本框后面显示</div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> un = <span class="built_in">document</span>.getElementById(<span class="string">"un"</span>);</div><div class="line">		<span class="keyword">var</span> unmsg = <span class="built_in">document</span>.getElementById(<span class="string">"unmsg"</span>);</div><div class="line">		un.onfocus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			unmsg.innerHTML = <span class="string">"&lt;font&gt;帐号必填&lt;/font&gt;"</span></div><div class="line">		&#125;</div><div class="line">		un.onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> re = <span class="regexp">/^ +$/</span>;</div><div class="line">			<span class="keyword">if</span>(un.value == <span class="string">""</span>)&#123;</div><div class="line">				unmsg.innerHTML = <span class="string">"&lt;font color='red'&gt;帐号不能为空!&lt;/font&gt;"</span>;</div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(re.test(un.value))&#123;</div><div class="line">				unmsg.innerHTML = <span class="string">"&lt;font color='blue'&gt;帐号不能包含空格!&lt;/font&gt;"</span>;</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				unmsg.innerHTML = <span class="string">"&lt;font&gt;恭喜!帐号可用!&lt;/font&gt;"</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">var</span> pw = <span class="built_in">document</span>.getElementById(<span class="string">"pw"</span>);</div><div class="line">		<span class="keyword">var</span> pwmsg = <span class="built_in">document</span>.getElementById(<span class="string">"pwmsg"</span>);</div><div class="line">		pw.onfocus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			pwmsg.innerHTML = <span class="string">"&lt;font&gt;密码必填&lt;/font&gt;"</span>;</div><div class="line">		&#125;</div><div class="line">		pw.onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">if</span>(pw.value == <span class="string">""</span>)&#123;</div><div class="line">				pwmsg.innerHTML = <span class="string">"&lt;font color='red'&gt;密码不能为空&lt;/font&gt;"</span>;</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				pwmsg.innerHTML = <span class="string">"&lt;font&gt;恭喜!密码可用!&lt;/font&gt;"</span></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">td</span>&gt;</span>帐号:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">"un"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"unmsg"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">td</span>&gt;</span>密码:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span><span class="attr">id</span>=<span class="string">"pw"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"pwmsg"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">图片:</div><div class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../img/img/1.jpg"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">id</span>=<span class="string">"lunbo"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">编写轮播脚本:</div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">		<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> count = <span class="number">1</span>;</div><div class="line">			<span class="built_in">window</span>.setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="keyword">var</span> lunbo = <span class="built_in">document</span>.getElementById(<span class="string">"lunbo"</span>);</div><div class="line">				count++;</div><div class="line">				<span class="keyword">if</span>(count &gt; <span class="number">3</span>)&#123;</div><div class="line">					count = <span class="number">1</span>;</div><div class="line">				&#125;</div><div class="line">				lunbo.src = <span class="string">"../img/img/"</span>+count+<span class="string">".jpg"</span>;</div><div class="line">			&#125;,<span class="number">1000</span>);</div><div class="line">		&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="定时广告"><a href="#定时广告" class="headerlink" title="定时广告"></a>定时广告</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">图片:</div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"gg"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../../img/image/2.jpg"</span> <span class="attr">width</span>=<span class="string">"100%"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">编写js脚本:</div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">		<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="keyword">var</span> gg = <span class="built_in">document</span>.getElementById(<span class="string">"gg"</span>);</div><div class="line">				gg.style.display = <span class="string">"block"</span>;</div><div class="line">				<span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">					gg.style.display = <span class="string">"none"</span>;</div><div class="line">				&#125;,<span class="number">3000</span>);</div><div class="line">			&#125;,<span class="number">3000</span>);</div><div class="line">		&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="表格隔行变色"><a href="#表格隔行变色" class="headerlink" title="表格隔行变色"></a>表格隔行变色</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div></pre></td><td class="code"><pre><div class="line">要求: 表格奇数行与偶数行颜色不同,当鼠标移入时,当前行变为粉色,移出时变回原来的颜色</div><div class="line">知识前提:首先我们要知道,当页面加载完,window.onload = function()&#123;&#125;,function函数</div><div class="line">已经执行完了,onmouseover和onmouseout事件已经绑定完(也就是每个对象都有这个事件了),</div><div class="line">只是还未触发,所以tr.onmouseover = function()&#123;&#125;,function并没有执行</div><div class="line">第一种形式:(错误)</div><div class="line">错误原因: 页面加载完,此时i=5,1处tr为trs[最后一次进入for时的i],即i=4;</div><div class="line">此时tr只代表最后一行,当鼠标移入其他行时,触发事件了,事件function中的tr都代表最后一行,所以颜色都是改的最后一行的颜色</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">			.jishu&#123;</div><div class="line">				background-color: red;</div><div class="line">			&#125;</div><div class="line">			.oushu&#123;</div><div class="line">				background-color: blue;</div><div class="line">			&#125;</div><div class="line">			.pink&#123;</div><div class="line">				background-color: pink;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="keyword">var</span> trs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"tr"</span>);</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i &lt; trs.length;i++)&#123;</div><div class="line">					<span class="keyword">var</span> tr = trs[i];<span class="comment">//1处</span></div><div class="line">					<span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">1</span>)&#123;</div><div class="line">						tr.className = <span class="string">"jishu"</span>;</div><div class="line">					&#125;<span class="keyword">else</span>&#123;</div><div class="line">						tr.className = <span class="string">"oushu"</span>;</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">var</span> temp;</div><div class="line">					tr.onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">						temp = tr.className;</div><div class="line">						tr.className = <span class="string">"pink"</span>;</div><div class="line">					&#125;</div><div class="line">					tr.onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">						tr.className = temp;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">cellpadding</span>=<span class="string">"0"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"80%"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>商品名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>商品描述<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"itemSelect"</span> /&gt;</span>		</div><div class="line">				<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>手机数码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>手机数码商品信息<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tr</span> &gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"itemSelect"</span> /&gt;</span>		</div><div class="line">				<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>电脑办公<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>电脑办公商品信息<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"itemSelect"</span> /&gt;</span>		</div><div class="line">				<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>鞋靴箱包<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>鞋靴箱包商品信息<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"itemSelect"</span> /&gt;</span>		</div><div class="line">				<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>家居饰品<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>家居饰品商品信息<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line">第二种形式(错误):</div><div class="line">结果是颜色并不会变化.</div><div class="line">错误原因:</div><div class="line">加载完,i=5;触发事件function中的trs[5]并不代表某一行(因为总共就5行),属于undefined.</div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> trs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"tr"</span>);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i &lt; trs.length;i++)&#123;</div><div class="line">			<span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">1</span>)&#123;</div><div class="line">				trs[i].className = <span class="string">"jishu"</span>;</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				trs[i].className = <span class="string">"oushu"</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">var</span> temp;</div><div class="line">			trs[i].onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				temp = trs[i].className;</div><div class="line">				trs[i].className = <span class="string">"pink"</span>;</div><div class="line">			&#125;</div><div class="line">			trs[i].onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				trs[i].className = temp;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">第三种形式:(正确)</div><div class="line">在onmouseover和onmouseout事件方法中使用this关键字,谁触发事件就代表谁</div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> trs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"tr"</span>);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i &lt; trs.length;i++)&#123;</div><div class="line">			<span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">1</span>)&#123;</div><div class="line">				trs[i].className = <span class="string">"jishu"</span>;</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				trs[i].className = <span class="string">"oushu"</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">var</span> temp;</div><div class="line">			trs[i].onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				temp = <span class="keyword">this</span>.className;</div><div class="line">				<span class="keyword">this</span>.className = <span class="string">"pink"</span>;</div><div class="line">			&#125;</div><div class="line">			trs[i].onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="keyword">this</span>.className = temp;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="复选框操作"><a href="#复选框操作" class="headerlink" title="复选框操作"></a>复选框操作</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="keyword">var</span> cbs = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"itemSelect"</span>);</div><div class="line">				<span class="built_in">document</span>.getElementById(<span class="string">"chooseAll"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">					<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cbs.length;i++)&#123;</div><div class="line">						cbs[i].checked = <span class="literal">true</span>;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				<span class="built_in">document</span>.getElementById(<span class="string">"chooseNone"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">					<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cbs.length;i++)&#123;</div><div class="line">						cbs[i].checked = <span class="literal">false</span>;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				<span class="built_in">document</span>.getElementById(<span class="string">"fanxuan"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">					<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cbs.length;i++)&#123;</div><div class="line">						cbs[i].checked = !cbs[i].checked;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">cellpadding</span>=<span class="string">"0"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"80%"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"全选"</span> <span class="attr">id</span>=<span class="string">"chooseAll"</span>/&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"全不选"</span> <span class="attr">id</span> = <span class="string">"chooseNone"</span>/&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"反选"</span> <span class="attr">id</span> = <span class="string">"fanxuan"</span> /&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>商品名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>商品描述<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"itemSelect"</span>/&gt;</span>		</div><div class="line">				<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>手机数码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>手机数码商品信息<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"itemSelect"</span> /&gt;</span>		</div><div class="line">				<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>电脑办公<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>电脑办公商品信息<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"itemSelect"</span> /&gt;</span>		</div><div class="line">				<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>鞋靴箱包<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>鞋靴箱包商品信息<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"itemSelect"</span> /&gt;</span>		</div><div class="line">				<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>家居饰品<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>家居饰品商品信息<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="省市联动"><a href="#省市联动" class="headerlink" title="省市联动"></a>省市联动</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">省市联动实现分析：</div><div class="line">1、省以及市的信息存储起来(JS数组存储)</div><div class="line">2、当第一个下拉框的选择改变时，触发一个函数</div><div class="line">	   onchange</div><div class="line">3、函数中根据选择的省在第二个下拉框显示对应的市</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">		<span class="comment">// 定义二维数组,存储城市信息</span></div><div class="line">	</div><div class="line">		<span class="keyword">var</span> cities = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">		cities[<span class="number">0</span>] = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"海淀"</span>,<span class="string">"昌平"</span>);</div><div class="line">		cities[<span class="number">1</span>] = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"长春市"</span>,<span class="string">"吉林市"</span>,<span class="string">"松原市"</span>,<span class="string">"延边市"</span>);</div><div class="line">		cities[<span class="number">2</span>] = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"济南市"</span>,<span class="string">"青岛市"</span>,<span class="string">"烟台市"</span>,<span class="string">"潍坊市"</span>,<span class="string">"淄博市"</span>);</div><div class="line">		cities[<span class="number">3</span>] = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"石家庄市"</span>,<span class="string">"唐山市"</span>,<span class="string">"邯郸市"</span>,<span class="string">"廊坊市"</span>);</div><div class="line">		cities[<span class="number">4</span>] = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"南京市"</span>,<span class="string">"苏州市"</span>,<span class="string">"扬州市"</span>,<span class="string">"无锡市"</span>);</div><div class="line">方式一:</div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params">node</span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> city = <span class="built_in">document</span>.getElementById(<span class="string">"city"</span>);</div><div class="line">			<span class="comment">//下面这行的目的是:每次更改省的时候,都会调用run,把city下拉列表中的内容清空</span></div><div class="line">			city.innerHTML = <span class="string">"&lt;option&gt;----请-选-择-市----&lt;/option&gt;"</span>;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; cities[node.value].length; i++)&#123;</div><div class="line">				<span class="keyword">var</span> opt = <span class="string">"&lt;option&gt;"</span>+cities[node.value][i]+<span class="string">"&lt;/option&gt;"</span>;</div><div class="line">				<span class="comment">//每个市进行拼接</span></div><div class="line">				city.innerHTML += opt;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">方式二:</div><div class="line">		<span class="comment">/*function run(node)&#123;</span></div><div class="line">			var city = document.getElementById("city");</div><div class="line">			city.innerHTML = "&lt;option&gt;----请-选-择-市----&lt;/option&gt;";</div><div class="line">			for(var i = 0; i &lt; cities[node.value].length;i++)&#123;</div><div class="line">				var opt = document.createElement("option");</div><div class="line">				var txt = document.createTextNode(cities[node.value][i]);</div><div class="line">				opt.appendChild(txt);</div><div class="line">				city.appendChild(opt);			</div><div class="line">			&#125;</div><div class="line">		&#125;*/</div><div class="line">		</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"province"</span> <span class="attr">style</span>=<span class="string">"width:150px"</span> <span class="attr">onchange</span>=<span class="string">"run(this)"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>----请-选-择-省----<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>吉林省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>山东省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>河北省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"4"</span>&gt;</span>江苏省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"city"</span> <span class="attr">style</span>=<span class="string">"width:150px"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>----请-选-择-市----<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;* 概念: 
    * 是基于对象和事件驱动的脚本语言, 用于开发交互式web页面
    * 解释型语言,不需要进行编译,由浏览器执行
* 作用:
    * 动态的修改内存中的html和css
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="https://geekhoon.github.io/categories/JavaWeb/"/>
    
    
      <category term="前端开发" scheme="https://geekhoon.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>HTML&amp;CSS</title>
    <link href="https://geekhoon.github.io/2017/03/18/JavaWeb-01-HTML&amp;CSS/"/>
    <id>https://geekhoon.github.io/2017/03/18/JavaWeb-01-HTML&amp;CSS/</id>
    <published>2017-03-18T11:31:26.000Z</published>
    <updated>2017-03-28T13:17:32.781Z</updated>
    
    <content type="html"><![CDATA[<h3 id="HTML概述"><a href="#HTML概述" class="headerlink" title="HTML概述"></a>HTML概述</h3><pre><code>1.超文本标记语言
    超文本- 不仅可以存文本, 还可以为文本添加样式,还可以存视频,音频,图片
    标记- HTML源码中使用标签实现超文本存储,标签称之为标记
    语言- 一门计算机语言
</code></pre><a id="more"></a>    
<pre><code>2.作用: 编写静态网页
3.特点:
    1. 是一种解释型语言,源码不需要编译
        编译型: 源码--&gt;机器码(0101...)--&gt;以后每次执行机器码
        解释型: 源码--&gt;每次直接执行源码
       拓展: 编译型效率更高
    2. 文件的扩展名是*.html或*.htm
    3. html结构都是由标签组成
        标签名都是预先定义好的,具有固定好的功能;
        标签名不区分大小写
        标签由开始标签和结束标签组成
        标签若没有&quot;内容体&quot;,可以自结束(&lt;img /&gt;也称&quot;空标签&quot;)
4.注释: &lt;!-- 注释内容,不能嵌套使用 --&gt;
</code></pre><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>,<span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>,...<span class="tag">&lt;<span class="name">h6</span>&gt;</span>标题6<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></div><div class="line">	特点:</div><div class="line">		1. 依次减小</div><div class="line">		2. 自动换行</div></pre></td></tr></table></figure>
<h4 id="水平线"><a href="#水平线" class="headerlink" title="水平线"></a>水平线</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></div><div class="line">	属性:</div><div class="line">		1. width:设置宽度,取值百分比(%),像素(px);</div><div class="line">		2. size:设置高度(粗细),取值百分比(%),像素(px);</div></pre></td></tr></table></figure>
<h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">font</span>&gt;</span>字体<span class="tag">&lt;/<span class="name">font</span>&gt;</span></div><div class="line">	属性:</div><div class="line">		color:设置颜色,取值:</div><div class="line">			1.使用颜色的英语单词;</div><div class="line">			2.使用16进制组成颜色码:</div><div class="line">				#xx(红)xx(绿)xx(蓝) 例:红:#ff0000 白:#ffffff 黑:#000000</div><div class="line">		size:设置字体大小,取值1~7;默认是3</div></pre></td></tr></table></figure>
<h4 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">粗体:</div><div class="line">	<span class="tag">&lt;<span class="name">b</span>&gt;</span>粗体<span class="tag">&lt;/<span class="name">b</span>&gt;</span></div><div class="line"></div><div class="line">斜体:</div><div class="line">	<span class="tag">&lt;<span class="name">i</span>&gt;</span>斜体<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	特点:</div><div class="line">		1.自动换行,独占一行;</div><div class="line">		2.前后留白;</div><div class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span> 换行</div></pre></td></tr></table></figure>
<h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> /&gt;</span></div><div class="line">	属性:</div><div class="line">		src:图片路径;</div><div class="line">			相对路径:</div><div class="line">				../	返回到当前文件夹的上一级文件夹目录;</div><div class="line">				./	当前文件夹目录;</div><div class="line">		alt:当图片不能显示时,代替图片的说明文本;</div><div class="line">		title:提示描述(鼠标悬停在图片上时,显示的说明文本);</div><div class="line">		width:设置图片的宽度,取值百分比,像素;</div><div class="line">		heigth:设置图片的高度,取值百分比(%),像素(px);</div></pre></td></tr></table></figure>
<h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">  有序列表:</div><div class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>	</div><div class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div><div class="line"></div><div class="line">  无序列表:</div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>	</div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">  属性:</div><div class="line">type:设置标识:</div><div class="line">	ol:取值:a,A,i,I,1等;</div><div class="line">	ul:取值:circle(空心圆),square(方块),disc(实心圆);</div></pre></td></tr></table></figure>
<h4 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span>超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span>	</div><div class="line">	属性:</div><div class="line">		href:资源的路径(访问路径);</div><div class="line">		target:设置打开方式,取值:</div><div class="line">			_blank:开启新窗口显示;</div><div class="line">			_self:覆盖当前窗口显示;</div></pre></td></tr></table></figure>
<h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span>		</div><div class="line">	属性:</div><div class="line">		border:设置边框,取值像素;</div><div class="line">		cellpadding:设置单元格与单元格内容之间的间距;</div><div class="line">		cellspacing:设置单元格与单元格之间的间距;</div><div class="line">		width:设置宽度,取值百分比(%),像素(px);</div><div class="line">		align:设置表格对齐方式;</div><div class="line">		bgcolor:设置背景颜色;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span>		<span class="comment">&lt;!-- 定义一行 --&gt;</span></div><div class="line">	属性:</div><div class="line">		align:设置单元格内容的对齐方式;</div><div class="line">		bgcolor:设置背景颜色;</div><div class="line">	</div><div class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>		<span class="comment">&lt;!-- 定义表头单元格 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>		<span class="comment">&lt;!-- 定义普通单元格 --&gt;</span></div><div class="line">	属性:</div><div class="line">		align:设置单元格内容的对齐方式;</div><div class="line">		bgcolor:设置背景颜色;</div><div class="line">		colspan:合并单元格;</div><div class="line">		rowspan:合并行;</div></pre></td></tr></table></figure>
<h4 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">frameset</span>&gt;</span>:框架标签;</div><div class="line">	特点:</div><div class="line">		不能与body共存;</div><div class="line"></div><div class="line">	属性:</div><div class="line">		rows:行,取值百分比(%),像素(px);</div><div class="line">		cols:列,取值百分比(%),像素(px);</div><div class="line">	注意:</div><div class="line">		frameset可以嵌套</div><div class="line">	如果要实现左侧菜单栏超链接点击时,页面显示在右侧:</div><div class="line">		1. 右侧 frame 定义一个 name</div><div class="line">		2. 超链接的 target = "name 值"</div><div class="line">		</div><div class="line"><span class="tag">&lt;<span class="name">frame</span>&gt;</span>:框架子标签;</div><div class="line">	属性:</div><div class="line">		src:资源路径;</div><div class="line">		noresize:框架分隔线不能移动;</div><div class="line">		name:自定义名称(唯一);</div><div class="line">	使用<span class="tag">&lt;<span class="name">frameset</span>&gt;</span>布局页面:</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>后台页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">frameset</span> <span class="attr">rows</span>=<span class="string">"20%,*"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">frame</span> <span class="attr">noresize</span>=<span class="string">"noresize"</span> <span class="attr">src</span>=<span class="string">"top.html"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">frameset</span> <span class="attr">cols</span>=<span class="string">"20%,*"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">frame</span> <span class="attr">noresize</span>=<span class="string">"noresize"</span> <span class="attr">src</span>=<span class="string">"left.html"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">frame</span> <span class="attr">noresize</span>=<span class="string">"noresize"</span> <span class="attr">src</span>=<span class="string">"main.html"</span> <span class="attr">name</span>=<span class="string">"main"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line">left.html:</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"../../index.html"</span> <span class="attr">target</span>=<span class="string">"main"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>注册页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			</div><div class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span>:表单标签</div><div class="line">	作用:</div><div class="line">		读取客户录入,通过网络发送到服务器</div><div class="line">	应用场景:</div><div class="line">		登录,注册,搜索关键字</div><div class="line">	实现方式:</div><div class="line">		1.用户录入关键字</div><div class="line">		2.关键字发送到服务器</div><div class="line">			发送格式:</div><div class="line">				www.xxxx.com?word=用户录入的关键字</div><div class="line">				www.xxxx.com?username=用户帐号&amp;password=用户密码</div><div class="line">		3.服务器获取到键值对,取出值,再做下一步处理</div><div class="line">		4.查询数据库,并将结果发送到客户端</div><div class="line">	重点:</div><div class="line">		数据发送到服务器格式:</div><div class="line">			服务器域名?键1=值1&amp;键2=值2&amp;....</div><div class="line">		键---是开发人员预定义好的</div><div class="line">		值---是用户录入的</div><div class="line">		后台根据键取值</div><div class="line">	表单相关知识点:</div><div class="line">		1.表单页面</div><div class="line">			表单相关标签</div><div class="line">		2.指定格式发送服务器</div><div class="line">			指定格式---&gt; 输入项中设置name属性</div><div class="line">			发送到服务器---&gt; form标签中设置action="服务器路径"</div><div class="line">		3.提交方式</div><div class="line">			地址栏显示录入内容: 默认/method="get"</div><div class="line">			地址栏不显示录入内容: method="post"</div><div class="line">			POST--&gt; 数据安全,发送的数据没有长度限制</div><div class="line">	属性:</div><div class="line">		action:数据提交路径;</div><div class="line">		method:数据提交方式:(并不只有get和post)</div><div class="line">			get:理论上速度快,数据会追加到地址栏中(url?k=v&amp;k=v&amp;...),有数据大小限制(不安全);</div><div class="line">			post:理论上速度慢,数据不会追加到地址栏中,无数据大小限制(安全);</div></pre></td></tr></table></figure>
<h4 id="表单相关标签"><a href="#表单相关标签" class="headerlink" title="表单相关标签"></a>表单相关标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">	input:定义表单项;</div><div class="line">		属性:</div><div class="line">			type:表单项类型,取值:</div><div class="line">				text		--&gt; 文本框;</div><div class="line">				password	--&gt; 密码框;</div><div class="line">				radio		--&gt; 单选按钮;</div><div class="line">				checkbox	--&gt; 复选框;</div><div class="line">				file		--&gt; 文件上传;</div><div class="line">				hidden		--&gt; 隐藏域;</div><div class="line">				reset		--&gt; 重置按钮;</div><div class="line">				submit		--&gt; 提交按钮;</div><div class="line">				image		--&gt; 图形提交按钮;</div><div class="line">				button		--&gt; 普通按钮;</div><div class="line">			name:发送服务端的数据名称(需要提交的数据必须提供name值);</div><div class="line">			value:发送服务端的数据值;</div><div class="line">			size:表单项的长度;</div><div class="line">			checked:默认选中(用于单选框或复选框);</div><div class="line">			readonly:是否只读,数据会提交</div><div class="line">			disabled:是否可用,数据不会提交</div><div class="line">			maxlength:允许输入的最大长度;</div><div class="line">	</div><div class="line">	select:下拉列表;</div><div class="line">		属性:</div><div class="line">			name:发送服务端的数据名称;</div><div class="line">			multiple:不写默认单选,取值为"multiple"表示多选;</div><div class="line">			size:多选时,可见选项的数目;</div><div class="line">	</div><div class="line">		**子标签**</div><div class="line">			option:下拉项;</div><div class="line">				属性:</div><div class="line">					value:发送服务端的数据值;</div><div class="line">					selected:默认勾选项;</div><div class="line">	</div><div class="line">	textarea:文本域;</div><div class="line">		属性:</div><div class="line">			cols:文本域的列数;</div><div class="line">			rows:文本域的行数;</div><div class="line">		</div><div class="line">	注意: </div><div class="line">		1. radio保证单选,需要设置相同的name属性</div><div class="line">		2. 文本域比较特殊，没有 value 属性，设置数据必须设置在内容体</div><div class="line">		3. 隐藏标签hidden存储一些用户没必要看到的数据,比如id号</div><div class="line">	拓展:</div><div class="line">		设置性别用radio,只可以点击圆圈进行选择,如点击男或女也进行选择:</div><div class="line">		* 设input的id</div><div class="line">		* 设置label</div><div class="line">性别:</div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span>  <span class="attr">name</span>=<span class="string">"sex"</span>  <span class="attr">value</span>=<span class="string">"男"</span> <span class="attr">id</span>=<span class="string">"sexMan"</span>/&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"sexMan"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span>  <span class="attr">name</span>=<span class="string">"sex"</span>  <span class="attr">value</span>=<span class="string">"女"</span> <span class="attr">id</span>=<span class="string">"sexWoman"</span>/&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"sexWoman"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="表单小问题"><a href="#表单小问题" class="headerlink" title="表单小问题"></a>表单小问题</h4><pre><code>1. radio单选传递的值都是on,无法区分值.需要设置value来解决
2. checkbox复选传递的值也都是on,无法区分值,需要设置value来解决    
</code></pre><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><pre><code>概念: 层叠样式表,多个样式可以重叠使用
HTML-&gt; 内容的载体(存储内容)
CSS--&gt; 修饰内容
</code></pre><h4 id="CSS使用"><a href="#CSS使用" class="headerlink" title="CSS使用"></a>CSS使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">1.行内样式: 使用style属性;</div><div class="line">	语法:</div><div class="line">		style=&quot;属性名:属性值;属性名:属性值;&quot;</div><div class="line">	注意: 值本身有空格,要用 &quot;&quot; 或 &apos;&apos; 包裹,如果外层有双引号了,要用单引号</div><div class="line">2.内部样式: 在head中使用style标签定义样式;</div><div class="line">	语法:</div><div class="line">		&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">			选择器 &#123;</div><div class="line">				属性名: 属性值;</div><div class="line">				属性名: 属性值;</div><div class="line">			&#125;</div><div class="line">		&lt;/style&gt;</div><div class="line">3.外部样式: 创建*.css样式文件,在需要使用其中样式的html中引入该样式;</div><div class="line">	*.css文件语法:</div><div class="line">		选择器 &#123;</div><div class="line">				属性名: 属性值;</div><div class="line">				属性名: 属性值;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	引入样式语法:</div><div class="line">		&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;*.css文件的路径&quot;/&gt;</div><div class="line">		属性:</div><div class="line">			rel:说明当前页面与href所指定文档的关系(这里固定,指引入的文件是当前页面的样式表);</div><div class="line">			type:指定浏览器的解释方式;</div><div class="line">			href:*.css文件的路径;</div></pre></td></tr></table></figure>
<h4 id="div与span"><a href="#div与span" class="headerlink" title="div与span"></a>div与span</h4><pre><code>二者经常结合css使用,都可以存储内容体
div: 换行,除了包裹内容体,还会占内容后的一整行
span: 不换行,刚好包裹内容体
注: 
    div h1 p li ---&gt; 块级元素,默认换行
    span font a ---&gt; 行内元素,默认不换行
</code></pre><h4 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">作用: 定位要添加样式的标签</div><div class="line">分类: </div><div class="line">	1.元素选择器:</div><div class="line">		标签名 &#123;</div><div class="line">			CSS语法;</div><div class="line">		&#125;</div><div class="line">	2.ID选择器:</div><div class="line">		标签有id属性,这个值是标签的唯一标识;</div><div class="line">		#id值 &#123;</div><div class="line">			CSS语法;</div><div class="line">		&#125;</div><div class="line">	3.类选择器:</div><div class="line">		标签有class属性,这个值确定一类标签;</div><div class="line">		.class值 &#123;</div><div class="line">			CSS语法;</div><div class="line">		&#125;</div><div class="line">	4.属性选择器:</div><div class="line">		选择器[属性名=&apos;属性值&apos;] &#123;</div><div class="line">			CSS语法;</div><div class="line">		&#125;</div><div class="line">	5.包含(层叠)选择器:多个选择器组合在一起进行筛选</div><div class="line">		父选择器 子孙选择器 &#123;</div><div class="line">			CSS语法;</div><div class="line">		&#125;</div><div class="line">		举例:</div><div class="line">			先定位div,再定位当前div中的font</div><div class="line">			div font&#123;</div><div class="line">				color: red;</div><div class="line">			&#125;</div><div class="line">注意优先级: 行内样式 &gt; id选择器 &gt; 类选择器 &gt; 元素选择器</div></pre></td></tr></table></figure>
<h4 id="CSS样式"><a href="#CSS样式" class="headerlink" title="CSS样式"></a>CSS样式</h4><pre><code>border:设置边框样式;
    语法:
    选择器 {
        border:宽度 样式 颜色;
        width:取值百分比,像素;
    }
width:设置宽度,取值百分比,像素;
height:设置高度,取值百分比,像素;
display:转换标签的类型:
    标签分为:
        行内标签:可以与其它标签在一行显示的标签称为行内标签;
        块级标签:自己独占一行,不能与其它标签在一行共存的称为块级标签;
color:设置字体颜色;
font-size:设置字体大小;
background-color:设置背景样式;
float:设置浮动方式,取值:
    left:元素向左浮动;
    right:元素向右浮动;
    none:元素不浮动(默认值);
clear:清除浮动效果,取值:
    left:清除元素向左浮动;
    right:清除元素向右浮动;
    both:同时清除左右两侧浮动;
</code></pre><h4 id="CSS边框与尺寸"><a href="#CSS边框与尺寸" class="headerlink" title="CSS边框与尺寸"></a>CSS边框与尺寸</h4><pre><code>作用: 布局明显,美观
属性:
    border: 粗细 颜色 实线;
    width: 像素或百分比;
    height: 像素;
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">div&#123;</div><div class="line">	border: 1px red solid; /* solid代表实线 */</div><div class="line">	width: 100px;/* 也可以用百分比,如50%  */</div><div class="line">	height: 200px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="CSS其他样式"><a href="#CSS其他样式" class="headerlink" title="CSS其他样式"></a>CSS其他样式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">1.超链接:</div><div class="line">a&#123;</div><div class="line">	text-decoration: none; /* 取消下划线 */</div><div class="line">&#125;</div><div class="line">2.设置内容隐藏</div><div class="line">font&#123;</div><div class="line">	display:none;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="CSS结构样式"><a href="#CSS结构样式" class="headerlink" title="CSS结构样式"></a>CSS结构样式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">1.块级元素转行内元素</div><div class="line">	div&#123;</div><div class="line">		display:inline;</div><div class="line">	&#125;</div><div class="line">2.行内元素转块级元素:</div><div class="line">	span&#123;</div><div class="line">		display:block;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h4 id="CSS布局样式"><a href="#CSS布局样式" class="headerlink" title="CSS布局样式"></a>CSS布局样式</h4><pre><code>属性:
    float: 浮动,可以让div水平显示
1.假设都没有float属性,会默认换行
2.假设都有float属性,全部浮动
注意: 有的有float,有的没有float,结果产生了重叠
    出现重叠原因: 
        * 页面分成上下两层
        * 浮动在上,不浮动在下
        * 俯视观看
    解决:
        在d3中添加属性 clear: both;
        相当于把上层浮动的内容拿到下层,再进行排版
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">#d1&#123;</div><div class="line">	border: 1px red solid; </div><div class="line">	width: 100px;</div><div class="line">	height: 100px;</div><div class="line">	float: left; /* 浮动 */ </div><div class="line">&#125;</div><div class="line">#d2&#123;</div><div class="line">	border: 1px green solid; </div><div class="line">	width: 200px;</div><div class="line">	height: 200px;</div><div class="line">	float: left;	</div><div class="line">&#125;</div><div class="line">#d3s&#123;</div><div class="line">	border: 1px blue solid; </div><div class="line">	width: 300px;</div><div class="line">	height: 300px;</div><div class="line">		clear: both;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="CSS盒子模型"><a href="#CSS盒子模型" class="headerlink" title="CSS盒子模型"></a>CSS盒子模型</h4><pre><code>三部分: 外边距(margin),边框(border)和内边距(padding):
    外边距(margin):边框与其它标签边框之间的距离;
    内边距(padding):边框与内容之间的距离;
盒子之间间距设置:
    margin-top: 100px; /* 或百分比,纵向上不推荐百分比 */
    margin-left: 100px;
    margin-right
    margin-bottom

盒子内元素与盒子之间间距设置:
    padding-top: 100px; /* 或百分比 */
    padding-left: 50px;
    padding-right
    padding-bottom
拓展: right和bottom生效的情况:
        margin----&gt; 平级的盒子之间
        padding---&gt; 不指定盒子的width和height时可以生效
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;HTML概述&quot;&gt;&lt;a href=&quot;#HTML概述&quot; class=&quot;headerlink&quot; title=&quot;HTML概述&quot;&gt;&lt;/a&gt;HTML概述&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;1.超文本标记语言
    超文本- 不仅可以存文本, 还可以为文本添加样式,还可以存视频,音频,图片
    标记- HTML源码中使用标签实现超文本存储,标签称之为标记
    语言- 一门计算机语言
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="https://geekhoon.github.io/categories/JavaWeb/"/>
    
    
      <category term="前端开发" scheme="https://geekhoon.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>反射</title>
    <link href="https://geekhoon.github.io/2017/03/06/20-%E5%8F%8D%E5%B0%84/"/>
    <id>https://geekhoon.github.io/2017/03/06/20-反射/</id>
    <published>2017-03-06T00:52:19.000Z</published>
    <updated>2017-03-28T13:29:44.382Z</updated>
    
    <content type="html"><![CDATA[<h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><pre><code>* 要使用某个类时,如果该类还未被加载到内存中,
  则系统会通过加载,连接,初始化三步来实现对这个类进行初始化。
</code></pre><a id="more"></a>    
<pre><code>1. 类的加载
    * 将class文件读入内存,类的加载器创建一个编译后的class文件的对象(字节码对象)
    * 任何类在使用时,系统都会建立一个class对象
2. 连接
    * 验证: 检查内部结构
    * 准备: 为类的静态成员分配内存,并默认初始化值
    * 解析: 将类的二进制数据中的符号引用替换为直接引用
3. 初始化
    * 创建对象,赋值
</code></pre><h4 id="类的加载时机"><a href="#类的加载时机" class="headerlink" title="类的加载时机"></a>类的加载时机</h4><pre><code>* 创建类的实例
* 类的静态变量，或者为静态变量赋值
* 类的静态方法
* 使用反射方式来强制创建某个类或接口对应的java.lang.Class对象
* 初始化某个类的子类
* 直接使用java.exe命令来运行某个主类
</code></pre><h4 id="类的加载器"><a href="#类的加载器" class="headerlink" title="类的加载器"></a>类的加载器</h4><pre><code>* 负责将.class文件加载到内存中,并为之生成对应的Class对象
* 组成:
    1. 根类加载器Bootstrap ClassLoader
        负责Java核心类的加载,比如System,String等
        在JDK中JRE的lib目录下rt.jar文件中
    2. 扩展类加载器Extension ClassLoader
        负责JRE的扩展目录中jar包的加载。
        在JDK中JRE的lib目录下ext目录
    3. 系统类加载器System ClassLoader
        在JVM启动时加载来自java命令的class文件以及classpath环境变量所指定的jar包和类路径
</code></pre><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><pre><code>* JAVA反射机制是在运行状态中，
    对于任意一个类,都能够知道这个类的所有属性和方法；
    对于任意一个对象,都能够调用它的任意一个方法和属性；
* 条件：运行状态
  已知：一个类或一个对象(根本是已知.class文件)
  结果：得到这个类或对象的所有方法和属性
</code></pre><h4 id="class文件的产生过程"><a href="#class文件的产生过程" class="headerlink" title="class文件的产生过程"></a>class文件的产生过程</h4><pre><code>* Class对象是在加载类时由Java虚拟机以及通过调用类加载器中的defineClass方法自动构造的
</code></pre><h4 id="Class文件对象的获得"><a href="#Class文件对象的获得" class="headerlink" title="Class文件对象的获得"></a>Class文件对象的获得</h4><pre><code>1. 对象获取(通过Object类中的getClass()方法)
2. 类名获取(任意数据类型都具备一个class静态属性)
3. Class类的静态方法获取(通过Class类中的方法)
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>.对象获取</div><div class="line">Person p = <span class="keyword">new</span> Person();</div><div class="line"><span class="comment">//调用父类方法getClass()</span></div><div class="line">Class c1 =  p.getClass();</div><div class="line">System.out.println(c1);</div><div class="line"></div><div class="line"><span class="number">2</span>.类名获取</div><div class="line"><span class="comment">//每个类型,包括基本和引用,都会赋予这个类型一个静态的属性,属性名字就叫class</span></div><div class="line">Class c2 = Peron.class;</div><div class="line">Class d1 = <span class="keyword">double</span>.class;</div><div class="line">System.out.println(c2);</div><div class="line">System.out.println(d1);<span class="comment">//打印结果是double</span></div><div class="line"></div><div class="line"><span class="number">3</span>.静态方法获取Class.forName(String classname)</div><div class="line"><span class="comment">//字符串的类名:要加上包名</span></div><div class="line">Class c3 = Class.forName(<span class="string">"com.geekhoon.demo1.Person"</span>);</div><div class="line">System.out.println(c3);</div><div class="line"></div><div class="line">打印结果都是:<span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">geekhoon</span>.<span class="title">demo01</span>.<span class="title">Person</span></span></div></pre></td></tr></table></figure>
<h3 id="通过反射获取无参构造方法并使用"><a href="#通过反射获取无参构造方法并使用" class="headerlink" title="通过反射获取无参构造方法并使用"></a>通过反射获取无参构造方法并使用</h3><pre><code>* Class中方法:
    1. public Constructor&lt;?&gt;[] getConstructors(): 获取所有的public修饰的构造方法
    2. public Constructor&lt;T&gt; getConstructor(Class&lt;?&gt;... parameterTypes) :
        获取public修饰, 指定参数类型所对应的构造方法
        不传参数得到无参构造方法
* Constructor类中方法:
    1. public T newInstance(Object... initargs) :
        使用此Constructor对象表示的构造方法来创建该构造方法的声明类的新实例
        并用指定的初始化参数初始化该实例
        因为是无参构造,所以不传参数
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	<span class="comment">//获取Class对象</span></div><div class="line">	Class c = Class.forName(<span class="string">"com.geekhoon.demo01.Person"</span>);</div><div class="line"><span class="comment">//1.获取class文件对象中所有公共的构造方法: Constructor[] getConstructors()</span></div><div class="line"><span class="comment">//返回值是Constructor类型数组</span></div><div class="line">	Constructor[] cons = c.getConstructors();</div><div class="line">	<span class="keyword">for</span> (Constructor con : cons) &#123;</div><div class="line">		System.out.println(con);<span class="comment">//打印的是所有公共构造方法名</span></div><div class="line">	&#125;</div><div class="line"><span class="comment">//2.获取指定的构造方法  ----&gt; 获取空参数构造方法: Constructor getConstructor()</span></div><div class="line">	Constructor con = c.getConstructor();</div><div class="line">	System.out.println(con);<span class="comment">//打印空参构造方法名</span></div><div class="line"><span class="comment">//运行空参构造方法,使用的是Constructor类方法newInstance()</span></div><div class="line"><span class="comment">//创建该构造方法的声明类的新实例,new了一个Person对象</span></div><div class="line"><span class="comment">//运行获取到的构造方法,返回值是Object类型对象</span></div><div class="line">	<span class="comment">//相当于Object obj = new Person();</span></div><div class="line">	Object obj = con.newInstance();</div><div class="line"><span class="comment">//要调用Person类的方法,需要进行向下转型</span></div><div class="line">	Person p = (Person) obj;</div><div class="line">	p.eat();</div><div class="line">	System.out.println(obj);</div><div class="line"><span class="comment">//因为重写了toString(),打印结果是Person [name=null, age=0]</span></div><div class="line"><span class="comment">//没有重写的话,打印的则是p的地址</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="获取无参构造方法并使用的快捷方式"><a href="#获取无参构造方法并使用的快捷方式" class="headerlink" title="获取无参构造方法并使用的快捷方式"></a>获取无参构造方法并使用的快捷方式</h4><pre><code>* 前提:
    1. 被反射的类,必须具有空参数构造方法
    2. 构造方法权限必须是public,本包下可以使用默认default
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	Class c = Class.forName(<span class="string">"com.geekhoon.demo01.Person"</span>);</div><div class="line">	<span class="comment">//使用Class的newInstance方法,直接创建被反射类的对象实例</span></div><div class="line">	Object obj = c.newInstance();</div><div class="line">	System.out.println(obj);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="通过反射获取有参构造方法并使用"><a href="#通过反射获取有参构造方法并使用" class="headerlink" title="通过反射获取有参构造方法并使用"></a>通过反射获取有参构造方法并使用</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">public static void main(String[] args) throws Exception &#123;</div><div class="line">	Class c = Class.forName("com.geekhoon.demo01.Person");</div><div class="line">//getConstructor(),参数列表中传递的是构造方法对应的类型</div><div class="line">//不可以直接写String,int,因为参数是字节码文件对象类型,加上.class</div><div class="line">	Constructor con = c.getConstructor(String.class,int.class);</div><div class="line">//运行构造方法newInstance(),参数列表中传递的是实际参数,进行赋值	</div><div class="line">	Object obj = con.newInstance("张三",20);</div><div class="line">	System.out.println(obj);</div><div class="line">&#125;</div><div class="line">```	</div><div class="line">### 通过反射获取私有构造方法并使用 ###</div><div class="line">	* 暴力反射,破坏了程序的封装性,安全性</div><div class="line">	* Class类中方法:</div><div class="line">		1. Constructor[] getDeclaredConstructors(): 获取所有构造方法,包括私有</div><div class="line">		2. Constructor getDeclaredConstructor(Class...c): 获取指定参数列表的构造方法</div><div class="line">	* Constructor父类</div><div class="line">		1. public void setAccessible(boolean flag): </div><div class="line">			flag为true,可以保证私有构造方法的运行(取消了运行时期的权限检查)</div><div class="line">```java</div><div class="line">public static void main(String[] args) throws Exception &#123;</div><div class="line">	Class c = Class.forName("com.geekhoon.demo01.Person");</div><div class="line">	//获取指定参数列表的构造方法</div><div class="line">	Constructor con = c.getDeclaredConstructor(int.class,String.class);</div><div class="line">	//Constructor父类AccessibleObject的方法setAccessible(boolean b)		</div><div class="line">	con.setAccessible(true);</div><div class="line">	</div><div class="line">	Object obj = con.newInstance(10,"李四");</div><div class="line">	System.out.println(obj);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="反射获取成员变量-并修改值"><a href="#反射获取成员变量-并修改值" class="headerlink" title="反射获取成员变量,并修改值"></a>反射获取成员变量,并修改值</h3><pre><code>* Class类方法:
    1. public Field[] getFields()
        返回值是Field[],反映此Class对象所表示的类或接口的所有可访问公共字段
    2. public Field getField(String name): 传递字符串类型的变量名 
        返回值是Field，反映此Class对象所表示的类或接口的指定公共成员字段
* Filed类方法:
    1. void set(Object obj,Object value): 修改成员变量的值
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	Class c = Class.forName(<span class="string">"com.geekhoon.demo01.Person"</span>);</div><div class="line">	<span class="comment">//使用空参构造创建对象</span></div><div class="line">	Object obj = c.newInstance();</div><div class="line">	</div><div class="line">	<span class="comment">//获取指定的公共成员变量String name</span></div><div class="line">	Field field = c.getField(<span class="string">"name"</span>);</div><div class="line">	<span class="comment">//修改成员变量的值</span></div><div class="line">	field.set(obj, <span class="string">"王五"</span>);</div><div class="line">	<span class="comment">//打印对象</span></div><div class="line">	System.out.println(obj);<span class="comment">//Person [name=王五, age=0]</span></div><div class="line">	</div><div class="line">	<span class="comment">//获取私有的成员变量age</span></div><div class="line">	Field field2 = c.getDeclaredField(<span class="string">"age"</span>);</div><div class="line">	<span class="comment">//将私有权限去除</span></div><div class="line">	field2.setAccessible(<span class="keyword">true</span>);</div><div class="line">	<span class="comment">//设置值</span></div><div class="line">	field2.set(obj, <span class="number">22</span>);</div><div class="line">	<span class="comment">//打印对象</span></div><div class="line">	System.out.println(obj);<span class="comment">//Person [name=王五, age=22]</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="反射获取空参成员方法并运行"><a href="#反射获取空参成员方法并运行" class="headerlink" title="反射获取空参成员方法并运行"></a>反射获取空参成员方法并运行</h3><pre><code>* Class类方法:
    1. Method getMethod(String methodName,Class...c):获取class对象中指定的成员方法
        methodName:获取的方法名
        Class...c:参数列表
    2. Method[] getMethods()获取的是class文件中所有的公共成员方法,包括继承的
* Method类方法:
    1. Object invoke(Object obj,Object...o): 运行成员方法
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	Class c = Class.forName(<span class="string">"com.geekhoon.demo01.Person"</span>);</div><div class="line">	Object obj = c.newInstance();</div><div class="line">	<span class="comment">//获取class对象中的所有公共成员方法</span></div><div class="line">	<span class="comment">//Method[] getMethods()获取的是class文件中所有的公共成员方法,包括继承的</span></div><div class="line">	Method[] methods = c.getMethods();</div><div class="line">	<span class="keyword">for</span> (Method method : methods) &#123;</div><div class="line">		System.out.println(method);</div><div class="line">	&#125;</div><div class="line">	System.out.println(<span class="string">"======分割线======"</span>);</div><div class="line"></div><div class="line">	<span class="comment">//获取class对象中指定的成员方法</span></div><div class="line">	<span class="comment">//Method getMethod(String methodName,Class...c)</span></div><div class="line">	<span class="comment">//methodName:获取的方法名 </span></div><div class="line">	<span class="comment">//Class...c:参数列表</span></div><div class="line">	Method method = c.getMethod(<span class="string">"eat"</span>);</div><div class="line">	<span class="comment">//使用Method类中的方法: Object invoke(Object obj,Object...o)</span></div><div class="line">	<span class="comment">//运行成员方法:</span></div><div class="line">	method.invoke(obj);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="反射获取有参成员方法并运行"><a href="#反射获取有参成员方法并运行" class="headerlink" title="反射获取有参成员方法并运行"></a>反射获取有参成员方法并运行</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">	Class c = Class.forName(<span class="string">"com.geekhoon.demo01.Person"</span>);</div><div class="line">	Object obj = c.newInstance();</div><div class="line">	<span class="comment">//调用getMethod()获取指定成员方法</span></div><div class="line">	Method method = c.getMethod(<span class="string">"sleep"</span>, String.class,<span class="keyword">int</span>.class);</div><div class="line">	<span class="comment">//调用Method类的方法invoke()运行sleep方法</span></div><div class="line">	method.invoke(obj, <span class="string">"睡觉"</span>,<span class="number">100</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="泛型擦除"><a href="#泛型擦除" class="headerlink" title="泛型擦除"></a>泛型擦除</h3><pre><code>* 集合中的泛型都是伪泛型,即在编译后的.class文件里面是没有泛型的
  所以利用反射,拿到集合类class对象,直接调用add方法,而不是通过实例对象调用add
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test08</span> </span>&#123;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 定义集合类,泛型是String</div><div class="line">	 * 要求: 向集合中添加Integer类型数据</div><div class="line">	 * 步骤: </div><div class="line">	 * 1. 通过反射,获取集合ArrayList类的class文件对象</div><div class="line">	 * 2. 通过class文件对象,调用add方法</div><div class="line">	 * </div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">		list.add(<span class="string">"a"</span>);</div><div class="line">		<span class="comment">//通过反射,获取class文件对象</span></div><div class="line">		Class c = list.getClass();</div><div class="line">		<span class="comment">//调用add方法</span></div><div class="line">		Method method = c.getMethod(<span class="string">"add"</span>, Object.class);</div><div class="line">		<span class="comment">//运行add方法</span></div><div class="line">		method.invoke(list, <span class="number">150</span>);</div><div class="line">		<span class="keyword">for</span> (Object o : list) &#123;</div><div class="line">			System.out.println(o);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="反射通过配置文件来决定运行的步骤"><a href="#反射通过配置文件来决定运行的步骤" class="headerlink" title="反射通过配置文件来决定运行的步骤"></a>反射通过配置文件来决定运行的步骤</h3><pre><code>* 通过配置文件得到类名和要运行的方法名,用反射的操作类名得到对象和调用方法
* 步骤:
    1. 准备配置文件,键值对
    2. IO流读取配置文件
    3. 文件中的键值对存储到集合Properties中,集合保存的键值对,就是类名和方法名
    4. 反射获取指定类的class文件对象
    5. 通过class文件对象,获取指定的方法
    6. 运行方法
</code></pre><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">配置文件config.properties: </div><div class="line">#className=com.geekhoon.demo.Person</div><div class="line">#methodName=eat</div><div class="line">#className=com.geekhoon.demo.Student</div><div class="line">#methodName=study</div><div class="line">className=com.geekhoon.demo.Worker</div><div class="line">methodName=work</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//代码:</span></div><div class="line"><span class="keyword">package</span> com.geekhoon.demo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.FileReader;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="comment">//IO流读取配置文件</span></div><div class="line">		FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"config.properties"</span>);</div><div class="line">		<span class="comment">//创建集合对象</span></div><div class="line">		Properties pro = <span class="keyword">new</span> Properties();</div><div class="line">		<span class="comment">//调用load()加载流对象</span></div><div class="line">		pro.load(fr);</div><div class="line">		fr.close();</div><div class="line">		<span class="comment">//通过键获取值</span></div><div class="line">		String className = pro.getProperty(<span class="string">"className"</span>);</div><div class="line">		String methodName = pro.getProperty(<span class="string">"methodName"</span>);</div><div class="line">		<span class="comment">//反射获取指定类的class文件对象</span></div><div class="line">		Class c = Class.forName(className);</div><div class="line">		Object obj = c.newInstance();</div><div class="line">		<span class="comment">//获取指定方法</span></div><div class="line">		Method method = c.getMethod(methodName);</div><div class="line">		<span class="comment">//运行方法</span></div><div class="line">		method.invoke(obj);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"人在吃饭"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"学生在学习"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"工人在工作"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;类加载器&quot;&gt;&lt;a href=&quot;#类加载器&quot; class=&quot;headerlink&quot; title=&quot;类加载器&quot;&gt;&lt;/a&gt;类加载器&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;* 要使用某个类时,如果该类还未被加载到内存中,
  则系统会通过加载,连接,初始化三步来实现对这个类进行初始化。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="JAVA基础" scheme="https://geekhoon.github.io/categories/JAVA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JAVA基础语法" scheme="https://geekhoon.github.io/tags/JAVA%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
      <category term="反射" scheme="https://geekhoon.github.io/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>JDBC</title>
    <link href="https://geekhoon.github.io/2017/03/01/19-JDBC/"/>
    <id>https://geekhoon.github.io/2017/03/01/19-JDBC/</id>
    <published>2017-03-01T01:09:43.000Z</published>
    <updated>2017-03-30T12:38:53.734Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JUnit"><a href="#JUnit" class="headerlink" title="JUnit"></a>JUnit</h3><pre><code>* JUnit是一个Java语言的单元测试框架,属于第三方工具,需要导入jar包
* Ecilpse中已经集成了JUnit作为单元测试工具,不需要导入jar包
* 进行单元测试,可以不写main方法
* 编写测试类:
    测试方法要求:
        1. 类名不能是Test
        2. 方法名不能是静态
        3. 方法不能有返回值
        4. 方法不能有参数列表
</code></pre><a id="more"></a>    
<pre><code>* @Test : 注解
* 运行:
    方式1：选定测试方法名 ---- 右击 ---- run as ---- Junit test
    方式2：选定类名 --------- 右击 ---- run as ---- Junit test\
* @Before ----- 测试函数执行前调用
* @After ------ 测试函数执行完调用
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JUnitDemo</span> </span>&#123;</div><div class="line">	<span class="meta">@Before</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"测试开始...."</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span></span>&#123;<span class="comment">//测试方法</span></div><div class="line">		MyMath.add(<span class="number">1</span>, <span class="number">2</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testChu</span><span class="params">()</span></span>&#123;<span class="comment">//测试方法</span></div><div class="line">		MyMath.chu(<span class="number">10</span>, <span class="number">0</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@After</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">end</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"测试结束...."</span>);</div><div class="line">	&#125;</div><div class="line">&#125;	</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMath</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>&#123;</div><div class="line">		<span class="keyword">int</span> result = num1 + num2;</div><div class="line">		System.out.println(<span class="string">"和:"</span> + result);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">chu</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>&#123;</div><div class="line">		<span class="keyword">int</span> result = num1 / num2;</div><div class="line">		System.out.println(<span class="string">"商:"</span> + result);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><pre><code>* Java Data Base Connectivity
* 一种用于执行SQL语句的Java API
* Java提供的访问数据库规范
* 可以为多种关系数据库提供统一访问
* 由一组用Java语言编写的类和接口组成.
* 原理: 
    * Java提供访问数据库规范称为JDBC,JDBC需要连接驱动,驱动是生产厂商提供规范的实现类
    * JDBC是接口,驱动是接口的实现,没有驱动将无法完成数据库连接
    * 每个数据库厂商都需要提供自己的驱动，用来连接自己公司的数据库
* 导入驱动jar包
    * 建lib目录，用于存放当前项目需要的所有jar包
    * 选择jar包，右键执行build path / Add to Build Path
</code></pre><h4 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h4><pre><code>1.注册驱动
    告知JVM使用的是哪一个数据库的驱动
2.获取数据库的连接对象
    使用JDBC中的类,完成对MySQL数据库的连接
3.获得执行者对象
    通过连接对象获取对SQL语句的执行者对象
4.执行sql语句
    使用执行者对象,向数据库执行SQL语句
    获取到数据库的执行后的结果
5.处理结果
6.释放资源
    close()
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.sql.Connection;</div><div class="line"><span class="keyword">import</span> java.sql.DriverManager;</div><div class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</div><div class="line"><span class="keyword">import</span> java.sql.ResultSet;</div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</div><div class="line"><span class="comment">/*</span></div><div class="line"> * 1.注册驱动</div><div class="line"> *   Driver是一个接口: 每个驱动程序类必须实现的接口</div><div class="line"> *   方式一: 使用java.sql.DriverManager类的静态方法registerDriver(Driver driver)</div><div class="line"> *   	         参数是MySQL驱动程序的Driver实现类,这种方式会new两个Driver对象,不推荐使用</div><div class="line"> *   方式二: 使用反射技术, 将驱动类加入到内容,如下: </div><div class="line"> */</div><div class="line">		Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</div><div class="line"><span class="comment">/*</span></div><div class="line"> * 2.获取数据库的连接对象</div><div class="line"> * 	 使用DriverManager类中静态方法static Collection getConnection()</div><div class="line"> */</div><div class="line">		String url = <span class="string">"jdbc:mysql://localhost:3306/mybase"</span>;</div><div class="line">		String user = <span class="string">"root"</span>;</div><div class="line">		String password = <span class="string">"root"</span>;</div><div class="line">		Connection con = DriverManager.getConnection(url, user, password);</div><div class="line"><span class="comment">/*</span></div><div class="line"> * 3.获得执行者对象</div><div class="line"> */</div><div class="line"><span class="comment">//Statement stat = con.createStatement();这种接口对象有安全隐患(SQL注入攻击)</span></div><div class="line">		String sql = <span class="string">"INSERT INTO sort(sname,sprice,sdesc) VALUES(?,?,?)"</span>;</div><div class="line"><span class="comment">//使用Statement的子类接口prepareStatement可有效避免安全隐患,但注意sql语句的编写</span></div><div class="line"><span class="comment">//要赋值的列如上或者判断条件中要用值,不要直接写出值,而要用?占位,如select * from sort where sid = 1</span></div><div class="line"><span class="comment">//这里就不能写1, 要写成select * from sort where sid =?</span></div><div class="line"><span class="comment">//如果是select * from sort,不需要值,那不用写setObject()</span></div><div class="line"><span class="comment">//通过PreparedStatement对象的setObject()进行赋值</span></div><div class="line"><span class="comment">//第一个参数是占位符的位置,从1开始,第二个是值</span></div><div class="line"><span class="comment">//使用的是Connection数据库连接对象的方法,获取的是PreparedStatement接口的实现类,</span></div><div class="line"><span class="comment">//也叫sql语句的预编译对象</span></div><div class="line"><span class="comment">//PreparedStatement prepareStatement(String sql)</span></div><div class="line">		<span class="comment">//PrepareStatement接口预编译SQL语句</span></div><div class="line">		PreparedStatement pds = con.prepareStatement(sql);</div><div class="line">		pds.setObject(<span class="number">1</span>, <span class="string">"汽车用品"</span>);</div><div class="line">		pds.setObject(<span class="number">2</span>, <span class="number">3220</span>);</div><div class="line">		pds.setObject(<span class="number">3</span>, <span class="string">"涨价"</span>);</div><div class="line"><span class="comment">/*</span></div><div class="line"> * 4.执行sql语句</div><div class="line"> *   有两点:</div><div class="line"> *   	1.是增删改语句:调用执行者对象的executeUpdate(),返回值是受影响行数:</div><div class="line"> *   	  int row = pds.executeUpdate();</div><div class="line"> *   	     也可以不用接收返回值,直接写成pds.executeUpdate()</div><div class="line"> *   	2.是查询语句:调用执行者对象的executeQuery(),返回值是结果集</div><div class="line"> */</div><div class="line">		ResultSet rs = pds.executeQuery();</div><div class="line"><span class="comment">/*</span></div><div class="line"> * 5.处理结果集</div><div class="line"> *   ResultSet接口方法 boolean next() 返回true,有结果集,返回false没有结果集</div><div class="line"> */</div><div class="line"><span class="comment">//特别注意:　rs.next()判断的是结果集,不是数据表,是根据select条件查询出的内容,可能一条或多条</span></div><div class="line">		<span class="keyword">while</span>(rs.next())&#123;</div><div class="line">			<span class="comment">//获取每列数据,使用是ResultSet接口的方法 getXX方法参数中,建议写String列名</span></div><div class="line">			System.out.println(rs.getInt(<span class="string">"sid"</span>) + <span class="string">"  "</span> + rs.getString(<span class="string">"sname"</span>) </div><div class="line">				+ <span class="string">"  "</span> + rs.getDouble(<span class="string">"sprice"</span>) + <span class="string">"  "</span> + rs.getString(<span class="string">"sdesc"</span>));</div><div class="line">		&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"> * 6.释放资源</div><div class="line"> */</div><div class="line">		rs.close();</div><div class="line">		pds.close();</div><div class="line">		con.close();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="JDBC使用细节"><a href="#JDBC使用细节" class="headerlink" title="JDBC使用细节"></a>JDBC使用细节</h3><pre><code>1. 所有相关类导包 ---- java.sql.*;
2. 导入 com.mysql.*;也没问题
       问什么？
       a)、因为所需要的对象都是 jar 包中的类对应的对象
       b)、jar 包中的类实现了 java.sql.xxx 这些接口
                    常规使用：父类声明指向子类实现 ---- 使用了多态
                    非常规使用：子类声明指向子类实现

3. 既然导入jar包实现也可以，为什么一再强调导 java.sql?
      前提：
          开发时是由 MySQL 数据库,部署时使用 Oracle 数据库
  场景1：
       开发使用MySQL:
          1)、导入 MySQL jar 包
          2)、也导入MySQL jar 包对应的类
           部署时是由Oracle:
           1)、导入Oracle jar 包
           2)、将导的包换成 Oracle 的 （相当麻烦）

  场景2 ---- 多态的好处： 实现了程序的可插拔设计   
    开发时使用MySQL:
     1)、导入 MySQL jar 包
     2)、导包导 JDK 内置的
    部署时是由Oracle:
       1)、导入Oracle jar 包
</code></pre><h3 id="SQL注入攻击"><a href="#SQL注入攻击" class="headerlink" title="SQL注入攻击"></a>SQL注入攻击</h3><pre><code>* 由用户输入用户名,密码来查询数据库中是否存在该用户的sql语句如下:
SELECT * FROM 用户表 WHERE NAME = 用户输入的用户名 AND PASSWORD = 用户输的密码; 
* 不管输入的用户名是XXXX,密码是XXX,只要密码格式为 XXX&apos; OR &apos;1&apos;=&apos;1 或 XXX&apos; OR &apos;1 = 1 
* 真正执行的代码变为:
SELECT * FROM 用户表 WHERE NAME = &apos;XXXX&apos; AND PASSWORD =&apos;XXX&apos; OR &apos;1&apos;=&apos;1&apos;;或
SELECT * FROM 用户表 WHERE NAME = &apos;XXXX&apos; AND PASSWORD =&apos;XXX&apos; OR &apos;1 = 1&apos;;
where条件都为true, 永远都可以查询出结果,那么用户就直接登录成功了,这就是SQL注入攻击问题
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</div><div class="line">		String url = <span class="string">"jdbc:mysql://localhost:3306/mybase"</span>;</div><div class="line">		String username = <span class="string">"root"</span>;</div><div class="line">		String password = <span class="string">"root"</span>;</div><div class="line">		Connection con = DriverManager.getConnection(url, username, password);</div><div class="line">		Statement stat = con.createStatement();</div><div class="line">		</div><div class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">		String user = sc.nextLine();</div><div class="line">		String pass = sc.nextLine();</div><div class="line">		</div><div class="line">		<span class="comment">//执行SQL语句,数据表,查询用户名和密码,如果存在,登录成功,不存在登录失败</span></div><div class="line">		String sql = <span class="string">"SELECT * FROM users WHERE username='"</span>+user+<span class="string">"' AND PASSWORD='"</span>+pass+<span class="string">"'"</span>;</div><div class="line">		System.out.println(sql);</div><div class="line">		ResultSet rs = stat.executeQuery(sql);</div><div class="line">		<span class="keyword">while</span>(rs.next())&#123;</div><div class="line">			<span class="comment">//进入while循环意味着根据用户名密码查询到信息了,说明登录成功了</span></div><div class="line">			<span class="comment">//任意用户名,只要密码格式如:  任意密码'or'1=1</span></div><div class="line">			<span class="comment">//都可以登录成功</span></div><div class="line">			System.out.println(rs.getString(<span class="string">"username"</span>)+<span class="string">"   "</span>+rs.getString(<span class="string">"password"</span>));</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		rs.close();</div><div class="line">		stat.close();</div><div class="line">		con.close();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//数据表中正确的用户名密码有:</span></div><div class="line">  用户名 密码</div><div class="line">	a	  <span class="number">1</span></div><div class="line">	b	  <span class="number">2</span></div><div class="line">用户名输入c,密码输入c<span class="string">' or '</span><span class="number">1</span>=<span class="number">1</span> ,就可以打印出所有用户信息了</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">防止SQL注入问题,解决方案:</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="comment">//1.注册驱动</span></div><div class="line">		Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</div><div class="line">		<span class="comment">//2.获取连接</span></div><div class="line">		String url = <span class="string">"jdbc:mysql://localhost:3306/mybase"</span>;</div><div class="line">		String user = <span class="string">"root"</span>;</div><div class="line">		String password = <span class="string">"root"</span>;</div><div class="line">		Connection con = DriverManager.getConnection(url, user, password);</div><div class="line">		</div><div class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">		String username = sc.nextLine();</div><div class="line">		String pass = sc.nextLine();</div><div class="line">		</div><div class="line">		<span class="comment">//执行sql语句</span></div><div class="line">		String sql = <span class="string">"select * from users where username = ? and password = ?"</span>;</div><div class="line">		</div><div class="line">		<span class="comment">//3.获取执行者对象</span></div><div class="line">		PreparedStatement pds = con.prepareStatement(sql);</div><div class="line">		pds.setObject(<span class="number">1</span>, username);</div><div class="line">		pds.setObject(<span class="number">2</span>, pass);</div><div class="line">		</div><div class="line">		ResultSet rs = pds.executeQuery();</div><div class="line">		<span class="keyword">while</span>(rs.next())&#123;</div><div class="line">			System.out.println(rs.getString(<span class="string">"username"</span>)+<span class="string">"  "</span>+rs.getString(<span class="string">"password"</span>)+<span class="string">"  "</span>);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		rs.close();</div><div class="line">		pds.close();</div><div class="line">		con.close();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="JDBC工具类"><a href="#JDBC工具类" class="headerlink" title="JDBC工具类"></a>JDBC工具类</h3><h4 id="普通工具类-普通的测试"><a href="#普通工具类-普通的测试" class="headerlink" title="普通工具类+普通的测试"></a>普通工具类+普通的测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * JDBC工具类</div><div class="line"> * 内容:</div><div class="line"> * 1.私有化构造方法. 不允许在其他类中创建对象！直接类名点调用方法即可</div><div class="line"> * 2.声明一个Connection对象</div><div class="line"> * 3.静态代码块</div><div class="line"> * 4.公共方法返回Connection对象</div><div class="line"> * 5.释放资源方法</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">JDBCUtils</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Connection con;</div><div class="line">	</div><div class="line">	<span class="keyword">static</span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//1.注册驱动</span></div><div class="line">			Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</div><div class="line">			<span class="comment">//2.获得数据库连接</span></div><div class="line">			String url = <span class="string">"jdbc:mysql://localhost:3306/mybase"</span>;</div><div class="line">			String user = <span class="string">"root"</span>;</div><div class="line">			String password = <span class="string">"root"</span>;</div><div class="line">		    con = DriverManager.getConnection(url, user, password);</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e+<span class="string">"数据库连接失败"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> con;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection con, Statement state,ResultSet rs)</span></span>&#123;</div><div class="line">		<span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				rs.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (state != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				state.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (con != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				con.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection con, Statement state)</span></span>&#123;</div><div class="line">		<span class="keyword">if</span> (state != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				state.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (con != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				con.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"> * 对JDBC工具类进行测试</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="comment">//调用JDBCUtils工具类中的静态方法，获取数据库连接</span></div><div class="line">		Connection con = JDBCUtils.getConncetion();</div><div class="line">		<span class="comment">//3.获取执行者对象</span></div><div class="line">		String sql = <span class="string">"SELECT * FROM sort"</span>;</div><div class="line">		PreparedStatement pst = con.prepareStatement(sql);</div><div class="line">		<span class="comment">//4.执行sql语句</span></div><div class="line">		ResultSet rs = pst.executeQuery();</div><div class="line">		<span class="comment">//5.处理结果集</span></div><div class="line">		<span class="keyword">while</span>(rs.next()) &#123;</div><div class="line">			System.out.println(rs.getInt(<span class="string">"sid"</span>) + <span class="string">"  "</span> + rs.getString(<span class="string">"sname"</span>) </div><div class="line">				+ <span class="string">"  "</span> + rs.getDouble(<span class="string">"sprice"</span>) + <span class="string">"  "</span> + rs.getString(<span class="string">"sdesc"</span>));</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//6.释放资源</span></div><div class="line">		JDBCUtils.close(con, pst, rs);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="读取配置文件工具类-普通的测试"><a href="#读取配置文件工具类-普通的测试" class="headerlink" title="读取配置文件工具类+普通的测试"></a>读取配置文件工具类+普通的测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div></pre></td><td class="code"><pre><div class="line">开发中获得连接的<span class="number">4</span>个参数(驱动,URL,用户名,密码)通常都存在配置文件中</div><div class="line">方便后期维护,程序如果需要更换数据库,只需要修改配置文件即可</div><div class="line"><span class="number">1</span>.配置文件database.properties中的内容:</div><div class="line">driverClass=com.mysql.jdbc.Driver</div><div class="line">url=jdbc:mysql:<span class="comment">//localhost:3306/mybase</span></div><div class="line">user=root</div><div class="line">password=root</div><div class="line"></div><div class="line"><span class="number">2</span>.读取配置文件工具类:</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.sql.Connection;</div><div class="line"><span class="keyword">import</span> java.sql.DriverManager;</div><div class="line"><span class="keyword">import</span> java.sql.ResultSet;</div><div class="line"><span class="keyword">import</span> java.sql.Statement;</div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"><span class="comment">/*</span></div><div class="line"> * JDBC读取配置文件工具类</div><div class="line"> * 1.私有化构造方法</div><div class="line"> * 2.声明所需的连接信息</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtilsConfig</span> </span>&#123;</div><div class="line">	<span class="comment">//1.私有化构造方法</span></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">JDBCUtilsConfig</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">	<span class="comment">//2.声明变量</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Connection con;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String driverClass;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String url;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String user;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String password;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">//3.静态代码块</span></div><div class="line">	<span class="keyword">static</span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//使用类的加载器, 加载配置文件,</span></div><div class="line">			<span class="comment">//配置文件一般放在src文件夹下</span></div><div class="line">			InputStream in = JDBCUtilsConfig.class.getClassLoader()</div><div class="line">						.getResourceAsStream(<span class="string">"database.properties"</span>);</div><div class="line">			<span class="comment">//创建Properties集合</span></div><div class="line">			Properties pro = <span class="keyword">new</span> Properties();</div><div class="line">			pro.load(in);</div><div class="line">			<span class="comment">//获取集合中的键值对</span></div><div class="line">			driverClass = pro.getProperty(<span class="string">"driverClass"</span>);</div><div class="line">			url = pro.getProperty(<span class="string">"url"</span>);</div><div class="line">			user = pro.getProperty(<span class="string">"user"</span>);</div><div class="line">			password = pro.getProperty(<span class="string">"password"</span>);</div><div class="line">			<span class="comment">//注册驱动</span></div><div class="line">			Class.forName(driverClass);</div><div class="line">			<span class="comment">//获取连接对象</span></div><div class="line">			con = DriverManager.getConnection(url, user, password);</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"数据库连接失败!"</span>);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//4.公共方法返回连接对象</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> con;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//5.释放资源</span></div><div class="line">	方式<span class="number">1</span>:</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection con, Statement state,ResultSet rs)</span></span>&#123;</div><div class="line">		<span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				rs.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (state != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				state.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (con != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				con.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection con, Statement state)</span></span>&#123;</div><div class="line">		<span class="keyword">if</span> (state != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				state.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (con != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				con.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	方式<span class="number">2</span>:(最全面稳妥的方式)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet rs,Statement sm,Connection con)</span></span>&#123;</div><div class="line">		<span class="comment">//注意try..catch..finally写法</span></div><div class="line">		<span class="comment">//下一个对象的关闭都在当前对象的finally中</span></div><div class="line">		<span class="keyword">try</span>&#123;</div><div class="line">			<span class="keyword">if</span>(rs != <span class="keyword">null</span>)&#123;</div><div class="line">				rs.close();</div><div class="line">				rs = <span class="keyword">null</span>;<span class="comment">//对象置为null,方便回收</span></div><div class="line">			&#125;</div><div class="line">		&#125;<span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">			e.printStackTrace();</div><div class="line">			<span class="comment">//如果某个对象关闭失败,抛运行时异常,程序关闭,对象也全部关闭</span></div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</div><div class="line">		&#125;<span class="keyword">finally</span>&#123;</div><div class="line">			<span class="keyword">try</span>&#123;</div><div class="line">				<span class="keyword">if</span>(sm != <span class="keyword">null</span>)&#123;</div><div class="line">					sm.close();</div><div class="line">					sm = <span class="keyword">null</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;<span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">				e.printStackTrace();</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</div><div class="line">			&#125;<span class="keyword">finally</span>&#123;</div><div class="line">				<span class="keyword">try</span>&#123;</div><div class="line">					<span class="keyword">if</span>(con != <span class="keyword">null</span>)&#123;</div><div class="line">						con.close();</div><div class="line">						con = <span class="keyword">null</span>;</div><div class="line">					&#125;</div><div class="line">				&#125;<span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">					e.printStackTrace();</div><div class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//重载</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement sm,Connection con)</span></span>&#123;</div><div class="line">		<span class="keyword">try</span>&#123;</div><div class="line">			<span class="keyword">if</span>(sm != <span class="keyword">null</span>)&#123;</div><div class="line">				sm.close();</div><div class="line">				sm = <span class="keyword">null</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;<span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">			e.printStackTrace();</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</div><div class="line">		&#125;<span class="keyword">finally</span>&#123;</div><div class="line">			<span class="keyword">try</span>&#123;</div><div class="line">				<span class="keyword">if</span>(con != <span class="keyword">null</span>)&#123;</div><div class="line">					con.close();</div><div class="line">					con = <span class="keyword">null</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;<span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">				e.printStackTrace();</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div><div class="line"><span class="number">3</span>.测试类:</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 对读取配置文件的工具类进行普通测试</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		Connection con = JDBCUtilsConfig.getConnection();</div><div class="line">		<span class="comment">//获取执行者对象</span></div><div class="line">		String sql = <span class="string">"SELECT * FROM sort"</span>;</div><div class="line">		PreparedStatement pst = con.prepareStatement(sql);</div><div class="line">		<span class="comment">//执行sql语句</span></div><div class="line">		ResultSet rs = pst.executeQuery();</div><div class="line">		<span class="comment">//处理结果集</span></div><div class="line">		<span class="keyword">while</span>(rs.next()) &#123;</div><div class="line">			System.out.println(rs.getInt(<span class="string">"sid"</span>) + <span class="string">"  "</span> + rs.getString(<span class="string">"sname"</span>) </div><div class="line">			+ <span class="string">"  "</span> + rs.getDouble(<span class="string">"sprice"</span>) + <span class="string">"  "</span> + rs.getString(<span class="string">"sdesc"</span>));</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//释放资源</span></div><div class="line">		JDBCUtilsConfig.close(con, pst, rs);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="读取配置文件工具类-自定义对象存储测试"><a href="#读取配置文件工具类-自定义对象存储测试" class="headerlink" title="读取配置文件工具类+自定义对象存储测试"></a>读取配置文件工具类+自定义对象存储测试</h4><pre><code>* JDBC读取数据表sort,每行数据封装到Sort类的对象中
  将多个Sort类对象,存储到List集合中
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>.Sort类</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sort</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> sid;</div><div class="line">	<span class="keyword">private</span> String sname;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">double</span> sprice;</div><div class="line">	<span class="keyword">private</span> String sdesc;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Sort</span><span class="params">(<span class="keyword">int</span> sid, String sname, <span class="keyword">double</span> sprice, String sdesc)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.sid = sid;</div><div class="line">		<span class="keyword">this</span>.sname = sname;</div><div class="line">		<span class="keyword">this</span>.sprice = sprice;</div><div class="line">		<span class="keyword">this</span>.sdesc = sdesc;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Sort</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSid</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> sid;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSid</span><span class="params">(<span class="keyword">int</span> sid)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.sid = sid;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getSname</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> sname;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSname</span><span class="params">(String sname)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.sname = sname;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSprice</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> sprice;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSprice</span><span class="params">(<span class="keyword">double</span> sprice)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.sprice = sprice;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getSdesc</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> sdesc;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSdesc</span><span class="params">(String sdesc)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.sdesc = sdesc;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Sort [sid="</span> + sid + <span class="string">", sname="</span> + sname + <span class="string">", sprice="</span> + sprice</div><div class="line">				+ <span class="string">", sdesc="</span> + sdesc + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="number">2</span>.读取配置文件工具类同上</div><div class="line"><span class="number">3</span>.自定义对象存储测试</div><div class="line"><span class="comment">/*</span></div><div class="line"> * 对读取配置文件的工具类进行测试。使用自定义对象存储</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		Connection con = JDBCUtilsConfig.getConnection();</div><div class="line">		<span class="comment">//获取执行者对象</span></div><div class="line">		String sql = <span class="string">"SELECT * FROM sort"</span>;</div><div class="line">		PreparedStatement pst = con.prepareStatement(sql);</div><div class="line">		<span class="comment">//执行sql语句</span></div><div class="line">		ResultSet rs = pst.executeQuery();</div><div class="line">		<span class="comment">//创建list集合</span></div><div class="line">		ArrayList&lt;Sort&gt; list = <span class="keyword">new</span> ArrayList&lt;Sort&gt;();</div><div class="line">		<span class="comment">//处理结果集</span></div><div class="line">		<span class="keyword">while</span>(rs.next()) &#123;</div><div class="line">			list.add(<span class="keyword">new</span> Sort(rs.getInt(<span class="string">"sid"</span>), rs.getString(<span class="string">"sname"</span>), </div><div class="line">				rs.getDouble(<span class="string">"sprice"</span>), rs.getString(<span class="string">"sdesc"</span>)));</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//释放资源</span></div><div class="line">		JDBCUtilsConfig.close(con, pst, rs);</div><div class="line">		<span class="comment">//遍历集合</span></div><div class="line">		<span class="keyword">for</span> (Sort sort : list) &#123;</div><div class="line">			System.out.println(sort);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;JUnit&quot;&gt;&lt;a href=&quot;#JUnit&quot; class=&quot;headerlink&quot; title=&quot;JUnit&quot;&gt;&lt;/a&gt;JUnit&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;* JUnit是一个Java语言的单元测试框架,属于第三方工具,需要导入jar包
* Ecilpse中已经集成了JUnit作为单元测试工具,不需要导入jar包
* 进行单元测试,可以不写main方法
* 编写测试类:
    测试方法要求:
        1. 类名不能是Test
        2. 方法名不能是静态
        3. 方法不能有返回值
        4. 方法不能有参数列表
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="JAVA基础" scheme="https://geekhoon.github.io/categories/JAVA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="数据库" scheme="https://geekhoon.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据库</title>
    <link href="https://geekhoon.github.io/2017/02/28/18-MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://geekhoon.github.io/2017/02/28/18-MySQL数据库/</id>
    <published>2017-02-27T18:46:36.000Z</published>
    <updated>2017-03-28T13:17:10.877Z</updated>
    
    <content type="html"><![CDATA[<h3 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h3><pre><code>三种形式:
1. 变量
    1. 特点: 数据在内存中
    2. 问题: 不能持久化存储
2. IO流结合文件
    1. 特点: 数据存储在文件中,实现了持久化存储
    2. 问题: 数据存储在文件中,但是读取时,不同的实现可能效率差异比较大
3. 数据库
    数据库 = 文件存储数据 + 算法封装
</code></pre><a id="more"></a>    
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><pre><code>* 存储数据的仓库
* 数据库的本质就是文件存储
* 数据库管理系统DBMS(DataBase Management System): 操作和管理数据库的大型软件
* 常用数据库: 
    1. MySQL: 开源免费.被Oracle收购.MySQL6.x后开始收费
    2. Oracle: 收费的大型数据库
    3. DB2: IBM公司的收费数据库,常用于银行系统
    4. SQLServer: 微软,收费的中型数据库
    5. SyBase: 淡出历史舞台了
    6. SQLite: 嵌入式的小型数据库,应用于手机端

* dos窗口开关MySQL服务:
    开: net start mysql
    关: net stop mysql
* dos窗口登录MySQL:
    mysql -u用户名 -p密码
</code></pre><h3 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h3><pre><code>* 结构化查询语言,专门操作数据库的计算机语言
* 分类:
    1. DDL:数据定义语言,用来定义数据库对象: create,alter,drop
    2. DML:数据操作语言,用来对数据库中表的数据进行更新: insert,delete,update
    3. DCL:数据控制语言,用来定义数据库的访问权限和安全级别，及创建用户 
    4. DQL:数据查询语言,用来查询数据库中表的数据: select,from,where
* 语法:
    1. 可以单行或多行书写, 分号结尾
    2. 不区分大小写. 但关键字一般大写
* 注释：
    * 单行: --
    * 多行: /* ... */
* 数据类型
    * int: 整型
    * double: 浮点
    * varchar(M): 字符,M为0-65535之间的整数
    * date: 日期,只有年月日,没有时分秒: yyyy-MM-dd
    * datetime: 日期时间都有
</code></pre><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><pre><code>1. 创建数据库: create database geekhoon;
   创建数据库,并指定数据库中数据的编码: create database 数据库名 character set utf8;
   修改数据库编码集(不建议修改):alter database 数据库名 character set utf8;//注意不是utf-8
2. 查看MySQL服务器中所有数据库: show databases;
   查看某个数据库的定义的信息: show create database 数据;
3. 删除数据库: drop database 数据库名;
4. 使用数据库: use 数据库名;
5. 查看正在使用的数据库: select database();
</code></pre><h3 id="数据表操作"><a href="#数据表操作" class="headerlink" title="数据表操作"></a>数据表操作</h3><pre><code>1. 创建数据表: create table 表名(
                字段名1 数据类型 约束,
                字段名2 数据类型 约束,
                ...
                字段名n 数据类型 约束
              );
* 约束: 限制列可以使用的数据
    分类:    
        1. 主键约束 primary key: 非空 唯一. 通常没有实际意义.
            加上AUTO_INCREMENT可实现自增长
        2. 非空约束 not null
        3. 唯一约束 unique
        4. 外键约束 
        5. 检查 check(MySQL没有该约束)
2. 删除数据表: drop table 表名;
3. 查看数据库中的所有表: show tables;
4. 查看建表语句: show create table 表名;
5. 查看表结构: desc 表名;
6. 修改表结构:
    * 添加列: alter table 表名 add 列名 数据类型 约束;
    * 修改列: alter table 表名 modify 列名 数据类型 约束;
    * 修改列名: alter table 表名 change 旧列名 新列名 数据类型 约束;
    * 删除列: alter table 表名 drop 列名;
    * 修改表名: rename table 旧表名 to 新表名;
    * 修改表的字符集:alter table 表名 character set 字符集;
</code></pre><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">users</span>(</div><div class="line">	uid <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</div><div class="line">	uname <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">	uaddress <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></div><div class="line">);</div><div class="line"><span class="comment">-- 展示所有表</span></div><div class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLES</span>;</div><div class="line"><span class="comment">-- 显示表结构</span></div><div class="line">DESC users;</div></pre></td></tr></table></figure>
<h3 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h3><pre><code>1. 增加数据:(列名1为主键)
    * insert into 表名(列名1,列名2,列名3) values(值1,值2,值2);
    * insert into 表名(列名2,列名3) values (值2,值3); 省去主键不写
    * insert into 表名 values (全列值); 包括主键值也要写
    * 批量写入数据: insert into 表名 (列名1,列名2,列名3) values (值1,值2,值3),(值1,值2,值3),...;
2. 修改数据: (在数据原有基础上修改)
    * update 表名 set 列1=值1,列2=值2 where 条件
    * 条件的写法: 
        1. id = 5
        2. id &lt;&gt; 5 : 不等于5
        3. id &lt;= 5
        4. or : 或
        5. and : 与
        6. not : 非
        7. id in (1,3,4,5,6) : 表示包含的id
        8. id not in (1,3,4,5,6)
3. 删除数据: delete from 表名 where 条件
    truncate table 表名; 或 truncate 表名; 都可以
    * 删除表中所有记录使用delete from 表名, 还是用truncate table 表名 ?
      delete是一条一条的删, 不清空AUTO_INCREMENT记录数
      truncate直接将表删除,重新建表,AUTO_INCREMENT将置为0,重新开始;效率比delete高
4. 查询数据
    * 查询指定列的数据: select 列名1,列名2 from 表名
    * 查询全部列的数据: select * from 表名
    * 查询去掉重复数据: select distinct 列名 from 表名
    * 查询重新命名列: select 列名 AS 新名 from 表名
    * 查询时直接运算: select 列名1,列名2+1000 as 新名 from 表名 : 列名2进行了运算,并用新名查询结果
    * 查询表中第五到第十条数据: select * from 表名 limit(4,6);
        limit(m,n): 第一个数指开始的索引,从0开始,第二个参数是取得条数
* 命令行乱码问题: 
    * mysql的客户端编码的问题我们的是utf8,而系统的cmd窗口编码是gbk,在cmd下输出中文会乱码
    * 解决方案: 修改mysql客户端编码。
    * dos下:  set character_set_results=gbk;  或  set names gbk;
</code></pre><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><pre><code>* 格式: select 字段  from 表名  where 条件;    
* 比较运算符: 
</code></pre><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">* &gt;  &lt;  &lt;=   &gt;=   =  &lt;&gt;</div><div class="line">* BETWEEN  ...AND... :显示在某一区间的值(含头含尾),效率比用大于小于号判断低</div><div class="line">* IN(set) :显示在in列表中的值，例：in(100,200),效率比用or高</div><div class="line">* LIKE :模糊查询</div><div class="line">	* Like语句中有两个通配符：</div><div class="line">	% 用来匹配多个字符；例 '%a%';</div><div class="line">	_ 用来匹配一个字符。例 'a_';</div><div class="line">* is null :判断是空</div><div class="line">* is not null ":判断不为空</div><div class="line">	* SELECT * FROM phones WHERE xinghao IS NOT NULL;</div><div class="line">	* SELECT * FROM phones WHERE NOT xinghao IS NULL;</div><div class="line">	  注意：效果上二者等价 效率上:前者高</div></pre></td></tr></table></figure>
<h3 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h3><pre><code>* order by 列名 [desc][asc]:排序要放在最后
* desc 降序
* asc 升序,默认升序
* 升序: select * from 表名 order by 列名
* 降序: select * from 表名 order by 列名 desc;
</code></pre><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><pre><code>* count：统计指定列不为NULL的记录行数；
* sum：计算指定列的数值和，如果指定列类型不是数值类型,则计算结果为0；
* max：计算指定列的最大值，如果指定列是字符串类型，那么使用字符串类型排序运算；
* min：计算指定列的最小值，如果指定列是字符串类型，那么使用字符串排序运算；
* avg：计算指定列的平均值，如果指定列类型不是数值类型，那么计算结果为0；
</code></pre><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 统计行数</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">as</span> <span class="string">'count'</span> <span class="keyword">from</span> 表名;</div><div class="line"><span class="comment">-- 求和</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">sum</span>(money) <span class="keyword">from</span> zhangwu <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'%支出%'</span>;</div><div class="line"><span class="comment">-- 求最大值</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">max</span>(money) <span class="keyword">from</span> zhangwu;//null值不会计算</div><div class="line"><span class="comment">-- 求平均值</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(money) <span class="keyword">from</span> zhangwu;//null值不会计算</div></pre></td></tr></table></figure>
<h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><pre><code>* 格式:
    select 列1,列2 from 表名 where 条件 group by 列名 having 条件 order by 列名;
* group by 被分组的列名 : 要放在最后,有排序的话,排序放最后
* having 和 where的区别:
    1. having是在分组后对数据进行过滤
        where是在分组前对数据进行过滤
    2. having后面可以使用聚合函数进行判断
        where后面不可以使用聚合函数进行判断,聚合函数的新名也不可以
* 被分组的列也要在select中
* 分组查询一般都跟随聚合函数
</code></pre><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">-- 分组查询,不跟聚合函数:</div><div class="line">SELECT * FROM phones GROUP BY pinpai;</div><div class="line">#效果：按照品牌分组之后,只取出每一组的第一条记录(不常使用)</div><div class="line">-- 分组查询</div><div class="line">-- 对zname内容进行分组, zname也要写在select后面</div><div class="line">SELECT zname,SUM(zmoney) FROM zhangwu GROUP BY zname</div><div class="line">-- 对zname内容进行分组查询求和,但是只要名称中包含"支付"的</div><div class="line">SELECT zname,SUM(zmoney) AS 'getsum' FROM zhangwu WHERE zname LIKE '%支出%'</div><div class="line">GROUP BY zname</div><div class="line">ORDER BY getsum DESC</div><div class="line">-- 对zname内容进行分组查询求和,但是只要名称中包含"支付"的,且和超过100的</div><div class="line">-- 结果集是分组查询后,再次进行筛选,不能用where,要用having</div><div class="line">SELECT zname,SUM(zmoney) AS 'getsum' FROM zhangwu WHERE zname LIKE '%支出%'</div><div class="line">GROUP BY zname</div><div class="line">HAVING getsum &gt; 100</div><div class="line">ORDER BY zmoney DESC</div></pre></td></tr></table></figure>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><pre><code>CHAR 和 VARCHAR比较:
1. 相同点: 语法与作用是一样的
2. 不同点:
    1. 长度不同: 
        CHAR为0-255之间的整数
        VARCHAR为0-65535之间的整数
    2. 数据存储结构不同
        CHAR(10) ------ 比如存储数据&quot;AB&quot; ----底层为:&quot;AB        &quot;,有8个空位 
        VARCHAR(10) --- 比如存储数据&quot;AB&quot; ----底层为:&quot;2AB&quot;,存储3个长度
        存储结构角度: VARCHAR比CHAR类型设计更为合理,空间利用率高
CHAR类型存储空间固定,意味着可能存在资源浪费,灵活性差的问题,但是效率高
CHAR类型应用场景:    
    所有数据长度都一样时,可以使用CHAR
</code></pre><h4 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h4><pre><code>效果上: 主键 = 非空 + 唯一
    但是主键不能换成not null和unique,因为主键还有索引的概念
索引可以对数据进行一步定位,效率更高
* 关于主键:
    主键会被固定算法求成对应的索引,当我们通过主键查询时,比如id=&apos;a001&apos;,其实底层是根据
    &apos;a001&apos;对应的索引一步定位查询的
</code></pre><h3 id="MySQL多表"><a href="#MySQL多表" class="headerlink" title="MySQL多表"></a>MySQL多表</h3><pre><code>表与表之间的关系有一对多,多对多,一对一
1. 单表设计存在的缺陷:
    1). 数据重复存储,会浪费磁盘空间(数据没有实现复用)
    2). 导致数据修改时效率低
2. 多表优点:
    1. 存储空间更为节约
    2. 修改信息时效率更高
    3. 本质: 另一种形式的封装
</code></pre><h4 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">* 作用: 限制从表某些字段的数据使用</div><div class="line">* 使用: </div><div class="line">	1. 将主从表记录通通清空(不一定)</div><div class="line">	2. 按照外键语法添加外键</div><div class="line">* 语法: </div><div class="line">	* 添加外键: </div><div class="line">	alter table 从表名 </div><div class="line">		add constraint 外键名 </div><div class="line">			foreign key (从表中外键字段名) </div><div class="line">				references 主表名(主表的主键字段名)</div><div class="line">	效果: 从表的使用外键的字段的数值只能是主表中被引用的字段已经存在的数字</div><div class="line">* 注意: 从表中的外键必须和主表的主键的数据类型一样</div><div class="line">* 外键名看不到,很少用到.需要用到的使用场景: 删除外键</div><div class="line">	* 查看外键方式: show create table 从表名;</div><div class="line">	* 删除外键:</div><div class="line">	alter table 从表名 drop foreign key 外键名;</div></pre></td></tr></table></figure>
<h4 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h4><pre><code>例:
1. 学生信息表与考试信息表:
    &quot;一条学生信息&quot;可以对应&quot;多条考试成绩信息&quot;
    &quot;一条考试成绩信息&quot;只属于&quot;一条学生信息&quot;
2. 用户表与订单表:
    &quot;一条用户信息&quot;可以对应&quot;多条订单信息&quot;
    &quot;一条订单信息&quot;只属于&quot;一条用户信息&quot;
3. 客户表与银行卡表:
    &quot;一条客户信息&quot;可以对应&quot;多条银行卡信息&quot;
    &quot;一条银行卡信息&quot;只属于&quot;一条客户信息&quot;
如上的表设计就是&quot;一对多&quot;
* 主表(一表): 将&quot;一方&quot;称之为主表或一表
* 从表(多表): 将&quot;多方&quot;称为为从表或多表
* &quot;一对多&quot;的实现:
    在&quot;从表&quot;中创建一个字段来引用&quot;主表&quot;的主键作为外键
</code></pre><h4 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h4><pre><code>例:
1. 学生表与课程表:
    &quot;一条学生信息&quot;可以对应&quot;多条课程信息&quot;
    &quot;多条学生信息&quot;可以对应&quot;一条课程信息&quot;
2.  班级表与教师表:
    &quot;一条班级信息&quot;可以对应&quot;多条教师信息&quot;
    &quot;多条班级信息&quot;可以对应&quot;一条教师信息&quot;
3.  订单表与商品表:
    &quot;一条订单信息&quot;可以对应&quot;多条商品信息&quot;
    &quot;多条订单信息&quot;可以对应&quot;一条商品信息&quot;
如上的表设计就是&quot;多对多&quot;
* &quot;多对多&quot;的实现:
    1. 创建一个中间表
    2. 在中间表(从表)中创建两个字段来分别引用两张&quot;主表&quot;的主键作为外键;
        两个字段的组合可以表示多对多的关联
* 使用
    1. 查主表1
    2. 查中间表(从表)
    3. 查主表2
* 优化1: 
    * 加外键(两个字段都要加)
        1. 将中间表记录清空(如果表记录没有违反现实逻辑,可以不清空)
        2. 添加外键
* 优化2:
    * 加联合主键(多个字段联合作为主键),组合方式不能重复
    * 开发中不常用,效率低
    * 语法: primary key (字段1,字段2)
</code></pre><h4 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h4><pre><code>例: 公民表与身份证表
</code></pre><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><h4 id="交叉查询-笛卡尔积"><a href="#交叉查询-笛卡尔积" class="headerlink" title="交叉查询(笛卡尔积)"></a>交叉查询(笛卡尔积)</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">笛卡尔积 <span class="comment">--- 有大量无用数据</span></div><div class="line">	<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表<span class="number">1</span>,表<span class="number">2</span>;</div></pre></td></tr></table></figure>
<h4 id="内连接查询"><a href="#内连接查询" class="headerlink" title="内连接查询"></a>内连接查询</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">* 查询有用数据</div><div class="line">1. 隐式:</div><div class="line">	SELECT * FROM 表1,表2 WHERE 条件;</div><div class="line">2. 显式:</div><div class="line">	SELECT * FROM 表1 INNER JOIN 表2 ON 条件;</div></pre></td></tr></table></figure>
<h4 id="外连接查询"><a href="#外连接查询" class="headerlink" title="外连接查询"></a>外连接查询</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">1. 左外连接查询:</div><div class="line">	SELECT * FROM 表1 LEFT OUTER JOIN 表2 ON 条件;</div><div class="line">注意: </div><div class="line">查询左表(表1)所有的数据,右表(表2)是否显示,取决于条件是否成立,如果成立显示,如果不成立显示null;</div><div class="line">2. 右外连接查询:</div><div class="line">	SELECT * FROM 表1 RIGHT OUTER JOIN 表2 ON 条件;</div><div class="line">注意: </div><div class="line">查询右表(表2)所有的数据,左表(表1)是否显示,取决于条件是否成立,如果成立显示,如果不成立显示null;</div><div class="line">3. 拓展:</div><div class="line">	* A left outer join B 等价于 B right outer join A</div></pre></td></tr></table></figure>
<h4 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">* 使用一个select查询的结果作为另一个select的一部分(查询结果,查询条件,查询表等);</div><div class="line">* 查询结果唯一用"=",多个结果用"in"</div><div class="line">* 如:</div><div class="line">SELECT * FROM 表1 WHERE id = (SELECT id FROM 表2 WHERE 条件);</div><div class="line">SELECT * FROM 表1 WHERE id in (SELECT id FROM 表2 WHERE 条件);</div></pre></td></tr></table></figure>
<h3 id="商城数据库设计"><a href="#商城数据库设计" class="headerlink" title="商城数据库设计"></a>商城数据库设计</h3><h4 id="多表关系图"><a href="#多表关系图" class="headerlink" title="多表关系图"></a>多表关系图</h4><p><img src="http://oj3s07yy0.bkt.clouddn.com/blog/20170328/172620290.png" alt="mark"><br><img src="http://oj3s07yy0.bkt.clouddn.com/blog/20170328/172742945.png" alt="mark"></p>
<h4 id="sql语句"><a href="#sql语句" class="headerlink" title="sql语句"></a>sql语句</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">CREATE DATABASE shop;</div><div class="line"></div><div class="line">USE shop;</div><div class="line">#创建用户表</div><div class="line">CREATE TABLE USER(</div><div class="line">	uid VARCHAR(20) PRIMARY KEY,#主键</div><div class="line">	username VARCHAR(20)#用户名</div><div class="line">);</div><div class="line">#创建订单表</div><div class="line">CREATE TABLE orders(</div><div class="line">	oid VARCHAR(20) PRIMARY KEY,#主键</div><div class="line">	createdate DATE,#下单时间</div><div class="line">	total_price DOUBLE,#总费用</div><div class="line">	user_id VARCHAR(20)#用户id(外键)</div><div class="line">);</div><div class="line">#创建用户表与订单表间的外键约束</div><div class="line">ALTER TABLE orders ADD CONSTRAINT uid_fk FOREIGN KEY(user_id) REFERENCES USER(uid);</div><div class="line"></div><div class="line">#创建商品表</div><div class="line">CREATE TABLE product(</div><div class="line">	pid VARCHAR(20) PRIMARY KEY,#主键</div><div class="line">	pname VARCHAR(20),#商品名</div><div class="line">	price DOUBLE,#价格</div><div class="line">	category_id VARCHAR(20)#商品分类(外键)</div><div class="line">);</div><div class="line">#创建分类表</div><div class="line">CREATE TABLE category(</div><div class="line">	cid VARCHAR(20) PRIMARY KEY,#主键</div><div class="line">	cname VARCHAR(20)#分类名</div><div class="line">);</div><div class="line">#创建商品表与分类表键的外键约束</div><div class="line">ALTER TABLE product ADD CONSTRAINT cid_fk FOREIGN KEY(category_id) REFERENCES category(cid);</div><div class="line"></div><div class="line">#创建商品与订单中间表</div><div class="line">CREATE TABLE orderitem(</div><div class="line">	pid VARCHAR(20),#商品id(外键)</div><div class="line">	oid VARCHAR(20)#订单id(外键)</div><div class="line">);</div><div class="line">#创建中间表与订单表之间的外键约束</div><div class="line">ALTER TABLE orderitem ADD CONSTRAINT oid_fk FOREIGN KEY(oid) REFERENCES orders(oid);</div><div class="line">#创建中间表与商品表之间的外键约束</div><div class="line">ALTER TABLE orderitem ADD CONSTRAINT pid_fk FOREIGN KEY(pid) REFERENCES product(pid);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;存储数据&quot;&gt;&lt;a href=&quot;#存储数据&quot; class=&quot;headerlink&quot; title=&quot;存储数据&quot;&gt;&lt;/a&gt;存储数据&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;三种形式:
1. 变量
    1. 特点: 数据在内存中
    2. 问题: 不能持久化存储
2. IO流结合文件
    1. 特点: 数据存储在文件中,实现了持久化存储
    2. 问题: 数据存储在文件中,但是读取时,不同的实现可能效率差异比较大
3. 数据库
    数据库 = 文件存储数据 + 算法封装
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="JAVA基础" scheme="https://geekhoon.github.io/categories/JAVA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="数据库" scheme="https://geekhoon.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>多线程</title>
    <link href="https://geekhoon.github.io/2017/02/25/17-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://geekhoon.github.io/2017/02/25/17-多线程/</id>
    <published>2017-02-25T00:36:15.000Z</published>
    <updated>2017-03-28T13:17:06.399Z</updated>
    
    <content type="html"><![CDATA[<h3 id="线程与进程"><a href="#线程与进程" class="headerlink" title="线程与进程"></a>线程与进程</h3><pre><code>* 进程: 正在执行的程序. 当一个程序进入内存执行,即变成一个进程
* 线程: 进程中的一个执行单元,执行路径.
    * 单线程: 一个应用程序只有一条执行路径
    * 多线程: 一个应用程序有多条执行路径
</code></pre><a id="more"></a>
<pre><code>* 一个程序运行后至少有一个进程,一个进程中可以包含多个线程
* 线程的调度:
    * 分时调度: 所有线程轮流使用CPU的使用权,平均分配每个线程占用 CPU 的时间。
    * 抢占式调度: 优先让优先级高的线程使用 CPU,如果线程的优先级相同,那么会随机选择一个
* 对于CPU的一个核而言,某个时刻,只能执行一个线程,
   而 CPU的在多个线程间切换速度相对我们的感觉要快,看上去就是在同一时刻运行。
* 多线程程序并不能提高程序的运行速度,但能够提高程序运行效率,让CPU的使用率更高
* main的主线程: &quot;main&quot;
* 多线程的意义: 提高应用程序的使用率
* 多进程的意义: 提高CPU的使用率
* Java程序的运行原理: 
    Java命令去启动JVM,JVM会启动一个进程,该进程会启动一个主线程
* JVM的启动是多线程吗?
    是.因为它最低有俩个线程启动,主线程和垃圾回收线程 
</code></pre><h3 id="Thread类"><a href="#Thread类" class="headerlink" title="Thread类"></a>Thread类</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><pre><code>* 是线程的一种实现方式
* Thread是程序中的执行线程。Java 虚拟机允许应用程序并发地运行多个执行线程
* 多线程的实现方案:
    1. 继承Thread类
        该子类应重写 Thread 类的 run 方法。创建对象，开启线程。run方法相当于其他线程的main方法。
    2. 实现Runnable接口
        该类实现 run 方法, 然后创建Runnable的子类对象，传入到Thread子类的构造方法中，开启线程。
</code></pre><h4 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h4><pre><code>* 创建和启动一个线程:
    1. 创建Thread子类对象, 继承Thread, 重写方法run()
    2. 子类对象调用start(): 让线程程序执行, JVM调用线程中的run 
        一个对象只能开启一次start(),多次启动一个线程是非法的
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</div><div class="line">			System.out.println(<span class="string">"SubThread...."</span>+i);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SubThread st = <span class="keyword">new</span> SubThread();</div><div class="line">		st.start();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</div><div class="line">			System.out.println(<span class="string">"main...."</span>+i);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//打印结果是SubThread....和main....无规律交叉打印,因为线程执行的随机性</span></div></pre></td></tr></table></figure>
<h4 id="为什么要继承Thread类"><a href="#为什么要继承Thread类" class="headerlink" title="为什么要继承Thread类"></a>为什么要继承Thread类</h4><pre><code>* 因为可以根据自己的需求重写run方法
* 注意start()和run()的区别:
    start(): 开启线程,并让JVM调用run()
    run(): 不开启线程
* 创建线程的目的: 让程序可以独立运行
</code></pre><h4 id="获取线程名字"><a href="#获取线程名字" class="headerlink" title="获取线程名字"></a>获取线程名字</h4><h5 id="getName"><a href="#getName" class="headerlink" title="getName()"></a>getName()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function">String <span class="title">getName</span><span class="params">()</span>: 返回该线程的名称, Thread类的方法</span></div><div class="line"><span class="keyword">public</span> class SubThread extends Thread &#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="keyword">super</span>.getName());</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SubThread st = <span class="keyword">new</span> SubThread();</div><div class="line">		SubThread st1 = <span class="keyword">new</span> SubThread();</div><div class="line">		st.start();</div><div class="line">		st1.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">打印结果: 获得的是当前线程的默认名字,根据线程被执行的先后顺序命名</div><div class="line">Thread-<span class="number">0</span></div><div class="line">Thread-<span class="number">1</span></div></pre></td></tr></table></figure>
<h5 id="currentThread"><a href="#currentThread" class="headerlink" title="currentThread()"></a>currentThread()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> Thread <span class="title">currentThread</span><span class="params">()</span>: 返回正在执行的线程对象, Thread类的方法</span></div><div class="line"><span class="comment">//如果要获取主线程的名字, 只能用此方法</span></div><div class="line"><span class="keyword">public</span> class Test &#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">//返回正在执行的线程的名字</span></div><div class="line">		System.out.println(Thread.currentThread().getName());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="设置线程名字"><a href="#设置线程名字" class="headerlink" title="设置线程名字"></a>设置线程名字</h4><pre><code>* 两种方式:
    1. 构造器
    2. setName()
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(getName());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SubThread</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(<span class="string">"线程名2"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SubThread</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(name);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SubThread st1 = <span class="keyword">new</span> SubThread(<span class="string">"旺财"</span>);</div><div class="line">		st1.start();<span class="comment">//打印旺财</span></div><div class="line">		</div><div class="line">		SubThread st2 = <span class="keyword">new</span> SubThread();</div><div class="line">		st2.start();<span class="comment">//打印线程名2</span></div><div class="line">		</div><div class="line">		SubThread st3 = <span class="keyword">new</span> SubThread();</div><div class="line">		st3.setName(<span class="string">"线程名1"</span>);</div><div class="line">		st3.setName(<span class="string">"线程名3"</span>);</div><div class="line">		st3.start();<span class="comment">//打印线程名3</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="睡眠sleep"><a href="#睡眠sleep" class="headerlink" title="睡眠sleep()"></a>睡眠sleep()</h4><pre><code>* static void sleep(毫秒)
* main方法中和Thread子类的run()中都可以使用
* main()中可以抛异常
* run()中只能try/catch,不能抛异常,因为父类Thread没抛异常
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">做法一:</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">5</span>; i &gt;= <span class="number">1</span>; i--) &#123;</div><div class="line">			<span class="keyword">try</span>&#123;</div><div class="line">				System.out.println(i);</div><div class="line">				Thread.sleep(<span class="number">1000</span>);</div><div class="line">			&#125;<span class="keyword">catch</span>(Exception ex)&#123;</div><div class="line">				</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		System.out.println(<span class="string">"发射!!"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		SubThread st = <span class="keyword">new</span> SubThread();</div><div class="line">		st.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">做法二:</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">5</span>; i &gt;= <span class="number">1</span>; i--) &#123;</div><div class="line">			System.out.println(i);</div><div class="line">			Thread.sleep(<span class="number">1000</span>);</div><div class="line">		&#125;</div><div class="line">		System.out.println(<span class="string">"发射!"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Runnable接口"><a href="#Runnable接口" class="headerlink" title="Runnable接口"></a>Runnable接口</h3><pre><code>* 实现线程程序的另一个方式
* 实现接口Runnable, 重写run()
* 创建和启动一个线程: 
    1. 定义一个类,实现接口Runnable, 重写run()
    2. 测试类中创建Thread类对象,构造方法中,传递Runnable接口实现类
    3. Thread类对象调用方法start()
* 实现Runnable接口, 避免了继承Thread类的单继承局限性, 可以多实现
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1. 定义一个类,实现接口Runnable, 重写run()</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</div><div class="line">			System.out.println(Thread.currentThread().getName()+<span class="string">"..."</span>+i);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="comment">//2. 测试类中创建Thread类对象,构造方法中,传递Runnable接口实现类</span></div><div class="line">		SubRunnable sr = <span class="keyword">new</span> SubRunnable();</div><div class="line">		Thread t = <span class="keyword">new</span> Thread(sr);</div><div class="line"><span class="comment">//3. Thread类对象调用方法start()		</span></div><div class="line">		t.start();</div><div class="line">		</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</div><div class="line">			System.out.println(Thread.currentThread().getName()+<span class="string">"..."</span>+i);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//结果是Thread-0..值 和 main...值交叉无规律打印</span></div></pre></td></tr></table></figure>
<h4 id="实现Runnable的好处"><a href="#实现Runnable的好处" class="headerlink" title="实现Runnable的好处"></a>实现Runnable的好处</h4><pre><code>* 避免了单继承的局限性
* 降低了程序的耦合性,Runnable接口对线程对象和线程任务进行解耦
</code></pre><h3 id="匿名内部类实现多线程程序"><a href="#匿名内部类实现多线程程序" class="headerlink" title="匿名内部类实现多线程程序"></a>匿名内部类实现多线程程序</h3><pre><code>* 前提: 继承或接口实现
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	<span class="comment">//方式一:new Thread类,调用start()</span></div><div class="line">	<span class="keyword">new</span> Thread()&#123;</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">			System.out.println(<span class="string">"1.开启线程"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;.start();</div><div class="line">	<span class="comment">//方式二:new Runnable接口,作为Thread构造方法的参数,Thread对象调用start()</span></div><div class="line">	Runnable r = <span class="keyword">new</span> Runnable() &#123;</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">			System.out.println(<span class="string">"2.开启线程"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">	<span class="keyword">new</span> Thread(r).start();</div><div class="line">	<span class="comment">//方式三: 将方式二两步合在一起</span></div><div class="line">	<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">			System.out.println(<span class="string">"3.开启线程"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;).start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h4><pre><code>1. NEW: 新建状态 new Thread()/Thread子类对象
2. RUNNABLE: 运行状态 start()
3. BLOCKED: 受阻塞状态 
4. TIMED_WAITING: 休眠  sleep()
5. WAITING: 等待     wait()/notify()唤醒
6. TERMINATED: 死亡状态  run()结束,stopr()
</code></pre><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><pre><code>* 容纳多个线程的容器
* 原理: 
    * 程序一开始的时候,创建多个线程对象,存储到集合中,需要线程时,从集合获取线程出来
    * 线程用完后,回到容器中,省去每次开启关闭线程的麻烦和资源浪费
* JDK1.5之后, 内置线程池技术
</code></pre><h4 id="使用线程池的方式"><a href="#使用线程池的方式" class="headerlink" title="使用线程池的方式"></a>使用线程池的方式</h4><pre><code>* Executors类
    * 创建线程池的工厂类
    * 方法:
        * static ExecutorService newFixedThreadPool(int nThreads): 返回线程池对象
            其实返回的是ExecutorService接口的实现类(线程池对象)
        * newSingleThreadExecutor()
        * shutdown(): 删除线程池
* 步骤:
    1. 使用工厂类Executors中的静态方法创建线程对象,指定线程个数
        static ExecutorService newFixedThreadPool(int nThreads)
    2. 接口实现类对象, 调用方法submit(Runnable r), 提交线程执行任务
        参数是Runnable接口的实现类
</code></pre><h4 id="Callable接口"><a href="#Callable接口" class="headerlink" title="Callable接口"></a>Callable<t>接口</t></h4><pre><code>* 实现线程的第三种方式
* 有返回值, 可以抛异常
* 重写call()
* 步骤: 
    1. 使用工厂类Executors中的静态方法创建线程对象,指定线程个数
        static ExecutorService newFixedThreadPool(int nThreads)
    2. 接口实现类对象, 调用方法submit(Callable&lt;T&gt; c), 提交线程执行任务
        参数是Callable接口的实现类 
        submit(Callable&lt;T&gt; c)返回Future&lt;T&gt;接口的实现类
        Future接口中有get(),可以获取返回值
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubCollable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt; </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> <span class="string">"geekhoon"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception, ExecutionException </span>&#123;</div><div class="line">		ExecutorService es = Executors.newFixedThreadPool(<span class="number">2</span>);</div><div class="line">		Future&lt;String&gt; f1 = es.submit(<span class="keyword">new</span> SubCollable());</div><div class="line">		Future&lt;String&gt; f2 = es.submit(<span class="keyword">new</span> SubCollable());</div><div class="line">		String s1 = f1.get();</div><div class="line">		String s2 = f2.get();</div><div class="line">		System.out.println(s1);</div><div class="line">		System.out.println(s2);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="线程实现异步求和"><a href="#线程实现异步求和" class="headerlink" title="线程实现异步求和"></a>线程实现异步求和</h4><pre><code>* 要求: 两个进程,1个进程求1+..100的和,另一个进程求1+..200的和
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">方式一: 使用Runnable接口</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> num;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SubRunnable</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.num = num;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= num; i++) &#123;</div><div class="line">			sum += i;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//因为Runnable接口没有返回值,所以和要直接打印</span></div><div class="line">		System.out.println(Thread.currentThread().getName()+<span class="string">"..."</span>+sum);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SubRunnable sr1 = <span class="keyword">new</span> SubRunnable(<span class="number">100</span>);</div><div class="line">		SubRunnable sr2 = <span class="keyword">new</span> SubRunnable(<span class="number">200</span>);</div><div class="line">		Thread t1 = <span class="keyword">new</span> Thread(sr1, <span class="string">"线程1"</span>);<span class="comment">//第二个参数就是设置当前进程的名字</span></div><div class="line">		Thread t2 = <span class="keyword">new</span> Thread(sr2, <span class="string">"线程2"</span>);<span class="comment">//也可以用setName()</span></div><div class="line">		t1.start();</div><div class="line">		t2.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">方式二: 使用Callable接口</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> num;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SubCallable</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.num = num;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= num; i++) &#123;</div><div class="line">			sum += i;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> sum;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		ExecutorService es = Executors.newFixedThreadPool(<span class="number">2</span>);</div><div class="line">		Future&lt;Integer&gt; f1 = es.submit(<span class="keyword">new</span> SubCallable(<span class="number">100</span>));</div><div class="line">		Future&lt;Integer&gt; f2 = es.submit(<span class="keyword">new</span> SubCallable(<span class="number">200</span>));</div><div class="line">		System.out.println(<span class="string">"1 + .. + 100 = "</span>+f1.get());</div><div class="line">		System.out.println(<span class="string">"1 + .. + 200 = "</span>+f2.get());</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//注意: 两种方法的run()和call()都是无参方法,只能通过构造方法进行传值</span></div></pre></td></tr></table></figure>
<h3 id="多线程安全问题"><a href="#多线程安全问题" class="headerlink" title="多线程安全问题"></a>多线程安全问题</h3><pre><code>* 判断多线程是否有安全问题的依据:
    1. 是否是多线程环境
    2. 是否有共享数据
    3. 是否有多条语句操作共享数据
* 解决安全问题,Java程序提供了同步技术
* 同步代码块公式:
    synchronized(任意对象){ 
        多条语句操作共享数据的代码
    }
* 特别注意: 同步代码块生效的前提是对象锁唯一,就是要用同一个对象
* 卖票问题:
    1. 同票多次: CPU的每一次执行,必须是一个原子性操作(最简单,最基本的操作).
        System.out.println(&quot;...卖了第&quot;+(100-ticketsCount+1)+&quot;票,剩&quot;+--ticketsCount+&quot;张&quot;);
        这一句就不是原子操作,因为既进行了打印又进行了递减操作,可能线程刚打印完还没进行自减
        此时第二个线程进来,抢占了CPU资源,于是打印的值就和前一个一样
    2. 负数票: 随机性和延迟导致的

* 解决方法:
    1. 同步代码块
    2. 同步方法: 同步方法(this)和静态同步方法(类名.class)
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">设置了休眠Thread.sleep(<span class="number">500</span>);引发了多线程安全问题</div><div class="line"><span class="comment">//出现多线程负数票的原因:</span></div><div class="line">当剩下最后一张票的时候,窗户<span class="number">1</span>进入一处并休眠,窗口<span class="number">2</span>也进入一处并休眠</div><div class="line"><span class="number">1</span>唤醒后,打印卖了<span class="number">100</span>张,剩<span class="number">0</span>张</div><div class="line">但此时窗口<span class="number">2</span>线程也在循环内,也进行打印,就出现了负值</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> ticketsCount = <span class="number">100</span>;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">			<span class="keyword">if</span> (ticketsCount &lt;= <span class="number">0</span> ) &#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				Thread.sleep(<span class="number">500</span>);<span class="comment">//一处</span></div><div class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			System.out.println(Thread.currentThread().getName()+<span class="string">"...卖了第"</span>+(<span class="number">100</span>-ticketsCount+<span class="number">1</span>)+<span class="string">"票,剩"</span>+--ticketsCount+<span class="string">"张"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		MyThread my1 = <span class="keyword">new</span> MyThread();</div><div class="line">		<span class="keyword">new</span> Thread(my1, <span class="string">"窗口1"</span>).start();</div><div class="line">		<span class="keyword">new</span> Thread(my1, <span class="string">"窗口2"</span>).start();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">设置同步代码块,解决多线程安全问题</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> ticketsCount = <span class="number">100</span>;</div><div class="line">	<span class="keyword">private</span> Object obj = <span class="keyword">new</span> Object();</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">			<span class="keyword">synchronized</span> (obj) &#123;</div><div class="line">	<span class="comment">//ticketsCount是共享数据, 所以要放在同步代码中</span></div><div class="line">				<span class="keyword">if</span> (ticketsCount &lt;= <span class="number">0</span> ) &#123;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					Thread.sleep(<span class="number">500</span>);</div><div class="line">				&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">				System.out.println(Thread.currentThread().getName()+<span class="string">"...卖了第"</span>+(<span class="number">100</span>-ticketsCount+<span class="number">1</span>)+<span class="string">"票,剩"</span>+--ticketsCount+<span class="string">"张"</span>);	</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		MyThread my1 = <span class="keyword">new</span> MyThread();</div><div class="line">		<span class="keyword">new</span> Thread(my1, <span class="string">"窗口1"</span>).start();</div><div class="line">		<span class="keyword">new</span> Thread(my1, <span class="string">"窗口2"</span>).start();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="同步原理"><a href="#同步原理" class="headerlink" title="同步原理"></a>同步原理</h4><pre><code>* 同步代码块传入的对象是任意对象, 这个对象也叫做同步锁,对象监视器
* 同步保证安全性: 没有锁的线程不能执行, 只能等
* 前提: 多线程
* 解决问题时要注意: 多个线程使用的是同一个锁对象
* 好处: 解决了多线程的安全问题
* 弊端: 线程很多时,每个线程都会判断同步上的锁,很耗费资源,并且降低程序运行效率
* 原理:
    1. 线程遇到同步代码块, 就会判断有没有同步锁,
    2. 有: 获取同步锁,进去同步代码中执行.
           执行完毕后, 将锁对象还回去
           在同步中的线程, 进行了休眠, 此时另一个线程会执行
           遇到同步代码块, 再一次判断有没有同步锁
       没有: 线程不能进去同步代码, 被阻挡在同步代码块外面
* 一个线程进入了同步代码块, 其余线程就进不去, 只能在线程代码块外面等
* 没有锁的线程,不能进入同步,在同步中的线程,不出去同步,不会释放锁
</code></pre><h4 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h4><pre><code>* 采用同步方法形式, 解决线程的安全问题
* 好处: 代码简洁
* 将线程共享数据,同步,抽取到方法
* 在方法的声明上, 加上同步关键词synchronized
* 问题:
    1. 同步方法中有锁吗?
       有.同步方法中的对象锁就是本类对象的引用this
    2. 如果同步方法是静态的, 有锁吗?
       成员变量也要改成静态的. 也有锁. 锁不是this(因为静态随类的加载而加载,此时还没有对象)
       锁是本类的字节码文件对象(类名.class)
* 线程安全的类:
    1. StringBuffer
    2. Vector
    3. HashTable
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> ticketsCount = <span class="number">20</span>;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">			payTickets();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">payTickets</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (ticketsCount &gt; <span class="number">0</span> ) &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				Thread.sleep(<span class="number">500</span>);</div><div class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			System.out.println(Thread.currentThread().getName()+<span class="string">"...卖了第"</span>+(<span class="number">20</span>-ticketsCount+<span class="number">1</span>)+<span class="string">"票,剩"</span>+--ticketsCount+<span class="string">"张"</span>);	</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		MyThread my1 = <span class="keyword">new</span> MyThread();</div><div class="line">		<span class="keyword">new</span> Thread(my1, <span class="string">"窗口1"</span>).start();</div><div class="line">		<span class="keyword">new</span> Thread(my1, <span class="string">"窗口2"</span>).start();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">静态同步方法</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticketsCount = <span class="number">20</span>;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">			payTickets();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">payTickets</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (ticketsCount &gt; <span class="number">0</span> ) &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				Thread.sleep(<span class="number">500</span>);</div><div class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			System.out.println(Thread.currentThread().getName()+<span class="string">"...卖了第"</span>+(<span class="number">20</span>-ticketsCount+<span class="number">1</span>)+<span class="string">"票,剩"</span>+--ticketsCount+<span class="string">"张"</span>);	</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">或</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticketsCount = <span class="number">20</span>;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">			payTickets();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">payTickets</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">synchronized</span>(MyThread.class)&#123;<span class="comment">//锁是本类</span></div><div class="line">			<span class="keyword">if</span> (ticketsCount &gt; <span class="number">0</span> ) &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					Thread.sleep(<span class="number">500</span>);</div><div class="line">				&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">				System.out.println(Thread.currentThread().getName()+<span class="string">"...卖了第"</span>+(<span class="number">20</span>-ticketsCount+<span class="number">1</span>)+<span class="string">"票,剩"</span>+--ticketsCount+<span class="string">"张"</span>);	</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="lock接口"><a href="#lock接口" class="headerlink" title="lock接口"></a>lock接口</h4><pre><code>* JDK1.5新特性
* 方法:
    1. void lock(): 上锁
    2. void unlock(): 解锁
* 实现类有ReentrantLock
* 加锁解锁位置与同步代码块一样
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticketsCount = <span class="number">20</span>;</div><div class="line">	<span class="comment">//在类的成员位置,创建Lock接口的实现类对象</span></div><div class="line">	<span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">			<span class="comment">//调用lock获取锁</span></div><div class="line">			lock.lock();</div><div class="line">			<span class="keyword">if</span> (ticketsCount &gt; <span class="number">0</span> ) &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					Thread.sleep(<span class="number">500</span>);</div><div class="line">					System.out.println(Thread.currentThread().getName()+<span class="string">"...卖了第"</span>+(<span class="number">20</span>-ticketsCount+<span class="number">1</span>)+<span class="string">"票,剩"</span>+--ticketsCount+<span class="string">"张"</span>);	</div><div class="line">				&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;<span class="keyword">finally</span>&#123;</div><div class="line">					<span class="comment">//释放锁</span></div><div class="line">					lock.unlock();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		MyThread my1 = <span class="keyword">new</span> MyThread();</div><div class="line">		<span class="keyword">new</span> Thread(my1, <span class="string">"窗口1"</span>).start();</div><div class="line">		<span class="keyword">new</span> Thread(my1, <span class="string">"窗口2"</span>).start();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><pre><code>* 如果出现了同步嵌套, 就容易产生死锁
* 同步弊端: 1.效率低  2.容易产生死锁
* 死锁问题:
    是指两个或两个以上的线程在执行过程中,因争夺资源产生的一种互相等待的现象
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//两把锁</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockA</span> </span>&#123;</div><div class="line">	<span class="comment">//私有化构造方法</span></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">LockA</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">	<span class="comment">//使得对象只能通过类名.调用, 且保证唯一性</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> LockA locka = <span class="keyword">new</span> LockA();</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockB</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">LockB</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> LockB lockb = <span class="keyword">new</span> LockB();</div><div class="line">&#125;</div><div class="line"><span class="comment">//</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">			<span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</div><div class="line">				<span class="comment">//先进入A同步,再进入B同步</span></div><div class="line">				<span class="keyword">synchronized</span> (LockA.locka) &#123;</div><div class="line">					System.out.println(<span class="string">"if...loaka"</span>);</div><div class="line">					<span class="keyword">synchronized</span> (LockB.lockb) &#123;</div><div class="line">						System.out.println(<span class="string">"if...lockb"</span>);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				<span class="comment">//先进入B同步,再进入A同步</span></div><div class="line">				<span class="keyword">synchronized</span> (LockB.lockb) &#123;</div><div class="line">					System.out.println(<span class="string">"else...lockb"</span>);</div><div class="line">					<span class="keyword">synchronized</span> (LockA.locka) &#123;</div><div class="line">						System.out.println(<span class="string">"else...locka"</span>);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			i++;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//测试类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		DeadLock d = <span class="keyword">new</span> DeadLock();</div><div class="line">		Thread t0 = <span class="keyword">new</span> Thread(d);</div><div class="line">		Thread t1 = <span class="keyword">new</span> Thread(d);</div><div class="line">		t0.start();</div><div class="line">		t1.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="线程间通信问题"><a href="#线程间通信问题" class="headerlink" title="线程间通信问题"></a>线程间通信问题</h3><pre><code>* 不同种类的线程间针对同一个资源的操作
* 可能出现的问题:
    1. 赋值不生效, 打印的是默认值: 操作不同资源类对象
    2. 同一数据出现多次: CPU的一点点时间片的执行权,就足够执行多次,Output的线程一直抢占,就会打印多次
    3. 姓名和性别不匹配: 线程运行的随机性
* 以下为操作不同资源类对象,产生null的代码
* 处理这个问题,可以在测试类中先创建好该对象,再作为参数,
  通过生产者Input,消费者Output各自的构造方法进行传参, 以达到操作同一资源的目的,完成线程间通信
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 资源类,有两个成员变量</div><div class="line"> * 有两个线程Input和Output分别对其赋值和打印</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Resource</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> String name;</div><div class="line">	<span class="keyword">public</span> String sex;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"> * 输入的线程,即生产者线程, 对资源对象Resource中成员变量赋值</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Input</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">	<span class="comment">//注意:只声明了资源类对象,并没有new</span></div><div class="line">	<span class="keyword">private</span> Resource r = <span class="keyword">new</span> Resource();</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">			<span class="comment">//这里加上同步锁,避免出现打印"张三...nv"和"lisi...男"的情况</span></div><div class="line">			<span class="comment">//特别注意:生产者消费者加的要是同一把锁,所以传的是唯一的Resource类对象</span></div><div class="line">			<span class="keyword">synchronized</span> (r) &#123;</div><div class="line">				<span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</div><div class="line">					r.name = <span class="string">"张三"</span>;<span class="comment">//如果不加同步代码块,且上一次打印的是lisi..nv,则执行到这一步,如果输出线程抢到了CPU,就会打印出张三...nv</span></div><div class="line">					r.sex = <span class="string">"男"</span>;</div><div class="line">				&#125;<span class="keyword">else</span>&#123;</div><div class="line">					r.name = <span class="string">"lisi"</span>;<span class="comment">//如果不加同步代码块,且上一次打印的是张三...男,执行到这一步时,输出线程抢到了CPU,就会打印出lisi...男</span></div><div class="line">					r.sex = <span class="string">"nv"</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			i++;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"> *  输出线程, 即消费者线程, 对资源对象Resource中成员变量,输出值</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Output</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> Resource r = <span class="keyword">new</span> Resource();</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">			<span class="keyword">synchronized</span> (r) &#123;</div><div class="line">				System.out.println(r.name+<span class="string">"..."</span>+r.sex);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//测试类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Input in = <span class="keyword">new</span> Input();</div><div class="line">		Output out = <span class="keyword">new</span> Output();</div><div class="line">		</div><div class="line">		<span class="keyword">new</span> Thread(in).start();</div><div class="line">		<span class="keyword">new</span> Thread(out).start();</div><div class="line">	&#125;</div><div class="line">&#125; </div><div class="line">打印结果是循环打印<span class="keyword">null</span>...<span class="keyword">null</span>, 原因是Input和Output中都重新<span class="keyword">new</span>了Resource对象</div><div class="line">它们操作的是不同对象</div></pre></td></tr></table></figure>
<h3 id="线程等待与唤醒机制"><a href="#线程等待与唤醒机制" class="headerlink" title="线程等待与唤醒机制"></a>线程等待与唤醒机制</h3><pre><code>* 等待唤醒机制所涉及到的方法,在Object类中:
    1. wait(): 等待, 将正在执行的线程释放其执行资格和执行权,并存储到线程池中。
    2. notify(): 唤醒, 唤醒线程池中wait()的线程,一次唤醒一个,而且是任意的。
    3. notifyAll(): 唤醒全部, 可以将线程池中的所有wait()线程都唤醒。
* 为什么这些方法不定义在Thread类中?
     因为这些方法的调用必须通过锁对象调用, 而同步代码块的锁对象是任意类型对象
* 唤醒: 让线程池中的线程具备执行资格。必须注意的是,这些方法都是在同步中才有效。
* 这些方法在使用时必须标明所属锁,这样才可以明确出这些方法操作的到底是哪个锁上的线程。
* 思路:
    1. 生产者: 先看是否有数据,有就等待,没有就生产,生产完之后,通知消费者消费数据
    2. 消费者: 先看是否有数据,有就消费,没有就等待,等待前,通知生产者生产数据
* 为什么变成了一个一个打印,而不是一片一片打印?
    因为等待唤醒机制,使得每生产一个数据就消费一个数据,生产完会暂停生产,待消费完再生产
    消费完会暂停消费,待生产完再消费,保证了每次只有一个数据在操作
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 资源类,有两个成员变量</div><div class="line"> * 有两个线程Input和Output分别对其赋值和打印</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Resource</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> String name;</div><div class="line">	<span class="keyword">public</span> String sex;</div><div class="line">	<span class="comment">//设置布尔类型变量flag, 用于表示赋值和打印的状态</span></div><div class="line">	<span class="comment">//true表示,有数据, 赋值完成,需要进行输出操作了</span></div><div class="line">	<span class="comment">//false表示,没有数据, 需要进行赋值操作,此时不能进行输出操作</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * 输入的线程,对资源对象Resource中成员变量赋值</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Input</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">	<span class="comment">//注意:只声明了资源类对象,并没有new</span></div><div class="line">	<span class="keyword">private</span> Resource r;</div><div class="line">	<span class="comment">//用构造方法对Input,Output进行传参,使得Resource对象锁唯一</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Input</span><span class="params">(Resource r)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.r  = r;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">			<span class="comment">//这里加上同步锁,避免出现打印"张三...nv"和"lisi...男"的情况</span></div><div class="line">			<span class="keyword">synchronized</span> (r) &#123;</div><div class="line">				<span class="comment">//判断有没有数据, true说明赋值完成,使对象等待</span></div><div class="line">				<span class="keyword">if</span> (r.flag) &#123;<span class="comment">// 1处</span></div><div class="line">					<span class="keyword">try</span> &#123;</div><div class="line">						r.wait();</div><div class="line">					&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">						e.printStackTrace();</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				<span class="comment">//为fasle,进行赋值操作</span></div><div class="line">				<span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</div><div class="line">					r.name = <span class="string">"张三"</span>;</div><div class="line">					r.sex = <span class="string">"男"</span>;</div><div class="line">				&#125;<span class="keyword">else</span>&#123;</div><div class="line">					r.name = <span class="string">"lisi"</span>;</div><div class="line">					r.sex = <span class="string">"nv"</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="comment">//有数据了,置为true</span></div><div class="line">				r.flag = <span class="keyword">true</span>;</div><div class="line">				<span class="comment">//唤醒,注意是资源类对象进行唤醒,唤醒消费者线程</span></div><div class="line">				r.notify(); <span class="comment">//唤醒消费者,并不意味着消费者线程马上执行,还是需要二者抢夺CPU</span></div><div class="line"><span class="comment">//如果生产者抢到了,会再次进入run(),有数据进入1处后,还是等待,此时消费者线程可以抢到CPU,从之前等待处唤醒,打印当前信息</span></div><div class="line"><span class="comment">//如果消费者抢到了,会从之前等待处唤醒,打印当前信息</span></div><div class="line">			&#125;</div><div class="line">			i++;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"> *  输出线程,对资源对象Resource中成员变量,输出值</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Output</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> Resource r;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Output</span><span class="params">(Resource r)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.r = r;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">			<span class="keyword">synchronized</span> (r) &#123;</div><div class="line">				<span class="comment">//为false,说明输出完了,没有数据,就等待</span></div><div class="line">				<span class="keyword">if</span> (!r.flag) &#123;</div><div class="line">					<span class="keyword">try</span> &#123;</div><div class="line">						r.wait();<span class="comment">//1处</span></div><div class="line"><span class="comment">//1处:消费者线程wait()后,立即释放锁.生产者线程就会执行, 消费者线程醒来的时候还是从本条语句醒来</span></div><div class="line">					&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">						e.printStackTrace();</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				<span class="comment">//为true,有数据就消费</span></div><div class="line">				System.out.println(r.name+<span class="string">"..."</span>+r.sex);</div><div class="line">				<span class="comment">//消费完, 没有数据了</span></div><div class="line">				r.flag = <span class="keyword">false</span>;</div><div class="line">				<span class="comment">//唤醒生产者线程</span></div><div class="line">				r.notify();<span class="comment">//注意唤醒生产者,不代表立即执行生产者线程</span></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"> * 测试类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Resource r = <span class="keyword">new</span> Resource();</div><div class="line">		Input in = <span class="keyword">new</span> Input(r);</div><div class="line">		Output out = <span class="keyword">new</span> Output(r);</div><div class="line">		</div><div class="line">		<span class="keyword">new</span> Thread(in).start();</div><div class="line">		<span class="keyword">new</span> Thread(out).start();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h3><pre><code>1. start()和run()的区别:
    * run(): 封装了被线程执行的代码, 直接调用仅仅是普通方法的调用
    * start(): 启动线程, 并由JVM自动调用run()
2. sleep()和wait()的区别:
    * sleep(): 必须指定时间; 不释放锁
    * wait(): 可以指定时间,也可以不指定时间; 释放锁
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;线程与进程&quot;&gt;&lt;a href=&quot;#线程与进程&quot; class=&quot;headerlink&quot; title=&quot;线程与进程&quot;&gt;&lt;/a&gt;线程与进程&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;* 进程: 正在执行的程序. 当一个程序进入内存执行,即变成一个进程
* 线程: 进程中的一个执行单元,执行路径.
    * 单线程: 一个应用程序只有一条执行路径
    * 多线程: 一个应用程序有多条执行路径
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="JAVA基础" scheme="https://geekhoon.github.io/categories/JAVA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JAVA基础语法" scheme="https://geekhoon.github.io/tags/JAVA%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>IO流</title>
    <link href="https://geekhoon.github.io/2017/02/20/16-IO%E6%B5%81/"/>
    <id>https://geekhoon.github.io/2017/02/20/16-IO流/</id>
    <published>2017-02-19T16:01:42.000Z</published>
    <updated>2017-03-28T13:17:02.342Z</updated>
    
    <content type="html"><![CDATA[<h3 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><pre><code>* java.io.File 
* 文件和目录路径名的抽象表示形式
* 将操作系统中文件,目录(文件夹),路径,封装成File对象
* 提供方法, 操作系统中的内容
* File是与系统无关的类
</code></pre><a id="more"></a> 
<pre><code>* 文件 file
* 目录 directory
* 路径 path
</code></pre><h4 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h4><pre><code>1. static String pathSeparator : 与系统有关的 路径分隔符
    Windows: 打印出来是一个分号
    Linux : 打印出来是一个冒号
2. static separator : 与系统有关的默认 名称分隔符
    Windows: 打印出来是一个 \
    Linux: 打印出来是一个 /
</code></pre><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><pre><code>1. File(String pathname) : 传递路径名, 将路径封装成一个File类型对象
    路径名中\,要写两个,因为要转义
2. File(String parent,String child) : 传递路径, 传递字符串父路径, 字符串子路径
    好处: 可以单独操作父路径与子路径
3. File(File parent, String child) : 传递路径, 传递File类型父路径, 字符串子路径
    好处: 父路径是File类型, 父路径可以直接调用File类方法
</code></pre><h4 id="绝对路径与相对路径"><a href="#绝对路径与相对路径" class="headerlink" title="绝对路径与相对路径"></a>绝对路径与相对路径</h4><pre><code>* 绝对路径: 具体的一个文件路径, 在系统中具有唯一性
* 相对路径: 表示的是路径之间的相对关系, 
</code></pre><h4 id="File类的功能"><a href="#File类的功能" class="headerlink" title="File类的功能"></a>File类的功能</h4><h5 id="1-创建功能"><a href="#1-创建功能" class="headerlink" title="1.创建功能"></a>1.创建功能</h5><pre><code>1. 创建文件: boolean createNewFile(), 创建的文件路径和文件名, 是在File构造方法中给出的
    File file = new File(&quot;c:\\a.txt&quot;);
    boolean b = file.createNewFile();
    如果创建的文件已存在, 不再重新创建.
    这个方法只能创建文件, 不能创建文件夹
2. 创建文件夹: boolean mkdir(), 创建的文件夹路径和文件夹名, 是在File构造方法中给出的
    如果创建的文件夹已存在, 不再重新创建
3. 创建多层文件夹: boolean mkdirs()
    推荐使用, 因为创建一层和多层文件夹都可以
</code></pre><h5 id="2-删除功能"><a href="#2-删除功能" class="headerlink" title="2.删除功能"></a>2.删除功能</h5><pre><code>1. 删除文件或文件夹: boolean delete(), 删除的文件或文件夹, 是在File构造方法中给出
    文件不存在或被打开, 则删除失败
    删除文件可以直接删除,删除文件夹要确保该文件夹是空的
    删除,不走回收站,直接从硬盘删除(需谨慎)
</code></pre><h5 id="3-获取功能"><a href="#3-获取功能" class="headerlink" title="3.获取功能"></a>3.获取功能</h5><pre><code>1. 返回路径中表示的文件或文件夹名: String getName()
    获取路径中最后部分的名字, 不管存不存在
2. 返回路径字符串: String getPath()
3. 返回路径中表示的文件的字节数: long length()
    只能拿到文件的字节数, 文件夹没有字节数
4. 获取String类型绝对路径: String getAbsolutePath()
5. 获取File类型绝对路径: File getAbsoluteFile()
    eclipse环境中, 写的是一个相对路径, 获得的绝对位置是当前工程根目录
6. 获取String类型父路径: String getParent()
7. 获取File类型父路径: File getParentFile()
8. 获取到File构造方法中封装的路径中的文件和文件夹名: String[] list()
    获取的是文件名
9. 获取到File构造方法中封装的路径中的文件和文件夹名: File[] listFiles()
    获取的是目录或者文件的全路径
    8和9中如果要获得D盘根目录下的内容,要写成&quot;D:\\&quot;,如果只写成&quot;D:&quot;,获得是当前工程目录下的内容
10. 返回的是根目录盘符: static File[] listRoots()
</code></pre><h5 id="4-判断功能"><a href="#4-判断功能" class="headerlink" title="4.判断功能"></a>4.判断功能</h5><pre><code>1. 判断File构造方法中封装路径是否存在: boolean exists()
2. 判断File构造方法中封装的路径是不是文件夹 boolean isDirectorty()
3. 判断File构造方法中封装的路径是不是文件 boolean isFile()
4. 判断是否是隐藏的 boolean isHidden()
</code></pre><h4 id="文件过滤器"><a href="#文件过滤器" class="headerlink" title="文件过滤器"></a>文件过滤器</h4><pre><code>* 过滤一个目录下的指定扩展名的文件，或者包含某些关键字的文件夹
* 方法介绍
    * public File[] listFiles(FileFilter filter)
* 原理:
    * listFiles()遍历目录的同时，获取到了文件名全路径，
      调用过滤器的方法accept，将获取到的路径传递给accept方法的参数pathname
    * accept方法接收了参数pathname，参数是listFiles传递来的
    * 在accept方法中，进行判断，如果这个路径是Java文件，返回true，否则返回false
    * 一旦方法返回了true
    * listFiles将路径保存到File数组中
</code></pre><h4 id="遍历目录下的所有java文件"><a href="#遍历目录下的所有java文件" class="headerlink" title="遍历目录下的所有java文件"></a>遍历目录下的所有java文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">方式一: 自定义实现类,实现FileFilter接口,重写accep方法</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> <span class="keyword">implements</span> <span class="title">FileFilter</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File pathname)</span> </span>&#123;</div><div class="line"><span class="comment">//注意这个if条件的重要性: </span></div><div class="line"><span class="comment">//判断当前过滤到的是否是文件夹, 如果是文件夹, 返回true,则继续遍历该文件夹</span></div><div class="line"><span class="comment">//如果不加这个if,所有不是以.java为结尾的文件夹也被过滤掉,进不去文件夹内部进行遍历了</span></div><div class="line">		<span class="keyword">if</span> (pathname.isDirectory()) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> pathname.getName().toLowerCase().endsWith(<span class="string">".java"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		File file = <span class="keyword">new</span> File(<span class="string">"D:\\Demo"</span>);</div><div class="line">		getAllJava(file);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getAllJava</span><span class="params">(File file)</span></span>&#123;</div><div class="line">		File[] subFiles = file.listFiles(<span class="keyword">new</span> MyFilter());</div><div class="line">		<span class="keyword">for</span>(File subFile : subFiles)&#123;</div><div class="line">			<span class="keyword">if</span> (subFile.isDirectory()) &#123;</div><div class="line">				getAllJava(subFile);</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				System.out.println(subFile);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">方式二: 使用匿名内部类</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		File file = <span class="keyword">new</span> File(<span class="string">"D:\\Demo"</span>);</div><div class="line">		getAllJava(file);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getAllJava</span><span class="params">(File file)</span></span>&#123;</div><div class="line">		File[] subFiles = file.listFiles(<span class="keyword">new</span> FileFilter() &#123;</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File pathname)</span> </span>&#123;</div><div class="line">				<span class="keyword">if</span> (pathname.isDirectory()) &#123;</div><div class="line">					<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">return</span> pathname.getName().toLowerCase().endsWith(<span class="string">".java"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">		<span class="keyword">for</span>(File subFile : subFiles)&#123;</div><div class="line">			<span class="keyword">if</span> (subFile.isDirectory()) &#123;</div><div class="line">				getAllJava(subFile);</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				System.out.println(subFile);</div><div class="line">			&#125;</div><div class="line">		</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">方式三: 不使用文件过滤器, 自己写判断条件</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		File file = <span class="keyword">new</span> File(<span class="string">"D:\\Demo"</span>);</div><div class="line">		getAllJava(file);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getAllJava</span><span class="params">(File file)</span></span>&#123;</div><div class="line">		File[] subFiles = file.listFiles();</div><div class="line">		<span class="keyword">for</span> (File subFile : subFiles) &#123;</div><div class="line">			<span class="keyword">if</span> (subFile.isFile() &amp;&amp; subFile.getName().toLowerCase().endsWith(<span class="string">".java"</span>)) &#123;</div><div class="line">				System.out.println(subFile);</div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span> (subFile.isDirectory()) &#123;</div><div class="line">				getAllJava(subFile);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><h4 id="递归遍历全目录"><a href="#递归遍历全目录" class="headerlink" title="递归遍历全目录"></a>递归遍历全目录</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	File file = <span class="keyword">new</span> File(<span class="string">"D:\\demo"</span>);</div><div class="line">	getAllName(file);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getAllName</span><span class="params">(File file)</span> </span>&#123;</div><div class="line">	<span class="comment">//打印当前文件名</span></div><div class="line">	<span class="comment">//System.out.println(file);</span></div><div class="line">	<span class="comment">//拿到file文件夹下所有内容</span></div><div class="line">	File[] subFiles = file.listFiles();</div><div class="line">	<span class="comment">//注意加上这步, 以免报错</span></div><div class="line">	<span class="keyword">if</span> (subFiles != <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="comment">//遍历文件数组</span></div><div class="line">		<span class="keyword">for</span>(File subFile : subFiles)&#123;</div><div class="line">			<span class="comment">//如果是文件夹,继续递归调用getAllName</span></div><div class="line">			<span class="keyword">if</span> (subFile.isDirectory()) &#123;</div><div class="line">				getAllName(subFile);</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				<span class="comment">//如果是文件, 直接打印</span></div><div class="line">				System.out.println(subFile);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="概念和注意事项"><a href="#概念和注意事项" class="headerlink" title="概念和注意事项"></a>概念和注意事项</h4><pre><code>* 方法自己调用自己, 方法频繁进栈
* 递归分两种, 直接递归与间接递归
* 注意:
 1. 递归一定要有出口,必须可以让程序停下
 2. 递归次数不能过多
 3. 构造方法,禁止递归
</code></pre><h4 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	System.out.println(getFBNQ(<span class="number">12</span>));</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getFBNQ</span><span class="params">(<span class="keyword">int</span> month)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span> (month == <span class="number">1</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (month == <span class="number">2</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> getFBNQ(month-<span class="number">2</span>)+getFBNQ(month-<span class="number">1</span>);</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h3><pre><code>* 输入Input:  文件到程序
* 输出Output: 程序到文件
* 输入输出以Java程序为参照
</code></pre><h4 id="字节输出流"><a href="#字节输出流" class="headerlink" title="字节输出流"></a>字节输出流</h4><pre><code>* java.io.OutputStream 所有字节输出流的父类
* 是一个抽象类
* 作用: 从Java程序,写出文件
* 字节: 这样的流每次只操作文件中的一个字节
* 可以写任意文件, 注意不是文件夹
</code></pre><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><pre><code>1. write(int b): 写入一个字节, int可以变成byte
2. write(byte[] b): 写入字节数组
3. write(byte[] b, int off, int len): 写入字节数组, off是开始写入的索引,len是写几个
4. void close(): 关闭流对象,释放与流相关的资源, 关闭之前会调用flush方法
注意: 流对象, 操作文件的时候, 自己不做, 依赖操作系统
</code></pre><h5 id="FileOutputStream类"><a href="#FileOutputStream类" class="headerlink" title="FileOutputStream类"></a>FileOutputStream类</h5><pre><code>* OutputStream实现类
* 写入数据文件
* 构造方法:绑定输出的输出目的, 可以创建文件, 如果文件已存在, 直接覆盖
    * 参数(输出目的): 
        1. File 封装文件
        2. String 字符串的文件名
* 流对象使用步骤:
    1. 创键流子类的对象, 绑定输出目的
    2. 调用流对象的方法write写
    3. close释放资源
* 文件的续写和换行
    1. 续写使用FileOutputStream类构造方法: 
        * FileOutputStream(File file, boolean append)
        * FileOutputStream(String file, boolean append)
        append置为true, 可以续写
    2. 换行
        * \r\n
        * 可以写在上一行的末尾, 或者下一行的开头
        * fos.write(&quot;\r\n&quot;.getBytes());
* IO流中的异常处理
    try..catch..finally
    * 细节:
        1. 保证流对象变量, 作用域足够
        2. catch里面
           * 处理异常(输出异常信息)
           * 停止程序, 重新尝试
        3. 如果流对象建立失败了, 即new对象时失败了, 没有占用系统资源
           * 释放资源时, 对流对象进行判断null
           * 变量不是null, 对象建立成功, 需要关闭资源
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">	<span class="comment">//1. 创建流对象, 绑定输出的输出目的</span></div><div class="line">	FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"a.txt"</span>,<span class="keyword">true</span>);</div><div class="line">	<span class="comment">//2. 写入一个字节,会自动查ASCII表, 写入解码后的内容</span></div><div class="line">	fos.write(<span class="number">97</span>);<span class="comment">//这是一个字节</span></div><div class="line">	<span class="comment">//写入一个字节数组, 使用getBytes()后,查两次码表,第一次将字符串编码成对应的ASCII码</span></div><div class="line">	<span class="comment">//第二次是写入文件时, 将对应的ASCII码解码成对应的字符</span></div><div class="line">	<span class="keyword">byte</span>[] bytes = &#123;-<span class="number">65</span>,-<span class="number">66</span>,<span class="number">67</span>,<span class="number">68</span>&#125;;</div><div class="line">	fos.write(bytes); <span class="comment">//写入了一个汉字和CD, 两个负数代表一个汉字</span></div><div class="line">	fos.write(<span class="string">"\r\n"</span>.getBytes());<span class="comment">//插入换行</span></div><div class="line">	fos.write(bytes,<span class="number">2</span>,<span class="number">2</span>);<span class="comment">//写入字节数组的一部分, 写入了CD</span></div><div class="line">	<span class="comment">//写入字节数组的简便方式: 调用String类的getBytes()</span></div><div class="line">	fos.write(<span class="string">"www.geekhoon.com"</span>.getBytes());<span class="comment">//这是十六个字节 </span></div><div class="line">	foe.write(<span class="string">"你好"</span>.getBytes()); <span class="comment">//一个汉字是两个字节</span></div><div class="line">	<span class="comment">//3. 关闭流对象</span></div><div class="line">	fos.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//IO流中异常处理</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	<span class="comment">//声明变量</span></div><div class="line">	FileOutputStream fos = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">try</span>&#123;</div><div class="line">		<span class="comment">//创建对象</span></div><div class="line">		fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"c:\\a.txt"</span>);</div><div class="line">		<span class="comment">//写入数据</span></div><div class="line">		fos.write(<span class="number">100</span>);</div><div class="line">	&#125;<span class="keyword">catch</span>(IOException ex)&#123;</div><div class="line">		<span class="comment">//打印异常信息</span></div><div class="line">		ex.printStackTrace();</div><div class="line">		<span class="comment">//如果是运行时异常,IOException处理不了,要抛异常</span></div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"文件写入失败,请重试"</span>);</div><div class="line">	&#125;<span class="keyword">finally</span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//判断对象是否创建成功</span></div><div class="line">			<span class="keyword">if</span> (fos != <span class="keyword">null</span>) &#123;</div><div class="line">				fos.close();</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException ex) &#123;</div><div class="line">		<span class="comment">//关闭流对象,添加try.catch的原因是,对象即使创建成功了,可能在写入过程中</span></div><div class="line">		<span class="comment">//突然将外界存储断开,则写入失败, 要抛运行异常</span></div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"关闭资源失败"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="字节输入流"><a href="#字节输入流" class="headerlink" title="字节输入流"></a>字节输入流</h4><pre><code>* java.io.InputStream 所有字节输入流的父类
* 是一个抽象类
* 作用: 读取任意文件, 每次只读取1个字节
</code></pre><h5 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h5><pre><code>1. int read(): 读取一个字节
2. int read(byte[] b): 读取一定量的字节,存储到数组中
</code></pre><h5 id="FileInputStream类"><a href="#FileInputStream类" class="headerlink" title="FileInputStream类"></a>FileInputStream类</h5><pre><code>* InputStream实现类
* 构造方法: 为这个流对象绑定数据源
    * 参数(数据源)
        1. File 封装文件
        2. String 字符串的文件名
* 步骤:
    1. 创建字节输入流的子类对象
    2. 调用read读取
    3. 关闭资源
* read()执行一次, 自动读取下一个字节,返回值返回的是读取到的字节
    当读取到文件结尾时, 返回值为 -1 
* 注意一个点:
    fis.read()读的是字节,为啥返回int类型: 因为读到结尾返回-1, -1是两个字节,
    一个字节接收不了,所以使用int接收, 自动补齐32位
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">	<span class="comment">//创建InputStream的实现类对象</span></div><div class="line">	FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"a.txt"</span>);</div><div class="line">	<span class="comment">//定义len变量, 接收读到的字符</span></div><div class="line">	<span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line">	<span class="comment">//循环调用读方法</span></div><div class="line">	<span class="keyword">while</span>((len = fis.read()) != -<span class="number">1</span>)&#123;</div><div class="line">		<span class="comment">//len直接打印,会查ASCII,将字符转成ASCII值进行打印,所以要进行强转</span></div><div class="line">		<span class="comment">//如果文件中是0,不强转,打印的是48</span></div><div class="line">		System.out.print((<span class="keyword">char</span>)len);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//while循环的一种错误写法:</span></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 错误原因是: 每次执行fis.read(),都会读取到下一个字符,两次fis.read()读到的内容不一样</div><div class="line">	 * 和迭代器的next()道理类似</div><div class="line">	 * while(fis.read() != -1)&#123;</div><div class="line">	 * 		System.out.print(fis.read());</div><div class="line">	 * &#125;</div><div class="line">	 */</div><div class="line">	<span class="comment">//关闭流对象</span></div><div class="line">	fis.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="字节输入流FileInputStream读取字节数组"><a href="#字节输入流FileInputStream读取字节数组" class="headerlink" title="字节输入流FileInputStream读取字节数组"></a>字节输入流FileInputStream读取字节数组</h5><pre><code>* 数组作用:　缓冲, 提高效率
* read返回的int, 表示什么含义: 读取到的有效字节数
* int read(byte[] b): 读取到字节数组
* int read(byte[] b, int off, int len): 读取到字节数组, off是开始读取的索引,len是读几个
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">	<span class="comment">//创建字节输入流对象</span></div><div class="line">	FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"a.txt"</span>);</div><div class="line">	<span class="comment">//定义变量,接收read()返回值</span></div><div class="line">	<span class="keyword">int</span> len;</div><div class="line">	<span class="comment">//定义byte数组, 作为缓冲</span></div><div class="line">	<span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span>];</div><div class="line">	<span class="comment">//循环读取, 判断条件使用的是int read(byte[] b),别忘传入b</span></div><div class="line">	<span class="keyword">while</span>((len = fis.read(b)) != -<span class="number">1</span>)&#123;</div><div class="line">		<span class="comment">//使用String类的构造方法 String(byte[] b), 字节数组转成字符串</span></div><div class="line">		System.out.print(<span class="keyword">new</span> String(b,<span class="number">0</span>,len));</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//关闭流对象</span></div><div class="line">	fis.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">将根目录下的a.txt的内容拷贝到b.txt中,考虑到可能复制的是大文件</div><div class="line">所以使用<span class="keyword">byte</span>数组,作为缓冲,提高效率</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">	<span class="comment">//创建字节输入流对象</span></div><div class="line">	FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"a.txt"</span>);</div><div class="line">	<span class="comment">//创建字节输出流对象</span></div><div class="line">	FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"b.txt"</span>);</div><div class="line">	<span class="comment">//创建变量接收读的值</span></div><div class="line">	<span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line">	<span class="comment">//创建byte数组,做缓冲, 作为参数传入read方法中</span></div><div class="line">	<span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">	<span class="comment">//循环读入a.txt中的内容,并写入b.txt</span></div><div class="line">	<span class="keyword">while</span>((len = fis.read(b)) != -<span class="number">1</span>)&#123;</div><div class="line">		fos.write(b,<span class="number">0</span>,len);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//释放资源</span></div><div class="line">	fis.close();</div><div class="line">	fos.close();</div><div class="line">	System.out.println(<span class="string">"拷贝完毕!"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="字节流复制文件读取"><a href="#字节流复制文件读取" class="headerlink" title="字节流复制文件读取"></a>字节流复制文件读取</h4><pre><code>* 字节输入流, 绑定数据源
* 字节输出流, 绑定数据目的
* 抛运行异常的原因是让程序停止.抛编译异常的话,异常后面的代码还会执行
* 可用于图片加密: 添加异或, 因为一个数异或一个数两次,还等于本身,可用于加密,解密
* 如fos.write(len ^ 123)
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">读一个字节,写一个字节</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	<span class="comment">//定义两个流对象的变量</span></div><div class="line">	FileInputStream fis = <span class="keyword">null</span>;</div><div class="line">	FileOutputStream fos = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">try</span>&#123;</div><div class="line">		<span class="comment">//new两个对象</span></div><div class="line">		fis = <span class="keyword">new</span> FileInputStream(<span class="string">"a.txt"</span>); <span class="comment">//绑定数据源</span></div><div class="line">		fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"c.txt"</span>); <span class="comment">//绑定数据目的</span></div><div class="line">		<span class="comment">//定义变量接收read()返回值</span></div><div class="line">		<span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line">		<span class="comment">//循环读取并写入</span></div><div class="line">		<span class="keyword">while</span>((len = fis.read()) != -<span class="number">1</span>)&#123;</div><div class="line">			fos.write((<span class="keyword">char</span>)len);</div><div class="line">		&#125;</div><div class="line">	&#125;<span class="keyword">catch</span>(IOException ex)&#123;</div><div class="line">		ex.printStackTrace();</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"文件复制失败"</span>);</div><div class="line">	&#125;<span class="keyword">finally</span>&#123;</div><div class="line">		<span class="keyword">try</span>&#123;</div><div class="line">			<span class="keyword">if</span> (fos != <span class="keyword">null</span>) &#123;</div><div class="line">				fos.close();</div><div class="line">			&#125;</div><div class="line">		&#125;<span class="keyword">catch</span>(IOException ex)&#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"释放资源失败"</span>);</div><div class="line">		&#125;<span class="keyword">finally</span>&#123;</div><div class="line">			<span class="keyword">try</span>&#123;</div><div class="line">				<span class="keyword">if</span> (fis != <span class="keyword">null</span>) &#123;</div><div class="line">					fis.close();</div><div class="line">				&#125;</div><div class="line">			&#125;<span class="keyword">catch</span>(IOException ex)&#123;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"释放资源失败"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">采用数组缓冲,提高效率</div><div class="line">读字节数组, 写字节数组</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	<span class="comment">//定义两个流对象的变量</span></div><div class="line">	FileInputStream fis = <span class="keyword">null</span>;</div><div class="line">	FileOutputStream fos = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">try</span>&#123;</div><div class="line">		<span class="comment">//new两个对象</span></div><div class="line">		fis = <span class="keyword">new</span> FileInputStream(<span class="string">"a.txt"</span>); <span class="comment">//绑定数据源</span></div><div class="line">		fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"d.txt"</span>); <span class="comment">//绑定数据目的</span></div><div class="line">		<span class="comment">//定义变量接收read()返回值</span></div><div class="line">		<span class="keyword">int</span> len = <span class="number">0</span>; <span class="comment">//len为每次读取的有效字节个数</span></div><div class="line">		<span class="comment">//定义数组, 作为缓冲</span></div><div class="line">		<span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">		<span class="comment">//循环读取并写入, 读数组,写数组</span></div><div class="line">		<span class="keyword">while</span>((len = fis.read(bytes)) != -<span class="number">1</span>)&#123;</div><div class="line">			fos.write(bytes,<span class="number">0</span>,len);</div><div class="line">		&#125;</div><div class="line">	&#125;<span class="keyword">catch</span>(IOException ex)&#123;</div><div class="line">		ex.printStackTrace();</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"文件复制失败"</span>);</div><div class="line">	&#125;<span class="keyword">finally</span>&#123;</div><div class="line">		<span class="keyword">try</span>&#123;</div><div class="line">			<span class="keyword">if</span> (fos != <span class="keyword">null</span>) &#123;</div><div class="line">				fos.close();</div><div class="line">			&#125;</div><div class="line">		&#125;<span class="keyword">catch</span>(IOException ex)&#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"释放资源失败"</span>);</div><div class="line">		&#125;<span class="keyword">finally</span>&#123;</div><div class="line">			<span class="keyword">try</span>&#123;</div><div class="line">				<span class="keyword">if</span> (fis != <span class="keyword">null</span>) &#123;</div><div class="line">					fis.close();</div><div class="line">				&#125;</div><div class="line">			&#125;<span class="keyword">catch</span>(IOException ex)&#123;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"释放资源失败"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	System.out.println(<span class="string">"复制结束"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h3><h4 id="字符输出流"><a href="#字符输出流" class="headerlink" title="字符输出流"></a>字符输出流</h4><pre><code>* java.io.Writer 所有字符输出流的父类
* 只能写文本文件,文本文件就是能用记事本打开看的懂的文件
</code></pre><h5 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h5><pre><code>1. write(int c): 写一个字符
2. write(char[] c): 写字符数组
3. write(char[] c, int off, int len): 字符数组一部分
4. write(String s): 写入字符串
</code></pre><h5 id="FileWriter类"><a href="#FileWriter类" class="headerlink" title="FileWriter类"></a>FileWriter类</h5><pre><code>* Writer的子类
* 构造方法: 
    绑定数据目的,注意是文件路径,不是文件夹路径,如果文件路径不存在,自动创建,存在则覆盖
    * File 类型对象
    * String 文件名
* 字符输出流写数据的时候, 必须要运行一个刷新功能flush()
* 建议write一次,flush一次, 最后close
</code></pre><h4 id="字符输入流"><a href="#字符输入流" class="headerlink" title="字符输入流"></a>字符输入流</h4><pre><code>* java.io.Reader 所有字符输入流的父类
* 只能读文本文件
* 不能读字符串
</code></pre><h5 id="方法-3"><a href="#方法-3" class="headerlink" title="方法"></a>方法</h5><pre><code>1. int read(): 读取一个字符
2. int read(char[] c): 读取一个字符数组
</code></pre><h5 id="FileReader类"><a href="#FileReader类" class="headerlink" title="FileReader类"></a>FileReader类</h5><pre><code>* Reader的子类
* 构造方法: 绑定数据源
    * File 类型对象
    * String 文件名
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">字符流完成文本文件复制</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	<span class="comment">// 创建字符流对象</span></div><div class="line">	FileReader fr = <span class="keyword">null</span>;</div><div class="line">	FileWriter fw = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		<span class="comment">// new字符流对象</span></div><div class="line">		fr = <span class="keyword">new</span> FileReader(<span class="string">"a.txt"</span>); <span class="comment">// 绑定数据源</span></div><div class="line">		fw = <span class="keyword">new</span> FileWriter(<span class="string">"e.txt"</span>); <span class="comment">// 绑定数据目的</span></div><div class="line">		<span class="comment">// 定义变量,接收read返回值</span></div><div class="line">		<span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line">		<span class="comment">// 定义字符数组,做缓冲</span></div><div class="line">		<span class="keyword">char</span>[] cBuff = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>]; <span class="comment">// 2KB</span></div><div class="line">		<span class="comment">// 循环读写</span></div><div class="line">		<span class="keyword">while</span> ((len = fr.read(cBuff)) != -<span class="number">1</span>) &#123;</div><div class="line">			fw.write(cBuff, <span class="number">0</span>, len);</div><div class="line">			<span class="comment">// 记住,写完要刷新</span></div><div class="line">			fw.flush();</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">catch</span> (IOException ex) &#123;</div><div class="line">		ex.printStackTrace();</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"复制失败"</span>);</div><div class="line">	&#125; <span class="keyword">finally</span> &#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">if</span> (fw != <span class="keyword">null</span>) &#123;</div><div class="line">				fw.close();</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException ex) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"释放资源失败"</span>);</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span> (fr != <span class="keyword">null</span>) &#123;</div><div class="line">					fr.close();</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException ex) &#123;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"释放资源失败"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h3><h4 id="字符转字节的过程"><a href="#字符转字节的过程" class="headerlink" title="字符转字节的过程"></a>字符转字节的过程</h4><pre><code>* java.io.OutputStreamWriter 继承Writer类
* OutputStreamWriter的子类是FileWriter, 本质就是一个字符输出流, 操作字节输出流,写文本文件
* 字符流通向字节流的桥梁, 将字符流转成字节流
* 主要作用: 把java程序中写好的字符流转成可选的编码表对应的字节流, 然后通过字节输出流写入到文件中
* GBK中一个汉字2个字节, UTF-8中一个汉字3个字节
</code></pre><h5 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h5><pre><code>1. OutputStreamWriter(OutputStream out): 接收字节输出流
    字节输出流: FileOutpuStream
2. OutputStreamWriter(OutputStream out, String charsetName): 接收字节输出流,转成对应编码的字节流输出流,再写入到数据目的 
    charsetName : 编码表名(不区分大小写)  可写的: GBK, UTF-8
    使用GBK的话, 不用在参数中传递GBK, 因为默认GBK
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">	getGBK();</div><div class="line">	getUTF8();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getGBK</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">	<span class="comment">//创建字节输出流</span></div><div class="line">	FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"D:\\gbk.txt"</span>);</div><div class="line">	<span class="comment">//创建转换流对象, 包装字节输出流</span></div><div class="line">	OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(fos, <span class="string">"GBK"</span>);</div><div class="line">	<span class="comment">//写</span></div><div class="line">	osw.write(<span class="string">"你好"</span>);</div><div class="line">	<span class="comment">//关</span></div><div class="line">	osw.close();<span class="comment">//关闭转换流对象,字节输出流对象也跟着关闭了</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getUTF8</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line"><span class="comment">//创建字节输出流, 如果绑定数据目的是"UTF-8.txt",在eclipse中打开,还会乱码</span></div><div class="line"><span class="comment">//因为即使用UTF-8写进UTF-8.txt,但eclipse默认使用的是GBK码表,还会将UTF-8转成GBK,不在eclipse中打开就行</span></div><div class="line">	FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"D:\\UTF-8.txt"</span>);</div><div class="line">	<span class="comment">//创建转换流对象</span></div><div class="line">	OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(fos, <span class="string">"UTF-8"</span>);</div><div class="line">	<span class="comment">//写</span></div><div class="line">	osw.write(<span class="string">"你好"</span>);</div><div class="line">	<span class="comment">//关</span></div><div class="line">	osw.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="字节转字符的过程"><a href="#字节转字符的过程" class="headerlink" title="字节转字符的过程"></a>字节转字符的过程</h4><pre><code>* java.io.InputStreamReader ,继承Reader
* InputStreamReader的子类是FileReader, 本质就是一个字符输入流, 操作字节
* 字节流通向字符流的桥梁, 将字节流转成字符流
* 读取的方法: read() : 读取一个字符,也可以读取一个字符数组
</code></pre><h5 id="构造方法-2"><a href="#构造方法-2" class="headerlink" title="构造方法"></a>构造方法</h5><pre><code>1. InputStreamReader(InputStream in)
2. InputStreamReader(InputStream in, String charsetName)
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">	<span class="comment">//readGBK() ; //如果要读取一个GBK编码的文件,使用子类字符输入流FileReader或者字节输入流FileInputStream即可,无需指定编码表</span></div><div class="line">	readUTF8(); <span class="comment">//当需要读取一个UTF-8编码的文件时,需要使用转换流,指定转换后的字符流是UTF-8的格式</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readGBK</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">	<span class="comment">//创建字节输入流</span></div><div class="line">	FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"D:\\gbk.txt"</span>);</div><div class="line">	<span class="comment">//创建转换流对象,包装字节输入流</span></div><div class="line">	InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(fis, <span class="string">"GBK"</span>);</div><div class="line">	<span class="comment">//创建char[], 作为缓冲</span></div><div class="line">	<span class="keyword">char</span>[] c = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</div><div class="line">	<span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>((len = isr.read(c)) != -<span class="number">1</span>)&#123;</div><div class="line">		System.out.println(<span class="keyword">new</span> String(c,<span class="number">0</span>,len));</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//关闭流对象</span></div><div class="line">	isr.close();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readUTF8</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">	<span class="comment">//创建字节输入流</span></div><div class="line">	FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"D:\\UTF-8.txt"</span>);</div><div class="line">	<span class="comment">//创建转换流对象,包装字节输入流</span></div><div class="line">	InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(fis, <span class="string">"UTF-8"</span>);</div><div class="line">	<span class="comment">//创建char[], 作为缓冲</span></div><div class="line">	<span class="keyword">char</span>[] c = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</div><div class="line">	<span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>((len = isr.read(c)) != -<span class="number">1</span>)&#123;</div><div class="line">		System.out.println(<span class="keyword">new</span> String(c,<span class="number">0</span>,len));</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//关闭流对象</span></div><div class="line">	isr.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="转换流和子类区别"><a href="#转换流和子类区别" class="headerlink" title="转换流和子类区别"></a>转换流和子类区别</h4><pre><code>* 继承关系
    OutputStreamWriter
        |--FileWriter
    InputStreamReader
        |--FileReader
* 区别:
    * 当操作的字符文件，使用的是默认编码表时可以不用父类，而直接用子类就完成操作了，简化了代码。
    * 以下三句话功能相同
    1. InputStreamReader isr = new InputStreamReader(new FileInputStream(&quot;a.txt&quot;));//默认字符集。
    2. InputStreamReader isr = new InputStreamReader(new FileInputStream(&quot;a.txt&quot;),&quot;GBK&quot;);//指定GBK字符集。
    3. FileReader fr = new FileReader(&quot;a.txt&quot;);
* 使用场景:
    1. 向数据目的中写入UTF-8格式的内容时, 需要用到OutputStreamWriter(OutputStream,&quot;UTF-8&quot;)
    2. 从数据源中读取UTF-8格式的内容时, 需要用到InputStreamReader(InputStream,&quot;UTF-8&quot;)
* 应用:
    1. 向一个文件中写入GBK格式的内容,读这个GBK格式的文件,生成内容与GBK格式相同的UTF-8格式的文件
        步骤:
        1. 写入GBK格式的内容:
            * FileWriter fw = new FileWriter(&quot;d:\\a.txt&quot;);
            * 或OuputStreamWriter osw = new OuputStreamWriter(new FileOutputStream(&quot;d:\\a.txt&quot;),&quot;GBK&quot;);
            * 或OuputStreamWriter osw = new OuputStreamWriter(new FileOutputStream(&quot;d:\\a.txt&quot;));
        2. 读GBK格式的内容:
            * FileReader fr = new FileReader(&quot;d:\\a.txt&quot;);
            * 或InputStreamReader isr = new InputStreamReader(new FileInputStream(&quot;d:\\a.txt&quot;),&quot;GBK&quot;);
            * 或InputStreamReader isr = new InputStreamReader(new FileInputStream(&quot;d:\\a.txt&quot;));
        3. 写入UTF-8格式:
            * OuputStreamWriter osw = new OuputStreamWriter(new FileOutputStream(&quot;d:\\b.txt&quot;),&quot;UTF-8&quot;);
    * 记住一句话: 什么格式的内容, 就是什么格式来读, 要写入什么格式, 就用什么格式来写
</code></pre><h3 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h3><pre><code>* 提高IO流读写速度
* 分为字节缓冲流和字符缓冲流
* 装饰设计模式
</code></pre><h4 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h4><pre><code>1. 字节输出缓冲流
    * java.io.BufferedOutputStream
    * 继承自OutputStream
    * 作用: 提高原有输出流的写入效率
    * 方法: write() 字节或字节数组
    * 先写入底层输出缓冲流,一定量后,再一起写入
    * 构造方法: 
        1. BufferedOutputStream(OutputStream out) :
        可以传递任意的字节输出流, 传递的是哪个字节流,就对哪个字节流提高效率
2. 字节输入缓冲流
    * java.io.BufferedInputStream
    * 继承自InputStream
    * 方法: read() 字节或字节数组
    * 构造方法:
        1. BufferedInputStream(InputtStream out)
        可以传递任意的字节输入流, 传递的是哪个字节流,就对哪个字节流提高效率
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">字节输出缓冲流</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedOutputStreamDemo</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">		<span class="comment">//创建字节输出流,绑定文件</span></div><div class="line">		<span class="comment">//FileOutputStream fos = new FileOutputStream("c:\\buffer.txt");</span></div><div class="line">		<span class="comment">//创建字节输出流缓冲流的对象,构造方法中,传递字节输出流</span></div><div class="line">		BufferedOutputStream bos = <span class="keyword">new</span></div><div class="line">				BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"c:\\buffer.txt"</span>));</div><div class="line">		</div><div class="line">		bos.write(<span class="number">55</span>);</div><div class="line">		</div><div class="line">		<span class="keyword">byte</span>[] bytes = <span class="string">"HelloWorld"</span>.getBytes();</div><div class="line">		</div><div class="line">		bos.write(bytes);</div><div class="line">		</div><div class="line">		bos.write(bytes, <span class="number">3</span>, <span class="number">2</span>);</div><div class="line">		</div><div class="line">		bos.close();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">字节输入缓冲流</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedInputStreamDemo</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		<span class="comment">//创建字节输入流的缓冲流对象,构造方法中包装字节输入流,包装文件</span></div><div class="line">		BufferedInputStream bis = <span class="keyword">new</span> </div><div class="line">				BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"c:\\buffer.txt"</span>));</div><div class="line">		<span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10</span>];</div><div class="line">		<span class="keyword">int</span> len = <span class="number">0</span> ;</div><div class="line">		<span class="keyword">while</span>((len = bis.read(bytes))!=-<span class="number">1</span>)&#123;</div><div class="line">			System.out.print(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,len));</div><div class="line">		&#125;</div><div class="line">		bis.close();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="四种文件复制效率分析"><a href="#四种文件复制效率分析" class="headerlink" title="四种文件复制效率分析"></a>四种文件复制效率分析</h4><pre><code>* 推荐使用第二种和第四种
</code></pre><h5 id="字节流读写单个字节"><a href="#字节流读写单个字节" class="headerlink" title="字节流读写单个字节"></a>字节流读写单个字节</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copy_1</span><span class="params">(File src,File desc)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">	FileInputStream fis = <span class="keyword">new</span> FileInputStream(src);</div><div class="line">	FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(desc);</div><div class="line">	<span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>((len = fis.read()) != -<span class="number">1</span>)&#123;</div><div class="line">		fos.write(len);</div><div class="line">	&#125;</div><div class="line">	fos.close();</div><div class="line">	fis.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="字节流读写字节数组"><a href="#字节流读写字节数组" class="headerlink" title="字节流读写字节数组"></a>字节流读写字节数组</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copy_2</span><span class="params">(File src,File desc)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">	FileInputStream fis = <span class="keyword">new</span> FileInputStream(src);</div><div class="line">	FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(desc);</div><div class="line">	<span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">	<span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>((len = fis.read(b)) != -<span class="number">1</span>)&#123;</div><div class="line">		fos.write(b, <span class="number">0</span>, len);</div><div class="line">	&#125;</div><div class="line">	fos.close();</div><div class="line">	fis.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="字节流缓冲区流读写单个字节"><a href="#字节流缓冲区流读写单个字节" class="headerlink" title="字节流缓冲区流读写单个字节"></a>字节流缓冲区流读写单个字节</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copy_3</span><span class="params">(File src,File desc)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">	BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(src));</div><div class="line">	BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(desc));</div><div class="line">	<span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>((len = bis.read()) != -<span class="number">1</span>)&#123;</div><div class="line">		bos.write(len);</div><div class="line">	&#125;</div><div class="line">	bos.close();</div><div class="line">	bis.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="字节流缓冲区流读写字节数组"><a href="#字节流缓冲区流读写字节数组" class="headerlink" title="字节流缓冲区流读写字节数组"></a>字节流缓冲区流读写字节数组</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copy_4</span><span class="params">(File src,File desc)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">	BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(src));</div><div class="line">	BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(desc));</div><div class="line">	<span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line">	<span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">	<span class="keyword">while</span>((len = bis.read(b)) != -<span class="number">1</span>)&#123;</div><div class="line">		bos.write(b,<span class="number">0</span>,len);</div><div class="line">	&#125;</div><div class="line">	bos.close();</div><div class="line">	bis.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="字符缓冲流"><a href="#字符缓冲流" class="headerlink" title="字符缓冲流"></a>字符缓冲流</h4><pre><code>1. 字符输出缓冲流
    * BufferedWriter, 继承自Writer
    * 方法: write() : 单个字符, 字符数组, 字符串
    * 构造方法:
        1. BufferedWriter(Writer w): 传递任意字符输出流
        传递谁,就高效谁
        能传递的字符输出流: FileWriter,OutputStreamWriter
    * BufferedWriter特有方法: newLine(): 实现换行,功能与\r\n一样,区别是这个方法可以跨平台
2. 字符缓冲输入流
    * BufferedReader, 继承自Reader
    * 有一个子类LineNumberReader, 可以读行号
    * 方法: read() 单个字符, 字符数组
    * 特有方法: String readLine(): 可以读取文本的一行, 返回值是String,读取到末尾,返回null
    * 构造方法:
        1.  BufferedReader(Reader r)
        能传递的字符输入流: FileReader,InputStreamReader
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">字符输出缓冲流</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">	<span class="comment">//创建字符输出流</span></div><div class="line">	FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"D:\\a.txt"</span>);</div><div class="line">	<span class="comment">//创建字符输出缓冲流, 传入字符输出流,包装数据目的</span></div><div class="line">	BufferedWriter bfw = <span class="keyword">new</span> BufferedWriter(fw);</div><div class="line">	</div><div class="line">	bfw.write(<span class="number">97</span>);</div><div class="line">	bfw.newLine();</div><div class="line">	bfw.flush();</div><div class="line">	</div><div class="line">	bfw.write(<span class="string">"你好"</span>.toCharArray());</div><div class="line">	nfw.newLine();</div><div class="line">	bfw.flush();</div><div class="line">	</div><div class="line">	bfw.write(<span class="string">"大家好"</span>);</div><div class="line">	bfw.flush();</div><div class="line">	</div><div class="line">	bfw.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">字符输入缓冲流</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">	<span class="comment">//定义计数变量作为行号</span></div><div class="line">	<span class="keyword">int</span> lineNumber = <span class="number">0</span>;</div><div class="line">	<span class="comment">//创建字符输入流</span></div><div class="line">	FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"D:\\a.txt"</span>);</div><div class="line">	<span class="comment">//创建字符输入缓冲流,传递字符输入流,包装数据源</span></div><div class="line">	BufferedReader bfr = <span class="keyword">new</span> BufferedReader(fr);</div><div class="line">	<span class="comment">//定义String类型变量, 接收readLine()返回值</span></div><div class="line">	String line = <span class="keyword">null</span>;</div><div class="line">	<span class="comment">//循环读取</span></div><div class="line">	<span class="keyword">while</span>((line = bfr.readLine()) != <span class="keyword">null</span>)&#123;</div><div class="line">		lineNumber++;</div><div class="line">		System.out.println(lineNumber+<span class="string">"  "</span>+line);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//关闭缓冲流对象</span></div><div class="line">	bfr.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="使用字符缓冲流对象-复制文本文件"><a href="#使用字符缓冲流对象-复制文本文件" class="headerlink" title="使用字符缓冲流对象,复制文本文件"></a>使用字符缓冲流对象,复制文本文件</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">注意: </div><div class="line"><span class="number">1</span>.生成的b.txt会比a.txt大两个字节,因为写入最后一行后,又nextLine()了</div><div class="line"><span class="number">2</span>.注意这种读写方式,读一行,写一行,加一个换行,加一个刷新</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">	<span class="comment">//创建字符输入缓冲流对象</span></div><div class="line">	BufferedReader bfr = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"D:\\a.txt"</span>));</div><div class="line">	<span class="comment">//创建字符输出缓冲流对象</span></div><div class="line">	BufferedWriter bfw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"D:\\b.txt"</span>));</div><div class="line">	<span class="comment">//创建String类型变量接收readLine()返回值</span></div><div class="line">	String line = <span class="keyword">null</span>;</div><div class="line">	<span class="comment">//循环读, 读一行, 写一行, 加一个换行</span></div><div class="line">	<span class="keyword">while</span>((line = bfr.readLine()) != <span class="keyword">null</span>)&#123;</div><div class="line">		bfw.write(line);</div><div class="line">		bfw.newLine();</div><div class="line">		<span class="comment">//刷新</span></div><div class="line">		bfw.flush();</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//关闭流对象</span></div><div class="line">	bfw.close();</div><div class="line">	bfr.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="IO流对象的操作规律"><a href="#IO流对象的操作规律" class="headerlink" title="IO流对象的操作规律"></a>IO流对象的操作规律</h3><h4 id="IO流相关类继承关系"><a href="#IO流相关类继承关系" class="headerlink" title="IO流相关类继承关系"></a>IO流相关类继承关系</h4><pre><code>1. 字节流抽象父类:
        输入流:
            InputStream:
                |-- FileInputStream(字节输入流的子类)
                         |- read(int len) : 读取单个字节
                         |- read(byte[] b): 读取字节数组
                |-- BufferedInputStream(InputStream in)
        输出流:
            OutputStream:
                |-- FileOutputStream(字节输出流的子类)
                         |- write(int len) : 写出单个字节
                         |- write(byte[] b): 写出字节数组
                         |- write(byte[] b,int off,int len): 写出字节数组的一部分
                |-- BufferedOutputStream(OutputStream ou)
2. 字符流抽象父类
        输入流:
            Reader:
                |-- InputStreamReader(将字节转成字符)
                         |-- FileReader(字符输入流的子类)
                                |- read(char c) : 读取单个字符
                                |- read(char[] ch): 读取字符数组
                |-- BufferedReader(Reader r)
                         |- readLine() : 读取一整行
        输出流:  
            Writer:
                |-- OutputStreamWriter(将字符转成字节)
                         |-- FileWriter(字符输出流的子类)
                                |- write(char c) : 写出单个字符
                                |- write(char[] ch): 写出字符数组
                                |- write(String str): 写出字符串
                |-- BufferedWriter(Writer w)
                         |- newLine() : 写出一个换行
        对象操作流：
                |-- ObjectInputStream(对象输入流)
                         |- readObject();        对象必须实现序列化接口

                |-- ObjectOutputStream(对象输出流)
                            |- writeObject(Object obj)   
        打印流：
                PrintWriter:（流对象,boolean b）  如果是true、自动刷新
                    1.可以自动刷新
                    2.只能输出
                    3.println()(原样输出、并且自带换行)   print()   printf()
</code></pre><h4 id="操作规律"><a href="#操作规律" class="headerlink" title="操作规律"></a>操作规律</h4><pre><code>1. 如果操作的是纯文本文件, 直接使用带缓冲的字符流即可! 读一行,写一行
2. 如果操作的是所有文件,直接使用待缓冲的字节流即可! 带上小数组
3. 如果需要编码转换, 直接使用转换流即可!
</code></pre><h3 id="Properties集合类"><a href="#Properties集合类" class="headerlink" title="Properties集合类"></a>Properties集合类</h3><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><pre><code>* HashTable的子类, 实现Map接口
* 集合都是临时存储, 但Properties可以与IO对象结合使用,实现持久化存储
* 没有泛型(不能写泛型), 键值对都是字符串
</code></pre><h4 id="存储键值对"><a href="#存储键值对" class="headerlink" title="存储键值对"></a>存储键值对</h4><pre><code>* 特有方法:
    1. setProperty(String key, String value): 功能等同于Map中的put
    2. getProperty(String key): 通过键获取值, 功能等同于Map中的get(index)
    3. StringPropertyNames(): 将集合的键存储到Set集合, 类似与keySet
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Properties pro = <span class="keyword">new</span> Properties();</div><div class="line">pro.setProperty(<span class="string">"a"</span>, <span class="string">"1"</span>);</div><div class="line">pro.setProperty(<span class="string">"b"</span>, <span class="string">"2"</span>);</div><div class="line">pro.setProperty(<span class="string">"c"</span>, <span class="string">"3"</span>);	</div><div class="line">System.out.println(pro.getProperty(<span class="string">"a"</span>)); <span class="comment">//1</span></div><div class="line">System.out.println(pro.getProperty(<span class="string">"b"</span>)); <span class="comment">//2</span></div><div class="line">System.out.println(pro.getProperty(<span class="string">"c"</span>)); <span class="comment">//3</span></div><div class="line">System.out.println(pro.getProperty(<span class="string">"d"</span>)); <span class="comment">//null</span></div><div class="line"><span class="comment">//遍历</span></div><div class="line">Set&lt;String&gt; keySet = pro.stringPropertyNames();</div><div class="line"><span class="keyword">for</span> (String key : keySet) &#123;</div><div class="line">	System.out.println(key+<span class="string">"..."</span>+pro.getProperty(key));<span class="comment">//存取无序</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="特有方法"><a href="#特有方法" class="headerlink" title="特有方法"></a>特有方法</h4><h5 id="load"><a href="#load" class="headerlink" title="load"></a>load</h5><pre><code>1. load(InputStream in)
2. load(Reader r)
* 传递任意的字节或字符输入流
* 作用: 读取文件中的键值对到集合
* Properties并不是只能读.properties配置文件,.txt等文本也可以读,只是通常而已
* .properties代表键值对格式存储的文件
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">注意config.properties中写键值的时候,键和值后不要加空格或分号,否则就成为键或值的一部分了</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function_2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">	Properties pro = <span class="keyword">new</span> Properties();</div><div class="line">	FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"config.properties"</span>);</div><div class="line">	pro.load(fr);</div><div class="line">	fr.close();</div><div class="line">	System.out.println(pro);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="store"><a href="#store" class="headerlink" title="store"></a>store</h5><pre><code>1. store(OutputStream o, String comments)
2. store(Writer w, String comments)
* 接收所有的字节或字符输出流
* 作用: 将集合中的键值对写到文件
* String类型的comments写的是: 写回文件的原因,可以写&quot;&quot;,或者英文形式,如&quot;abc&quot;
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function_3</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">	Properties pro = <span class="keyword">new</span> Properties();</div><div class="line">	pro.setProperty(<span class="string">"name"</span>, <span class="string">"geekhoon"</span>);</div><div class="line">	pro.setProperty(<span class="string">"age"</span>, <span class="string">"11"</span>);</div><div class="line">	pro.setProperty(<span class="string">"blog"</span>, <span class="string">"www.geekhoon.com"</span>);</div><div class="line">	FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"config.properties"</span>);</div><div class="line">	pro.store(fw, <span class="string">"just a test"</span>);<span class="comment">//后面写原因,可以写""</span></div><div class="line">	fw.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="对象操作流"><a href="#对象操作流" class="headerlink" title="对象操作流"></a>对象操作流</h3><h4 id="对象的序列化与反序列化"><a href="#对象的序列化与反序列化" class="headerlink" title="对象的序列化与反序列化"></a>对象的序列化与反序列化</h4><pre><code>* 序列化: 对象中的数据,以流的形式,写入到文件中保存
* 反序列化: 在文件中,以流的形式,将对象读取出来
</code></pre><h4 id="ObjectOutputStream流写对象"><a href="#ObjectOutputStream流写对象" class="headerlink" title="ObjectOutputStream流写对象"></a>ObjectOutputStream流写对象</h4><pre><code>* 将对象数据写到文件中, 实现序列化
* 构造方法:
    * ObjectOutputStream(OutputStream out),传递任意的字节输出流
* 方法:
    * void writeObject(Object obj): 写出对象的方法
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">对象类,要实现Serializable接口</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">	构造方法;</div><div class="line">	get/set;</div><div class="line">	toString();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">	<span class="comment">//创建字节输出流,封装文件</span></div><div class="line">	FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"d:\\person.txt"</span>);</div><div class="line">	<span class="comment">//创建序列化流的对象,构造方法传递字节输出流</span></div><div class="line">	ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(fos);</div><div class="line">	Person p = <span class="keyword">new</span> Person(<span class="string">"张三"</span>,<span class="number">11</span>);</div><div class="line">	<span class="comment">//调用序列化流的方法writeObject,写出对象</span></div><div class="line">	oos.writeObject(p);</div><div class="line">	oos.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="ObjectInputStream流读取对象"><a href="#ObjectInputStream流读取对象" class="headerlink" title="ObjectInputStream流读取对象"></a>ObjectInputStream流读取对象</h4><pre><code>* 从文件中读取对象数据, 实现反序列化
* 构造方法:
    * ObjectInputStream(InputStream in), 传递任意的字节输入流
    * 注意: 字节输入流封装的文件,必须是序列化的文件
* 方法:
    * Object readObject(): 读取对象
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</div><div class="line">	FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"d:\\person.txt"</span>);</div><div class="line">	<span class="comment">//创建反序列化流的对象,构造方法传递字节输入流</span></div><div class="line">	ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis);</div><div class="line">	<span class="comment">//调用反序列化的方法readObject(),读取对象</span></div><div class="line">	Object obj = ois.readObject();<span class="comment">//readObject()要抛ClassNotFoundException这个异常</span></div><div class="line">	System.out.println(obj); <span class="comment">//打印Person [name=张三, age=11]</span></div><div class="line">	ois.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="静态不能序列化"><a href="#静态不能序列化" class="headerlink" title="静态不能序列化"></a>静态不能序列化</h4><pre><code>* 被static修饰的成员变量,属于类
* 非静态成员变量才属于对象
* 对象序列化和反序列化操作的是对象, 静态变量不能序列化
* 如: private static int age;
    * readObject()打印的结果就是Person [name=张三, age=0]
</code></pre><h4 id="transient关键字"><a href="#transient关键字" class="headerlink" title="transient关键字"></a>transient关键字</h4><pre><code>* 不能写成静态变量, 也不想被序列化, 需要使用transient关键字
* 作用: 阻止成员变量序列化
* 如:　private transient int age;
    * readObject()打印的结果就是Person [name=张三, age=0]
</code></pre><h4 id="Serializable接口的含义"><a href="#Serializable接口的含义" class="headerlink" title="Serializable接口的含义"></a>Serializable接口的含义</h4><pre><code>* 接口中并没有方法
* 这种接口称为标记接口
* 实现标记接口的实现类, 才可以序列化
</code></pre><h4 id="序列化中的序列号冲突问题"><a href="#序列化中的序列号冲突问题" class="headerlink" title="序列化中的序列号冲突问题"></a>序列化中的序列号冲突问题</h4><pre><code>* 序列化之后,还没进行反序列化,去把person类的内容进行了修改,再进行反序列化,会报错
</code></pre><h4 id="序列化中自定义的序列号"><a href="#序列化中自定义的序列号" class="headerlink" title="序列化中自定义的序列号"></a>序列化中自定义的序列号</h4><pre><code>*　(权限) static　final long serialVersionUID = 1L;
*　权限和值可以改,序列化之前可以改
* 类,自定义了序列号,编译器不会计算序列号
</code></pre><h3 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><pre><code>* PrintStream类
* PrintWriter类
* 特点: 
    1. 此流不负责数据源, 只负责数据目的
    2. 为其他输出流, 添加功能
    3. 永远不会抛出IOException, 但是可能抛出其他异常 
* 两个打印流的方法完全一致
* 区别在于构造方法,就是打印流的输出目的端
    1. PrintStream: 构造方法,接收File对象,字节输出流OutputStream,字符串文件名
    2. PrintWriter: 构造方法,接收File对象,字节输出流OutputStream,字符串文件名, 字符输出流Writer
</code></pre><h4 id="打印流输出目的是File对象"><a href="#打印流输出目的是File对象" class="headerlink" title="打印流输出目的是File对象"></a>打印流输出目的是File对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">File file = <span class="keyword">new</span> File(<span class="string">"d:\\a.txt"</span>);<span class="comment">//a.txt原来不存在的话,也可以被自动创建,但是在读的时候不可以</span></div><div class="line">PrintWriter pw = <span class="keyword">new</span> PrintWriter(file);</div><div class="line">pw.println(<span class="number">100</span>);<span class="comment">//文件中打印出的的是100, 原样输出</span></div><div class="line">pw.write(<span class="number">100</span>);<span class="comment">//文件中打印的出的是d,会查码表</span></div><div class="line">pw.flush();</div><div class="line">pw.close();</div></pre></td></tr></table></figure>
<h4 id="输出语句是char数组"><a href="#输出语句是char数组" class="headerlink" title="输出语句是char数组"></a>输出语句是char数组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">字符串的本质是<span class="keyword">char</span>[], String str = <span class="string">"abc"</span>;等同于<span class="keyword">char</span>[] arr = &#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;;</div><div class="line"><span class="keyword">char</span>[] arr = &#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;;</div><div class="line">System.out.println(arr); <span class="comment">//打印的是abc, 而不是地址值</span></div></pre></td></tr></table></figure>
<h4 id="打印流输出目的是String文件名和流对象"><a href="#打印流输出目的是String文件名和流对象" class="headerlink" title="打印流输出目的是String文件名和流对象"></a>打印流输出目的是String文件名和流对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">打印流,输出目的是字符串文件名</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function_1</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException</span>&#123;</div><div class="line">	PrintWriter pw = <span class="keyword">new</span> PrintWriter(<span class="string">"d:\\1.txt"</span>);<span class="comment">//文件可以自己创建</span></div><div class="line">	pw.println(<span class="string">"你好"</span>);</div><div class="line">	pw.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">打印流,输出目的是流对象</div><div class="line">可以是字节输出流OutputStream, 也可以是字符输出流<span class="function">Writer</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function_2</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</div><div class="line">	<span class="comment">//FileOutputStream fos = new FileOutputStream("d:\\3.txt");//文件可以自己创建</span></div><div class="line">	FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"d:\\4.txt"</span>);<span class="comment">//文件可以自己创建</span></div><div class="line">	PrintWriter pw = <span class="keyword">new</span> PrintWriter(fw);</div><div class="line">	pw.print(<span class="string">"abc"</span>);</div><div class="line">	pw.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="打印流开启自动刷新"><a href="#打印流开启自动刷新" class="headerlink" title="打印流开启自动刷新"></a>打印流开启自动刷新</h4><pre><code>* 需要满足两个条件:
    1. 输出目的必须是流对象,OutputStream或Writer, 不可以是String类型文件名或File对象
    2. 必须调用println,printf,format方法中的一个
    3. PrintWriter(流对象,true);参数中要加上true
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"d:\\5.txt"</span>);</div><div class="line">PrintWriter pw = <span class="keyword">new</span> PrintWriter(fos,<span class="keyword">true</span>);<span class="comment">//添加参数true, 可以实现自动刷新</span></div><div class="line">pw.println(<span class="string">"a"</span>);</div><div class="line">pw.println(<span class="string">"b"</span>);</div><div class="line">pw.println(<span class="string">"c"</span>);</div><div class="line"><span class="comment">//不需要刷新,现在运行,也可以在文件中打印abc</span></div><div class="line"><span class="comment">//但流对象还是要关闭</span></div><div class="line">pw.close();</div></pre></td></tr></table></figure>
<h4 id="打印流复制文本文件"><a href="#打印流复制文本文件" class="headerlink" title="打印流复制文本文件"></a>打印流复制文本文件</h4><pre><code>* 打印流只负责写
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function_3</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">	BufferedReader bfr = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"d:\\a.txt"</span>));</div><div class="line">	PrintWriter pw = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> FileWriter(<span class="string">"d:\\b.txt"</span>),<span class="keyword">true</span>);</div><div class="line">	String line = <span class="string">""</span>;</div><div class="line">	<span class="keyword">while</span>((line = bfr.readLine()) != <span class="keyword">null</span>)&#123;</div><div class="line">		pw.println(line);</div><div class="line">	&#125;</div><div class="line">	pw.close();</div><div class="line">	bfr.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="第三方jar包"><a href="#第三方jar包" class="headerlink" title="第三方jar包"></a>第三方jar包</h3><h4 id="commons-io工具类"><a href="#commons-io工具类" class="headerlink" title="commons-io工具类"></a>commons-io工具类</h4><h5 id="FilenameUtils工具类"><a href="#FilenameUtils工具类" class="headerlink" title="FilenameUtils工具类"></a>FilenameUtils工具类</h5><pre><code>* 常用方法:
    1. static String getExtension(String filename): 获取文件扩展名
    2. static String getName(String filename): 获取文件名
    3. static boolean isExtension(String filename, String extension): 
        判断文件名的后缀是不是extension, 区分大小写
</code></pre><h5 id="FileUtils工具类"><a href="#FileUtils工具类" class="headerlink" title="FileUtils工具类"></a>FileUtils工具类</h5><pre><code>* 常用方法:
    1. static String readFileToString(File file): 读取文件内容，并返回一个String
    2. static void writeStringToFile(File file，String content): 将内容content写入到file中
    3. static void copyDirectoryToDirectory(File srcDir,File destDir): 文件夹复制
    4. static void copyFile(File srcFile,File destFile): 文件复制
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;File类&quot;&gt;&lt;a href=&quot;#File类&quot; class=&quot;headerlink&quot; title=&quot;File类&quot;&gt;&lt;/a&gt;File类&lt;/h3&gt;&lt;h4 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;* java.io.File 
* 文件和目录路径名的抽象表示形式
* 将操作系统中文件,目录(文件夹),路径,封装成File对象
* 提供方法, 操作系统中的内容
* File是与系统无关的类
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="JAVA基础" scheme="https://geekhoon.github.io/categories/JAVA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JAVA基础语法" scheme="https://geekhoon.github.io/tags/JAVA%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>异常</title>
    <link href="https://geekhoon.github.io/2017/02/18/15-%E5%BC%82%E5%B8%B8/"/>
    <id>https://geekhoon.github.io/2017/02/18/15-异常/</id>
    <published>2017-02-17T18:15:15.000Z</published>
    <updated>2017-03-28T13:16:57.997Z</updated>
    
    <content type="html"><![CDATA[<h3 id="异常继承体系"><a href="#异常继承体系" class="headerlink" title="异常继承体系"></a>异常继承体系</h3><pre><code>* Throwable类是所有错误,异常的超类
    | - Error     : 错误, Throwable的子类
    | - Exception : 异常, Throwable的子类
        |-RuntimeException :　运行期异常, JAVA程序运行过程中出现的问题, Exception的子类
        |-非RuntimeException : 编译期异常，必须处理的，否则程序编译不通过, Exception的子类
</code></pre><a id="more"></a> 
<pre><code>* 异常与错误的区别
 1. 异常: 
    * 异常指程序在编译、运行期间发生了某种异常(XxxException)，我们可以对异常进行具体的处理。
    * 若不处理异常，程序将会结束运行。
 2. 错误:
    * 指程序在运行期间发生了某种错误，Error错误通常没有具体的处理方式，程序将会结束运行。
    * Error错误的发生往往都是系统级别的问题，都是jvm所在系统发生的，并反馈给jvm的。
    * 我们无法针对处理，只能修正代码
</code></pre><h3 id="异常处理方式"><a href="#异常处理方式" class="headerlink" title="异常处理方式"></a>异常处理方式</h3><pre><code>1. JVM的默认处理方式
    * 把异常的名称,原因,位置等信息输出在控制台，同时会结束程序。
    * 一旦有异常发生，其后来的代码不能继续执行。
2. 解决程序中异常的手动方式
    * 编写处理代码 try...catch...finally
        自己编写处理代码,后面的程序可以继续执行
    * 抛出 throws
        把自己处理不了的，在方法上声明，告诉调用者，这里有问题
</code></pre><h3 id="异常中关键字"><a href="#异常中关键字" class="headerlink" title="异常中关键字"></a>异常中关键字</h3><h4 id="抛出异常对象-throw"><a href="#抛出异常对象-throw" class="headerlink" title="抛出异常对象 throw"></a>抛出异常对象 throw</h4><pre><code>* 在方法内部,抛出异常
* 用来抛出一个指定的异常对象, 
* 以抛出异常的方式,告诉调用者main,(如果是main方法调用的话)
* throw 后面, 必须写new 对象,必须是异常的对象,只能写一个对象
</code></pre><h4 id="方法中声明异常关键字-throws"><a href="#方法中声明异常关键字-throws" class="headerlink" title="方法中声明异常关键字 throws"></a>方法中声明异常关键字 throws</h4><pre><code>* 在方法声明上, 表明此方法,可能出现异常 
* throws 后面, 必须写异常类的类名,可以写多个异常类名
* 格式: 修饰符 返回值类型 方法名(参数) throws 异常类名1,异常类名2… {   }
* 当调用了一个抛出异常的方法,调用者就必须处理, 不处理,编译失败
</code></pre><h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><pre><code>1. 编译期异常和运行期异常的区别
    编译期异常 必须要处理的，否则编译不通过
    运行期异常 可以不处理，也可以处理
2. throw,throws区别
    throw:
        在方法体中,后面跟的是异常对象名,并且只能是一个
        throw抛出的是一个异常对象，说明这里肯定有一个异常产生了
    throws:
        在方法声明上,后面跟的是异常的类名,可以是多个
        throws是声明方法有异常，是一种可能性，这个异常并不一定会产生
</code></pre><h3 id="try-catch异常处理"><a href="#try-catch异常处理" class="headerlink" title="try..catch异常处理"></a>try..catch异常处理</h3><pre><code>* 格式:　
try{
   被检测代码
}catch (异常类名1 变量){
    异常处理方式
}catch (异常类名2 变量){
    ...
}catch ...
}finally{
    必须要执行的代码
}
* 注意: 
    如果出现了上下级关系的异常, 越高级越要写在catch下面
* finally,无论程序是否有异常出现,程序必须执行释放资源
      如：IO流操作和数据库操作中会见到
* finally：是try-catch的一部分！被它修饰的代码一定会被执行到！除非在这之前退出了虚拟机
   System.exit(0);
* 方法中, 在catch语句中有return, return语句在finally之前执行, 还是之后执行?
  return , 先建立了一个返回的链接, 先检测一下, 如果有finally, 那么执行完finally代码块后, 继续返回
</code></pre><h3 id="运行时期异常处理"><a href="#运行时期异常处理" class="headerlink" title="运行时期异常处理"></a>运行时期异常处理</h3><pre><code>* 编译异常: 调用了抛出异常的方法, 不处理编译失败 (try  throws)
* 运行异常: 抛出的异常是RuntimeException类, 或者它的子类, 除此之外,都是编译异常

* throws Exception : 抛的是编译异常
* throws NullPointerException : 抛的是运行异常
* 运行异常的特点:
    * 方法中抛出运行异常,方法定义中无需throws声明,调用者也无需处理此异常。
    * 运行异常一旦发生,后面的代码没有执行的意义,需要程序人员修改源代码
* 设计原因: (不写throws, 调用者也不用处理)
    * 运行异常, 不能发生, 但是如果发生, 程序人员停止程序, 修改源代码
</code></pre><h3 id="方法重写时异常的处理"><a href="#方法重写时异常的处理" class="headerlink" title="方法重写时异常的处理"></a>方法重写时异常的处理</h3><pre><code>* 继承后, 在子类重写父类方法的时候, 异常处理
* 结论: 
    1.父类的方法如果抛出异常, 子类重写后, 
        1. 可以不抛出异常
        2. 也可以抛出异常, 但是抛的异常不能大于父类的异常(异常的继承关系)
           如果抛同级异常, 只能和父类抛的异常一模一样

    2.父类的方法如果不抛出异常, 子类重写后, 也不能抛出异常
        如果子类重写的方法调用了抛出编译异常(注意,如果调用了抛运行异常的方法,不会出问题)的方法, 只能try/catch处理, 子类重写的方法不可以向外抛异常
</code></pre><h3 id="Throwable类常用方法"><a href="#Throwable类常用方法" class="headerlink" title="Throwable类常用方法"></a>Throwable类常用方法</h3><pre><code>* 都和异常的信息有关系
1. String getMessage() : 对异常信息的详细描述
2. String toString()   : 对异常信息的简短描述
3. void printStackTrace(): 将异常信息追踪到标准的错误流
</code></pre><h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><pre><code>* 步骤: 
    1. 继承自Exception或者RuntimeException,只需要提供无参构造和一个带参构造即可, 一般写运行异常
    2. 构造方法中, super将异常信息传递给父类
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;异常继承体系&quot;&gt;&lt;a href=&quot;#异常继承体系&quot; class=&quot;headerlink&quot; title=&quot;异常继承体系&quot;&gt;&lt;/a&gt;异常继承体系&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;* Throwable类是所有错误,异常的超类
    | - Error     : 错误, Throwable的子类
    | - Exception : 异常, Throwable的子类
        |-RuntimeException :　运行期异常, JAVA程序运行过程中出现的问题, Exception的子类
        |-非RuntimeException : 编译期异常，必须处理的，否则程序编译不通过, Exception的子类
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="JAVA基础" scheme="https://geekhoon.github.io/categories/JAVA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JAVA基础语法" scheme="https://geekhoon.github.io/tags/JAVA%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://geekhoon.github.io/2017/02/11/14-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://geekhoon.github.io/2017/02/11/14-正则表达式/</id>
    <published>2017-02-11T03:12:43.000Z</published>
    <updated>2017-03-28T13:16:53.653Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><pre><code>*　操作字符串数据的规则表达式
</code></pre><a id="more"></a> 
<h3 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h3><pre><code>注意: 一个[ ]代表一个字符
* 字符
    * x  代表的是 字符x
    * \\ 代表的是 反斜线字符&apos;\&apos;
    * \t 代表的是 制表符
    * \n 代表的是 换行符
    * \r 代表的是 回车符
    * \s 代表的是 空格
* 字符类
    * [abc]    a、b 或 c 范围中的一个
    * [^abc]   任何字符，除了 a、b 或 c
    * [a-zA-Z] a到 z 或 A到 Z，两头的字母包括在内（范围） 
    * [0-9]    0到9的字符都包括
    * [^0-9]   不是数字
    * [a-zA-Z_0-9] 代表的字母或者数字或者下划线
* 预定义字符类
    * .  任何字符
    * \d 数字：[0-9]
    * \D 不是数字    
    * \w 单词字符：[a-zA-Z_0-9]
* 边界匹配器
    * ^  代表的是行的开头
    * $  代表的是行的结尾
    * \b 代表的是单词边界
* 数量词
    * X?     X，一次或一次也没有
    * X*     X，零次或多次
    * X+     X，一次或多次
    * X{n}   X，恰好 n 次 
    * X{n,}  X，至少 n 次 
    * X{n,m} X，至少 n 次，但是不超过 m 次
</code></pre><h3 id="正则表达式和String类相关的方法"><a href="#正则表达式和String类相关的方法" class="headerlink" title="正则表达式和String类相关的方法"></a>正则表达式和String类相关的方法</h3><pre><code>1.匹配。
      使用的是String类中的matchers方法。
    boolean matches(String 正则表达式)
    如boolean b = &quot;abc&quot;.matches(&quot;[a]&quot;);
    //返回false, 因为abc为三个字符,正则只有a一个,改成&quot;[abc]+&quot;返回true
2.切割。
      使用的是String类中的split方法。 
    String[] split(String 正则表达式)
    如String[] strArr = &quot;abc&quot;.split(&quot;a&quot;);
    注意: 
      1. 返回值类型是String类型的数组
      2. 如果用原字符串中没有的字符来切, 切割后数组长度为1
      3. 切割符是&quot;.&quot;的时候, 要转义,用&quot;\\.&quot; 两个反斜杠的原因: 第一个是java中先转义 第二个是正则中转义
      4. 切割符是&quot; &quot;的时候, 要转义,用&quot;\\s&quot;,或者&quot; +&quot;
3.替换。
      使用的是String类中的replaceAll方法。
    String replaceAll( String 正则表达式,String 字符串)
    如String str = &quot;abc0123&quot;.repalceAll(&quot;[\\d]&quot;,&quot;#&quot;); 
    //打印abc####  若要打印成abc# ,将正则表达式改为&quot;[\\d]+&quot;
</code></pre><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><pre><code>1.QQ号正则表达式, 要求:全数字,0不能开头,5-10位
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">QQ.matches(<span class="string">"[1-9][\\d]&#123;4,9&#125;"</span>);</div></pre></td></tr></table></figure>
<pre><code>2.要求: 输入aaa_bbbb_ccc_ddd,输出AaaBbbbCccDdd
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegexDemo</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		String str = <span class="string">"aaa_bbbb_ccc_ddd"</span>;</div><div class="line">		change(str);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(String str)</span></span>&#123;</div><div class="line">		String[] strArr = str.split(<span class="string">"_"</span>);</div><div class="line">		StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strArr.length; i++) &#123;</div><div class="line">			String word = strArr[i];</div><div class="line">			sb.append(wordLowerToUpper(word));	</div><div class="line">		&#125;</div><div class="line">		System.out.println(sb.toString());</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">wordLowerToUpper</span><span class="params">(String word)</span></span>&#123;</div><div class="line">		String first = word.charAt(<span class="number">0</span>)+<span class="string">""</span>;</div><div class="line">		first = first.toUpperCase();</div><div class="line">		String other = word.substring(<span class="number">1</span>);</div><div class="line">		<span class="keyword">return</span> first + other;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>3.简式邮箱格式正则表达式
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Email_Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		String str = <span class="string">"fsd1111fdsfsddsdsad22@2.com.cn"</span>;</div><div class="line">		email_judge(str);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">email_judge</span><span class="params">(String str)</span></span>&#123;</div><div class="line">		<span class="comment">//.com.cn  .字母 可以有多个</span></div><div class="line">		<span class="keyword">boolean</span> b = str.matches(<span class="string">"[\\w]+@[a-z0-9]+(\\.[a-z]+)+"</span>);</div><div class="line">		System.out.println(b);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;*　操作字符串数据的规则表达式
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="JAVA基础" scheme="https://geekhoon.github.io/categories/JAVA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JAVA基础语法" scheme="https://geekhoon.github.io/tags/JAVA%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>API</title>
    <link href="https://geekhoon.github.io/2017/02/10/13-API/"/>
    <id>https://geekhoon.github.io/2017/02/10/13-API/</id>
    <published>2017-02-10T02:50:27.000Z</published>
    <updated>2017-03-28T13:16:49.542Z</updated>
    
    <content type="html"><![CDATA[<h3 id="API概念"><a href="#API概念" class="headerlink" title="API概念"></a>API概念</h3><pre><code>* API(Application Programming Interface) 
  应用程序编程接口
* Java API
  Java jdk给我们提供好的类
</code></pre><a id="more"></a>
<h3 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h3><pre><code>* 所有类的父类
* 常用方法
    * boolean equals(Object obj){}
      比较两个对象的地址值是否一致

    * String toString()
      返回对象的地址值。(对象调用toString()默认不用写,自动调用)
      我们一般会在子类中重写toString方法来返回对象的内容
</code></pre><h3 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h3><pre><code>* 特点: 1. 字符串是一个常量,一旦创建,不可改变
          如String str = &quot;abc&quot; 不变指的是&quot; &quot;内的值不变,不是str的值不可变
        2. 所有的 &quot;&quot; 都是String类的对象
* 注意: 
    1. 只有显示定义的字符串才会存在于常量池中
        * JDK1.6及以前, 常量池位于方法区
        * JDK1.7之后, 常量池位于堆中
    2. 源码分析,String类底层采用的是字符数组 
        字符串的本质是一个char数组, 字符串以字符形式存储于常量池中  
* String类创建方式和比较
    1. String s1 = &quot;abc&quot;;
       在内存中只有一个对象。这个对象在字符串常量池中
    2. String s2 = new String(&quot;abc&quot;);
       在内存中有两个对象。一个new的对象在堆中，一个字符串本身对象，在字符串常量池中
* String类常见构造方法
    1. public String():空构造
    2. public String(byte[] bytes):把字节数组转成字符串
    3. public String(byte[] bytes,int offset,int length):把字节数组的一部分转成字符串 
    4. public String(char[] value):把字符数组转成字符串
    5. public String(char[] value,int offset,int count):把字符数组的一部分转成字符串
    6. public String(String original):把字符串常量值转成字符串
    注意: 
    1. 2和3中,将字节数组转成字符串,会通过使用机器操作系统的默认编码表(GBK)解码byte数组,构造新的String
       Java语言使用的就是unicode(字符串用GBK，字符用unicode码表)
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">byte</span>[] bytes = &#123;<span class="number">97</span>,<span class="number">98</span>,-<span class="number">99</span>,-<span class="number">100</span>,-<span class="number">112</span>&#125;;</div><div class="line"><span class="comment">//调用String类的构造方法,传递字节数组</span></div><div class="line">String s = <span class="keyword">new</span> String(bytes);</div><div class="line">System.out.println(s);  <span class="comment">//打印结果为 ab潨?</span></div><div class="line"><span class="comment">//汉字的字节编码就是负数, 两个负数代表一个汉字, 多一个负数,会打出?</span></div><div class="line"></div><div class="line"><span class="keyword">byte</span>[] bytes1 =&#123;<span class="number">65</span>,<span class="number">66</span>,<span class="number">67</span>,<span class="number">68</span>,<span class="number">69</span>&#125;;</div><div class="line"><span class="comment">//调用String构造方法,传递数组,传递2个int值,offset代表数组的起始的索引,length代表转的个数</span></div><div class="line">String s1 = <span class="keyword">new</span> String(bytes1,<span class="number">1</span>,<span class="number">3</span>);</div><div class="line">System.out.println(s1);</div></pre></td></tr></table></figure>
<pre><code>2. 4和5中,把字符数组转成字符串,如果是字符型数据,不查询编码表
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span>[] c = &#123;<span class="number">97</span>,<span class="string">'8'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>&#125;;</div><div class="line"><span class="comment">//调用String构造方法,传递字符数组</span></div><div class="line">String s = <span class="keyword">new</span> String(c);</div><div class="line">System.out.println(s);<span class="comment">//打印a8cdef ,97会查编码表ASCii </span></div><div class="line">	</div><div class="line">String s1 = <span class="keyword">new</span> String(c,<span class="number">1</span>,<span class="number">4</span>);</div><div class="line">System.out.println(s1);<span class="comment">//打印8cde</span></div></pre></td></tr></table></figure>
<pre><code>* String的常用判断方法
    1. boolean equals(Object obj):比较字符串的内容是否相同,区分大小写
    2. boolean equalsIgnoreCase(String str):比较字符串的内容是否相同,忽略大小写
    3. boolean contains(String str):判断大字符串中是否包含小字符串
    4. boolean startsWith(String str):判断字符串是否以某个指定的字符串开头
    5. boolean endsWith(String str):判断字符串是否以某个指定的字符串结尾
    6. boolean isEmpty():判断字符串是否为空。
* String类的获取功能
    1. int length():获取字符串的长度。
    2. char charAt(int index):获取指定索引位置的字符
    3. int indexOf(int ch):返回指定字符在此字符串中第一次出现处的索引。被查找的字符不存在,返回-1
    4. int indexOf(String str):返回指定字符串在此字符串中第一次出现处的索引。
    5. String substring(int start):从指定位置开始截取字符串,默认到末尾。
    6. String substring(int start,int end):从指定位置开始到指定位置结束截取字符串。(包含头，不包含尾)
    7. char[] toCharArray() 将字符串转成字符数组
    8. byte[] getBytes() 将字符串转成字节数组 (byte数组相关的功能,查询编码表)
    9. String toUpperCase();转成大写
    10. String toLowerCase();转成小写
    11. static String valueOf(char[] data) : 将字符数组,转成String类型
* String的替换功能
    1. String replace(char old,char new)
    2. String replace(String old,String new)
    3. String replaceFirst(String regex, String replacement) 
        使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。
    4. String replaceAll(String regex, String replacement) 
        使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。
     注：如果要被替换字符或字符串在原字符串中不存在，则返回原字符串。
* 空串与null区别 
    * &quot;&quot;是字符串常量,同时也是一个String类的对象,既然是对象当然可以调用String类中的方法
     * null是空常量,不能调用任何的方法,否则会出现空指针异常,null常量可以给任意的引用数据类型赋值
     * 声明一个String str
       如果说str是null，那么内存根本没有创建字符串对象，没有str引用。
       如果说str是空串，那么确定存在一个由str引用的字符串对象，只不过这个字符串的值是空。
       null用来表示没有实例存在，而“”本身就是一个实例，有自己的对象空间，和“123456”这样的字符串没有区别。
    使用注意事项：
        对象用equals比较，null用等号比较。因此，如果str1=null;下面的写法运行会有错误： 
        if(str1.equals(&quot;&quot;)||str1==null){//当str1为null, str1.equals(&quot;&quot;)会报空指针异常
          //。。。。 
        } 
        正确的写法是 
        if(str1==null||str1.equals(&quot;&quot;)){ //先判断是不是对象，如果不是， 不需要判断是不是空字符串 
            //... 
        }
</code></pre><h3 id="StringBuffer类"><a href="#StringBuffer类" class="headerlink" title="StringBuffer类"></a>StringBuffer类</h3><pre><code>* 概述
    * 字符串缓冲区 
    * 线程安全的可变字符序列 
    * 底层采用字符数组实现,初始容量为16
* StringBuffer和String的区别
    * String是一个不可变的字符序列
    * StringBuffer是一个可变的字符序列
    其实字符串String的底层也是用StringBuffer来完成的。
    比如：String str = &quot;abc&quot; + 4 + &apos;c&apos;;
    这句话的底层其实就是：
    String str = new StringBuffer().append(&quot;abc&quot;).append(4).append(&apos;c&apos;).toString();
* StringBuffer和数组容器的区别？ 
    1. 数组容器是固定长度的。
       StringBuffer是可变长度的。
    2. 数组容器一旦初始化就明确了元素的类型。
       StringBuffer可以存储任意类型。包括基本和引用。
    3. 数组存储完元素可以对元素进行操作（通过角标）。
       StringBuffer存储完元素后，都会变成字符串，只能用字符串的方法来操作。
* 特点
   1. 缓冲区就是用来缓存数据，意味着它是一个容器。
   2. 该容器的长度是可变的。 
   3. 提供了对容器中内容的操作的方法(最多无外乎四种：增删改查.)
   4. 该缓冲区中可以添加多种类型的元素，基本类型和引用类型。 
   5. 无论怎么样的改变容器中的数据，最终要使用结果，还是必须要将其转成字符串，使用toString方法。
* 构造方法
   1. public StringBuffer():无参构造方法
   2. public StringBuffer(String str) :向StringBuffer对象中插入一个字符串
 * 常用方法
   1. StringBuffer append(), 将任意类型的数据,添加缓冲区
      * 调用者是谁,返回值就是谁
   2. delete(int start,int end): 删除缓冲区中字符
      * 开始索引包含,结尾索引不包含
   3. insert(int index, 任意类型): 将任意类型数据,插入到缓冲区的指定索引上
   4. replace(int start,int end, String str): 将指定的索引范围内的所有字符,替换成新的字符串
   5. reverse(): 将缓冲区中的字符反转
   6. String toString(): 继承Object,重写toString()
      * 将缓冲区中的所有字符,变成字符串
</code></pre><h3 id="StringBuilder类"><a href="#StringBuilder类" class="headerlink" title="StringBuilder类"></a>StringBuilder类</h3><pre><code>* StringBuffer和StringBuilder的区别
    * StringBuffer是jdk1.0版本的,是线程安全的,效率低
    * StringBuilder是jdk1.5版本的,是线程不安全的,效率高
</code></pre><h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><pre><code>* 日期类
* 毫秒值
    * 获取当前日期的毫秒值
      System.currentTimeMillis() 返回值long类型参数
    * 时间原点: 公元1970年1月1日 00:00:00
    * 日期对象之间要进行基本运算，需要转成具体的毫秒数值才可以
* Date类的构造方法
    * 空参构造 
      public Date()    :获取当期操作系统的日期,时间
    * 带参构造
      public Date(long times) :将传入的毫秒值转为对应的日期,时间
* Date类的get/set方法
    * public long getTime()     :将当前的日期对象，转为对应的毫秒值
    * public void setTime(long times)  :根据给定的毫秒值，生成对应的日期对象
* 日期格式化SimpleDateFormat
    * SimpleDateFormat继承自抽象类 DateFormat,使用父类普通方法,重写抽象方法
    * 作用: 对日期进行格式化(自定义)
    * 对日期进行格式化的步骤: (Date对象 ==&gt; 字符串)
       1: 创建SimpleDateFormat对象
          在类构造方法中,写入字符串的日期格式 (自己定义)
       2: SimpleDateFormat调用方法format对日期进行格式化
          public String format(Date date) 
    * 字符串转成日期对象步骤: (字符串 ==&gt; Date对象)
       1: 创建SimpleDateFormat的对象
          在类构造方法中,写入字符串的日期格式 (自己定义)
       2: 子类对象,调用方法 parse 传递String,返回Date
          Date parse(String 日期模式)
          注意传递的Stirng类型日期模式,要和1中定义的格式相同
    * 日期模式:
        yyyy    年份
        MM      月份
        dd      月中的天数
        HH      0-23小时
        mm      小时中的分钟
        ss      秒
* 练习: 
1.计算出生至今活了多少天
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	System.out.println(<span class="string">"请输入出生日期 格式 YYYY-MM-dd"</span>);</div><div class="line">	<span class="comment">//获取出生日期,键盘输入</span></div><div class="line">	String birthdayString = <span class="keyword">new</span> Scanner(System.in).next();</div><div class="line">	<span class="comment">//将字符串日期,转成Date对象</span></div><div class="line">	<span class="comment">//创建SimpleDateFormat对象,写日期模式</span></div><div class="line">	SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</div><div class="line">	<span class="comment">//调用方法parse,字符串转成日期对象</span></div><div class="line">	Date birthdayDate = sdf.parse(birthdayString);</div><div class="line">	</div><div class="line">	<span class="comment">//获取今天的日期对象</span></div><div class="line">	Date todayDate = <span class="keyword">new</span> Date();</div><div class="line">	</div><div class="line">	<span class="comment">//将两个日期转成毫秒值,Date类的方法getTime</span></div><div class="line">	<span class="keyword">long</span> birthdaySecond = birthdayDate.getTime();</div><div class="line">	<span class="keyword">long</span> todaySecond = todayDate.getTime();</div><div class="line">	<span class="keyword">long</span> second = todaySecond-birthdaySecond;</div><div class="line">	</div><div class="line">	<span class="keyword">if</span>(second &lt; <span class="number">0</span>)&#123;</div><div class="line">		System.out.println(<span class="string">"还没出生呢"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span>&#123;</div><div class="line">		System.out.println(second/<span class="number">1000</span>/<span class="number">60</span>/<span class="number">60</span>/<span class="number">24</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h3><pre><code>* 日历类(抽象类) 
* 创建对象: Calendar类中写了getInstance()静态方法,直接返回子类的对象,不用new子类对象
  格式如: Calendar c = Calendar.getInstance();
* 常用方法:

* get(日历字段): 获得指定日历字段的值
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Calendar c = Calendar.getInstance();</div><div class="line"><span class="comment">// 获取年份</span></div><div class="line"><span class="keyword">int</span> year = c.get(Calendar.YEAR);</div><div class="line"><span class="comment">// 获取月份</span></div><div class="line"><span class="keyword">int</span> month = c.get(Calendar.MONTH) + <span class="number">1</span>;</div><div class="line"><span class="comment">// 获取天数</span></div><div class="line"><span class="keyword">int</span> day = c.get(Calendar.DAY_OF_MONTH);</div><div class="line">System.out.println(year + <span class="string">"年"</span> + month + <span class="string">"月"</span> + day + <span class="string">"日"</span>);</div></pre></td></tr></table></figure>
<pre><code>* getTime() 把日历对象,转成Date日期对象
* set(int field,int value)  设置指定的时间
  field 设置的是哪个日历字段 
  value 设置后的具体数值
* set(int year,int month,int day) 传递3个整数的年,月,日
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Calendar c = Calendar.getInstance();</div><div class="line"><span class="comment">// 设置,月份,设置到10月份</span></div><div class="line"><span class="comment">// c.set(Calendar.MONTH, 9);</span></div><div class="line"><span class="comment">// 设置年,月,日</span></div><div class="line">c.set(<span class="number">2017</span>, <span class="number">01</span>, <span class="number">01</span>);</div></pre></td></tr></table></figure>
<pre><code>* add(int field, int value) 进行整数的偏移
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 让日历中的天数,向后偏移30天</span></div><div class="line">c.add(Calendar.DAY_OF_MONTH, <span class="number">30</span>);</div></pre></td></tr></table></figure>
<pre><code>* 练习: 
1.输入年份,判断是否为闰年
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">judge</span><span class="params">()</span></span>&#123;</div><div class="line">	System.out.println(<span class="string">"请输入一个年份: "</span>);</div><div class="line">	<span class="keyword">int</span> year = <span class="keyword">new</span> Scanner(System.in).nextInt();</div><div class="line">	 Calendar c = Calendar.getInstance();</div><div class="line">	 <span class="comment">//把日期设置成输入年份,当年的3月1日</span></div><div class="line">	 c.set(year, <span class="number">2</span>, <span class="number">1</span>);</div><div class="line">	 <span class="comment">//利用偏移方法,前移一天,get二月的天数</span></div><div class="line">	 c.add(Calendar.DAY_OF_MONTH, -<span class="number">1</span>);</div><div class="line">	 <span class="comment">//闰年29天</span></div><div class="line">	 <span class="keyword">if</span>(c.get(Calendar.DAY_OF_MONTH) == <span class="number">29</span>)&#123;</div><div class="line">		 System.out.println(<span class="string">"闰年"</span>);</div><div class="line">	 &#125;<span class="keyword">else</span>&#123;</div><div class="line">		 <span class="comment">//平年28天</span></div><div class="line">		 System.out.println(<span class="string">"平年"</span>);</div><div class="line">	 &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="基本类型包装类"><a href="#基本类型包装类" class="headerlink" title="基本类型包装类"></a>基本类型包装类</h3><pre><code>* 可以将字符串转换成对应的基本数据类型
* 八种基本类型对应的包装类:
   char    Character
   int     Integer
   byte    Byte
   short   Short
   long    Long
   float   Float
   double  Double
   boolean Boolean
</code></pre><h3 id="Integer"><a href="#Integer" class="headerlink" title="Integer"></a>Integer</h3><pre><code>* int对应的包装类
* 构造方法
  Integer(String s) : 将数字格式的字符串作为参数
  如: Integer i = new Integer(&quot;100&quot;);
      int num = i.intValue();
    //intValue()方法返回值为int类型,以 int 类型返回该 Integer 的值
    //后面哟用到自动装箱可以直接 Integer i = 100;
* int与String之间互转方法
   1. 字符串转为int
      (1)static int parseInt(String s) :要求s要是数字形式的字符串
        static int valueof(string s) : 要求s要是数字形式的字符串
     (2)static int parseINt(String s,int radix) : 将指定进制的字符串转成十进制的int类型
     注意: parseInt方法的最后返回值都是十进制的int类型
       如: radix为2 ,则将2进制的String s转成10进制的int
   2. int转为字符串
        (1)方式一: 添加空字符串
        int i = 3;
        String str = i + &quot;&quot; ;
     (2)方式二: 
        * static String toString(int i): 
          注意这个方法不是Object类中toString的重写,因为Object类在tOString是空参方法
        * static String toString(int i,int radix):
          将int类型的数据转成radix进制的数字形式的字符串
        注意:　Java中最高支持36进制, 0-9A-Z
* 其他方法: 
  * 两个静态成员变量: 
      * MAX_VALUE : int范围最大值
      * MIN_VALUE
  * 三个静态方法:
      　1. toBinarString(int) : 10进制--&gt;2进制
      　2. toOctalString(int) : 10进制--&gt;8进制
      　3. toHexString(int)   : 10进制--&gt;16进制
       三个方法的返回值都是String类型
</code></pre><h3 id="自动装箱-自动拆箱"><a href="#自动装箱-自动拆箱" class="headerlink" title="自动装箱/自动拆箱"></a>自动装箱/自动拆箱</h3><pre><code>* 概述
    * 自动装箱: 基本数据类型,直接变成对象
    * 自动拆箱: 对象中的数据,变回基本数据类型
* 举例: 
    * 装箱: Integer i = 1;  //这步的实际操作是 Integer i = new Integer(1);
    * 拆箱: i = i + 1; 
            //实际操作是(1) i + 1 为  i.intValue() + 1;
                       (2) i = 2; 
* 好处: 基本数据类型与引用类型可以直接计算
* 坏处: 有可能会抛空指针异常, 如
        Integer i = null;
        i = i + 1;
        System.out.println(i);//会抛异常 
</code></pre><pre><code class="java">Integer a1 = <span class="number">500</span>;
Integer b1 = <span class="number">500</span>;
System.out.println(a1==b1);
<span class="comment">//因为自动装箱实质上也new了一个Integer对象,所以a1和b1地址值不同,false</span>
System.out.println(a1.equals(b1));
<span class="comment">//内容相同, 为true</span>

<span class="comment">//数据在byte范围内,JVM不会重新new对象</span>
Integer a2 = <span class="number">127</span>;   <span class="comment">//Integer a2 = new Integer(127);</span>
Integer b2 = <span class="number">127</span>;    <span class="comment">//Integer b2 = a2;</span>
System.out.println(a2==b2);  <span class="comment">//a2, b2指向的是同一个对象,地址相同</span>
System.out.println(a2.equals(b2)); <span class="comment">//内容相同,true</span>

Integer i1 = <span class="number">60</span>;
Integer i2 = <span class="number">60</span>;
Integer i3 = <span class="number">60</span> + <span class="number">60</span>; 
Integer i4 = i1 + i2;
System.out.println(i3 == i4);
<span class="comment">//这个我判断错了, 答案是true</span>
<span class="comment">//因为i3 = 120, 在byte范围内, i4也=120 ,不会重新new对象 ,所以它们地址相同</span>

String s1 = <span class="string">"he"</span>; 
String s2 = <span class="string">"llo"</span>; 
String s3 = <span class="string">"he"</span> + <span class="string">"llo"</span>; 
String s4 =  s1 + s2;     
System.out.println(s3 == s4); <span class="comment">//比较的是地址, false</span>

<span class="keyword">byte</span> b1 = <span class="number">60</span>;
<span class="keyword">byte</span> b2 = <span class="number">60</span>;
<span class="keyword">byte</span> b3 = <span class="number">60</span> + <span class="number">60</span>;
<span class="keyword">int</span> b4 = (<span class="keyword">byte</span>) (b1 + b2);
System.out.println(b3 == b4); <span class="comment">//比较的是值, true</span>

Byte by1 = <span class="number">60</span>;
Byte by2 = <span class="number">60</span>;
Byte by3 = <span class="number">60</span> + <span class="number">60</span>;
<span class="keyword">int</span> by4 = by1 + by2;
System.out.println(by3 == by4); 
<span class="comment">//这个我判断错了,比较的不是地址, 因为by4是int类型</span>
<span class="comment">//Byte by3 有个自动拆箱 即 byte by3</span>
<span class="comment">//基本数据类型比较 比较的就是值的大小</span>
<span class="comment">//结果是true</span>
</code></pre>
<h3 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h3><pre><code>* 概述
    * 不能new, 因为构造方法是private的
    * 全是静态方法
* 常用方法
    1. static long currentMillis() : 获得当前时间毫秒值
    2. static void exit(int status) : 退出JVM,所有程序停止
        status传0 ,程序正常退出
        status传非0 ,程序异常时退出
    3. static void gc() :  调用垃圾回收器,但不能100%回收
        对象在被回收前,会调用对象的finalize方法,且只会执行一次
    4. static Properties getProperties() : 获取JVM和当前操作系统的属性
    5. static void arrayCopy(Object src, int srcPos, Object dest, int destPos, int length) 
       复制一个数组
        src : 要复制的源数组
        srcPos :　源数组的起始索引
        dest : 复制后的目标数组
        destPos : 目标数组起始索引
        length : 拷贝长度
</code></pre><h3 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h3><pre><code>* 概述
    * 数学计算工具类
    * java.lang.Math
    * 全是静态方法
* 常用方法
    1. static int abs(int i) : 获取绝对值
    2. static double ceil(double d) : 返回大于或等于参数d的最小整数(向上取整)
    3. static double floor(doublr d) : 返回小于或等于参数d的最大整数(向下取整)
    4. static double pow(double a, double b) : 返回a的b次方
    5. static double sqrt(double a) : 开方
       输入负数,返回NaN,意思是not a number
    6. static double random() : 返回随机数0.0-1.0, [0.0-1.0)
    7. static double round(double d) : 获取d的四舍五入的值
        5.415622 得 5.0
        5.5222455555 得 6.0  
</code></pre><h3 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h3><pre><code>* 概述
    * 数组工具类 
    * 位于java.util.Arrays
    * 全是静态方法
* 常用方法
    1. static void sort(数组) : 将数组进行升序排序
    2. static int binarySearch(数组,查找元素) :　返回查找元素在数组中的索引
    　  注意:　查找元素不存在时，返回(-插入点 - 1)
    3. static String toString(数组) : 将数组变成字符串
</code></pre><h3 id="大数据运算"><a href="#大数据运算" class="headerlink" title="大数据运算"></a>大数据运算</h3><h4 id="BigInteger类"><a href="#BigInteger类" class="headerlink" title="BigInteger类"></a>BigInteger类</h4><pre><code>* 概述
    * 将一个超大整数封装到BigInteger对象中
    * java.math.BigInteger
* 构造方法
    * BigInteger(String num) :  将BigInteger的十进制字符串表示形式转换为BigInteger对象。
* 四则运算(结果也是BigInteger对象)
    * 加  BigInteger add(BigInteger val) 
      BigInteger b = b1.add(b2);
    * 减  BigInteger subtract(BigInteger val)  
    * 乘  BigInteger multiply(BigInteger val)  
    * 除  BigInteger divide(BigInteger val) 
</code></pre><h4 id="BigDecimal类"><a href="#BigDecimal类" class="headerlink" title="BigDecimal类"></a>BigDecimal类</h4><pre><code>* 概述
    * 解决浮点数计算不准确的问题
* 构造方法
    * BigDecimal(String val) :　将 BigDecimal 的字符串表示形式转换为 BigDecimal
* 三则运算(结果也是BigDecimal对象)
    * 加  BigDecimal add(BigDecimal val) 
      BigDecimal b = b1.add(b2);
    * 减  BigDecimal subtract(BigDecimal val)
    * 乘  BigDecimal multiply(BigDecimal val)  
* 除  
    * divide(BigDecimal val) 除不尽会产生无限不循环小数,抛异常
    * 用BigDecimal divide(BigDecimal divisor, int scale,  int roundingMode) 
      scale : 保留几位数
      roundingMode : 保留模式,写下面这些静态成员变量
* 静态成员变量
    * static int ROUND_UP : 向上加１
    * static int ROUND_DOWN : 直接舍去
    * static int ROUND_HALF_UP : 如果舍弃部分&gt;=0.5,向上加1,否则直接舍去
    * static int ROUND_HALF_DOWN : &gt;0.5,向上加1,否则直接舍去
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;API概念&quot;&gt;&lt;a href=&quot;#API概念&quot; class=&quot;headerlink&quot; title=&quot;API概念&quot;&gt;&lt;/a&gt;API概念&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;* API(Application Programming Interface) 
  应用程序编程接口
* Java API
  Java jdk给我们提供好的类
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="JAVA基础" scheme="https://geekhoon.github.io/categories/JAVA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JAVA基础语法" scheme="https://geekhoon.github.io/tags/JAVA%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
</feed>
