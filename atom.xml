<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>geekhoon</title>
  <subtitle>怕, 你就输一辈子</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://geekhoon.github.io/"/>
  <updated>2018-04-08T08:49:03.315Z</updated>
  <id>https://geekhoon.github.io/</id>
  
  <author>
    <name>geekhoon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>test</title>
    <link href="https://geekhoon.github.io/2018/04/08/test/"/>
    <id>https://geekhoon.github.io/2018/04/08/test/</id>
    <published>2018-04-08T08:49:03.000Z</published>
    <updated>2018-04-08T08:49:03.315Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>BeanUtils</title>
    <link href="https://geekhoon.github.io/2017/08/31/BeanUtils/"/>
    <id>https://geekhoon.github.io/2017/08/31/BeanUtils/</id>
    <published>2017-08-31T00:52:23.000Z</published>
    <updated>2017-08-31T04:14:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BeanUtils"><a href="#BeanUtils" class="headerlink" title="BeanUtils"></a>BeanUtils</h2><h3 id="BeanUtils-概述"><a href="#BeanUtils-概述" class="headerlink" title="BeanUtils_概述"></a>BeanUtils_概述</h3><blockquote>
<blockquote>
<p>是Apache commons组件成员之一,主要用于简化JavaBean封装数据操作;</p>
</blockquote>
</blockquote>
<h3 id="BeanUtils-使用"><a href="#BeanUtils-使用" class="headerlink" title="BeanUtils_使用"></a>BeanUtils_使用</h3><p>1.导入BeanUtils相关jar包到项目src/lib目录中;</p>
<p>2.将jar包添加到项目构建路径;</p>
<p>3.使用BeanUtils相关工具方法;</p>
<a id="more"></a> 
<p>JavaBean: Person<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Integer pid;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Character gender;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Integer age;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String[] hobby;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(Integer pid, String name, Character gender, Integer age, String[] hobby)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">super</span>();</div><div class="line"></div><div class="line">		<span class="keyword">this</span>.pid = pid;</div><div class="line"></div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line"></div><div class="line">		<span class="keyword">this</span>.gender = gender;</div><div class="line"></div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line"></div><div class="line">		<span class="keyword">this</span>.hobby = hobby;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getPid</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> pid;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPid</span><span class="params">(Integer pid)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">this</span>.pid = pid;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> name;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Character <span class="title">getGender</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> gender;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(Character gender)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">this</span>.gender = gender;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> age;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> String[] getHobby() &#123;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> hobby;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHobby</span><span class="params">(String[] hobby)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">this</span>.hobby = hobby;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> <span class="string">"Person [pid="</span> + pid + <span class="string">", name="</span> + name + <span class="string">", gender="</span> + gender + <span class="string">", age="</span> + age + <span class="string">", hobby="</span></div><div class="line"></div><div class="line">				+ Arrays.toString(hobby) + <span class="string">"]"</span>;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用BeanUtils为JavaBean封装属性: 底层反射调用属性的setXxx(…)方法;<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">caseSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">    Person person = <span class="keyword">new</span> Person();</div><div class="line"></div><div class="line">    BeanUtils.setProperty(person, <span class="string">"pid"</span>, <span class="number">1</span>);</div><div class="line"></div><div class="line">    BeanUtils.setProperty(person, <span class="string">"name"</span>, <span class="string">"静静"</span>);</div><div class="line"></div><div class="line">    BeanUtils.setProperty(person, <span class="string">"gender"</span>, <span class="string">'女'</span>);</div><div class="line"></div><div class="line">    BeanUtils.setProperty(person, <span class="string">"age"</span>, <span class="number">18</span>);</div><div class="line"></div><div class="line">    BeanUtils.setProperty(person, <span class="string">"hobby"</span>, <span class="keyword">new</span> String[] &#123; <span class="string">"唱歌"</span>, <span class="string">"跳舞"</span> &#125;);</div><div class="line"></div><div class="line">    System.out.println(person);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用BeanUtils获取JavaBean属性值: 底层反射调用属性的getXxx(…)方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">caseGet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">    Person person = <span class="keyword">new</span> Person(<span class="number">1</span>, <span class="string">"静静"</span>, <span class="string">'女'</span>, <span class="number">18</span>, <span class="keyword">new</span> String[] &#123; <span class="string">"唱歌"</span>, <span class="string">"跳舞"</span> &#125;);</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"Person: pid --&gt; "</span> + BeanUtils.getProperty(person, <span class="string">"pid"</span>));</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"Person: name --&gt; "</span> + BeanUtils.getProperty(person, <span class="string">"name"</span>));</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"Person: gender --&gt; "</span> + BeanUtils.getProperty(person, <span class="string">"gender"</span>));</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"Person: age --&gt; "</span> + BeanUtils.getProperty(person, <span class="string">"age"</span>));</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"Person: hobby --&gt; "</span> + Arrays.toString(BeanUtils.getArrayProperty(person, <span class="string">"hobby"</span>)));</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用BeanUtils将Map数据封装到JavaBean属性中: 底层反射调用属性的setXxx(…)方法;<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">caseMap</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">// 将数据封装到Map中</span></div><div class="line"></div><div class="line">	Map&lt;String, String[]&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"></div><div class="line">	map.put(<span class="string">"pid"</span>, <span class="keyword">new</span> String[] &#123; <span class="string">"001"</span> &#125;);</div><div class="line"></div><div class="line">	map.put(<span class="string">"name"</span>, <span class="keyword">new</span> String[] &#123; <span class="string">"静静"</span> &#125;);</div><div class="line"></div><div class="line">	map.put(<span class="string">"gender"</span>, <span class="keyword">new</span> String[] &#123; <span class="string">"女"</span> &#125;);</div><div class="line"></div><div class="line">	map.put(<span class="string">"age"</span>, <span class="keyword">new</span> String[] &#123; <span class="string">"18"</span> &#125;);</div><div class="line"></div><div class="line">	map.put(<span class="string">"hobby"</span>, <span class="keyword">new</span> String[] &#123; <span class="string">"唱歌"</span>, <span class="string">"跳舞"</span> &#125;);</div><div class="line"></div><div class="line">	Person person = <span class="keyword">new</span> Person();</div><div class="line"></div><div class="line">	BeanUtils.populate(person, map);</div><div class="line"></div><div class="line">	System.out.println(person);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="封装MyBeanUtils"><a href="#封装MyBeanUtils" class="headerlink" title="封装MyBeanUtils"></a>封装MyBeanUtils</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanUtils</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">populate</span><span class="params">(Object obj, Map&lt;String, String[]&gt; map)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">			BeanUtils.populate(obj, map);</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"></div><div class="line">			<span class="comment">//转换成运行期异常</span></div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">populate</span><span class="params">(Class clazz, Map&lt;String, String[]&gt; map)</span> </span>&#123;</div><div class="line">	</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">			Object obj = clazz.newInstance();</div><div class="line"></div><div class="line">			BeanUtils.populate(obj, map);</div><div class="line"></div><div class="line">			<span class="keyword">return</span> obj;</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"></div><div class="line">			<span class="comment">//转换成运行期异常</span></div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">populate</span><span class="params">(Class&lt;T&gt; clazz, Map&lt;String, String[]&gt; map)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">			T t = (T) clazz.newInstance();</div><div class="line"></div><div class="line">			BeanUtils.populate(t, map);</div><div class="line"></div><div class="line">			<span class="keyword">return</span> t;</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"></div><div class="line">			<span class="comment">//转换成运行期异常</span></div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"></div><div class="line"> * JavaBean: Person</div><div class="line"></div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Integer pid;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Character gender;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Integer age;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String[] hobby;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(Integer pid, String name, Character gender, Integer age, String[] hobby)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">super</span>();</div><div class="line"></div><div class="line">		<span class="keyword">this</span>.pid = pid;</div><div class="line"></div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line"></div><div class="line">		<span class="keyword">this</span>.gender = gender;</div><div class="line"></div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line"></div><div class="line">		<span class="keyword">this</span>.hobby = hobby;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getPid</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> pid;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPid</span><span class="params">(Integer pid)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">this</span>.pid = pid;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> name;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Character <span class="title">getGender</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> gender;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(Character gender)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">this</span>.gender = gender;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> age;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> String[] getHobby() &#123;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> hobby;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHobby</span><span class="params">(String[] hobby)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">this</span>.hobby = hobby;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> <span class="string">"Person [pid="</span> + pid + <span class="string">", name="</span> + name + <span class="string">", gender="</span> + gender + <span class="string">", age="</span> + age + <span class="string">", hobby="</span></div><div class="line"></div><div class="line">				+ Arrays.toString(hobby) + <span class="string">"]"</span>;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用自定义MyBeanUtils封装数据;<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">caseMyBeanUtils</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">// 将数据封装到Map中</span></div><div class="line"></div><div class="line">	Map&lt;String, String[]&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"></div><div class="line">	map.put(<span class="string">"pid"</span>, <span class="keyword">new</span> String[] &#123; <span class="string">"001"</span> &#125;);</div><div class="line"></div><div class="line">	map.put(<span class="string">"name"</span>, <span class="keyword">new</span> String[] &#123; <span class="string">"小花花"</span> &#125;);</div><div class="line"></div><div class="line">	map.put(<span class="string">"gender"</span>, <span class="keyword">new</span> String[] &#123; <span class="string">"女"</span> &#125;);</div><div class="line"></div><div class="line">	map.put(<span class="string">"age"</span>, <span class="keyword">new</span> String[] &#123; <span class="string">"10"</span> &#125;);</div><div class="line"></div><div class="line">	map.put(<span class="string">"hobby"</span>, <span class="keyword">new</span> String[] &#123; <span class="string">"吃饭"</span>, <span class="string">"睡觉"</span>,<span class="string">"打豆豆"</span> &#125;);</div><div class="line"></div><div class="line">	Person person = MyBeanUtils.populate(Person.class, map);</div><div class="line"></div><div class="line">	System.out.println(person);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目;"></a>创建项目;</h3><h3 id="导入相关jar包-BeanUtils-dom4j"><a href="#导入相关jar包-BeanUtils-dom4j" class="headerlink" title="导入相关jar包: BeanUtils,dom4j;"></a>导入相关jar包: BeanUtils,dom4j;</h3><h3 id="准备XML文档"><a href="#准备XML文档" class="headerlink" title="准备XML文档;"></a>准备XML文档;</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">className</span>=<span class="string">"cn.itheima.domain.User"</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">value</span>=<span class="string">"jack"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">className</span>=<span class="string">"cn.itheima.domain.Student"</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"rose"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="根据XML文档创建JavaBean"><a href="#根据XML文档创建JavaBean" class="headerlink" title="根据XML文档创建JavaBean;"></a>根据XML文档创建JavaBean;</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"></div><div class="line"> * JavaBean: User;</div><div class="line"></div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String userName;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String password;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String userName, String password)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">this</span>.userName = userName;</div><div class="line"></div><div class="line">		<span class="keyword">this</span>.password = password;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> userName;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">this</span>.userName = userName;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> password;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">this</span>.password = password;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> <span class="string">"User [userName="</span> + userName + <span class="string">", password="</span> + password + <span class="string">"]"</span>;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"></div><div class="line"> * JavaBean: Student;</div><div class="line"></div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Integer age;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, Integer age)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line"></div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> name;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> age;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> <span class="string">"Student [name="</span> + name + <span class="string">", age="</span> + age + <span class="string">"]"</span>;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="编写实现代码"><a href="#编写实现代码" class="headerlink" title="编写实现代码;"></a>编写实现代码;</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">caseXML</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 1. 创建dom4j核心对象SAXReader;</span></div><div class="line"></div><div class="line">    SAXReader reader = <span class="keyword">new</span> SAXReader();</div><div class="line"></div><div class="line">    <span class="comment">// 2. 获取XML的dom树;</span></div><div class="line"></div><div class="line">    Document document = reader.read(<span class="keyword">new</span> File(<span class="string">"src/bean.xml"</span>));</div><div class="line"></div><div class="line">    <span class="comment">// 3. 获取根标签;</span></div><div class="line"></div><div class="line">    Element rootElement = document.getRootElement();</div><div class="line"></div><div class="line">    <span class="comment">// 4. 获取所有的bean标签;</span></div><div class="line"></div><div class="line">    List&lt;Element&gt; beans = rootElement.elements(<span class="string">"bean"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 5. 遍历;</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> (Element bean : beans) &#123;</div><div class="line"></div><div class="line">        <span class="comment">// 6. 获取bean的className的属性值;</span></div><div class="line"></div><div class="line">        String classPath = bean.attributeValue(<span class="string">"className"</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 7. 根据className的属性值,生成Class对象;</span></div><div class="line"></div><div class="line">        Class&lt;?&gt; clazz = Class.forName(classPath);</div><div class="line"></div><div class="line">        <span class="comment">// 8. 创建Map用于封装数据;</span></div><div class="line"></div><div class="line">        Map&lt;String, String[]&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"></div><div class="line">        <span class="comment">// 9. 获取bean标签的所有property子标签;</span></div><div class="line"></div><div class="line">        List&lt;Element&gt; propertys = bean.elements(<span class="string">"property"</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 10. 遍历;</span></div><div class="line"></div><div class="line">        <span class="keyword">for</span> (Element property : propertys) &#123;</div><div class="line"></div><div class="line">            <span class="comment">// 11. 将property的name属性值与value属性值封装到Map中;</span></div><div class="line"></div><div class="line">            map.put(property.attributeValue(<span class="string">"name"</span>), <span class="keyword">new</span> String[]&#123;property.attributeValue(<span class="string">"value"</span>)&#125;);</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 11. 将Map中的数据封装到对象中;</span></div><div class="line"></div><div class="line">        Object obj = MyBeanUtils.populate(clazz, map);</div><div class="line"></div><div class="line">        <span class="comment">// 12. 测试;</span></div><div class="line"></div><div class="line">        System.out.println(obj);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;BeanUtils&quot;&gt;&lt;a href=&quot;#BeanUtils&quot; class=&quot;headerlink&quot; title=&quot;BeanUtils&quot;&gt;&lt;/a&gt;BeanUtils&lt;/h2&gt;&lt;h3 id=&quot;BeanUtils-概述&quot;&gt;&lt;a href=&quot;#BeanUtils-概述&quot; class=&quot;headerlink&quot; title=&quot;BeanUtils_概述&quot;&gt;&lt;/a&gt;BeanUtils_概述&lt;/h3&gt;&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;是Apache commons组件成员之一,主要用于简化JavaBean封装数据操作;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;BeanUtils-使用&quot;&gt;&lt;a href=&quot;#BeanUtils-使用&quot; class=&quot;headerlink&quot; title=&quot;BeanUtils_使用&quot;&gt;&lt;/a&gt;BeanUtils_使用&lt;/h3&gt;&lt;p&gt;1.导入BeanUtils相关jar包到项目src/lib目录中;&lt;/p&gt;
&lt;p&gt;2.将jar包添加到项目构建路径;&lt;/p&gt;
&lt;p&gt;3.使用BeanUtils相关工具方法;&lt;/p&gt;
    
    </summary>
    
      <category term="JAVA基础" scheme="https://geekhoon.github.io/categories/JAVA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JAVA基础语法" scheme="https://geekhoon.github.io/tags/JAVA%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>SSH整合</title>
    <link href="https://geekhoon.github.io/2017/05/25/SSH%E6%95%B4%E5%90%88/"/>
    <id>https://geekhoon.github.io/2017/05/25/SSH整合/</id>
    <published>2017-05-25T07:24:05.000Z</published>
    <updated>2017-05-26T06:24:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="整合原理图"><a href="#整合原理图" class="headerlink" title="整合原理图"></a>整合原理图</h2><p><img src="http://oj3s07yy0.bkt.clouddn.com/blog/20170526/095903112.png" alt="mark"><br><a id="more"></a></p>
<h2 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h2><p>Struts2<br>   Struts2基本jar包(13个);<br>   Struts2整合Spring包(1个);</p>
<p>Spring<br>   Spring基本jar包(6个);<br>   Spring整合Web项目包(1个);<br>   Spring整合Service层jar包(2个);<br>   Spring整合Dao层jar包(1个);<br>Hibernate<br>   Hibernate基本jar包(9个);<br>   Hibernate依赖日志包(2个);<br>   Hibernate依赖c3p0包(3个);<br>   MySQL数据库驱动包(1个);</p>
<p>其它<br>   jsp的jar包(2个);</p>
<p>注意:去掉一个重复的低版本javassist包;</p>
<h2 id="整合步骤"><a href="#整合步骤" class="headerlink" title="整合步骤"></a>整合步骤</h2><h3 id="Spring整合web项目"><a href="#Spring整合web项目" class="headerlink" title="Spring整合web项目"></a>Spring整合web项目</h3><p>为了让Spring容器随项目的启动而创建,需要在web.xml中配置监听器,监听器是由Spring提供的.</p>
<h4 id="配置监听器"><a href="#配置监听器" class="headerlink" title="配置监听器"></a>配置监听器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 让spring随web服务器启动而创建 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 指定spring配置文件路径 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 默认在src下,下面这句可以不写 --&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="准备spring配置文件"><a href="#准备spring配置文件" class="headerlink" title="准备spring配置文件"></a>准备spring配置文件</h4><p>在src下,创建applicationContext.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></div><div class="line">	   <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> </div><div class="line">	   <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> </div><div class="line">	   <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> </div><div class="line">	   <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span> </div><div class="line">	   <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></div><div class="line">						http://www.springframework.org/schema/beans/spring-beans-4.2.xsd </div><div class="line">						http://www.springframework.org/schema/context </div><div class="line">						http://www.springframework.org/schema/context/spring-context-4.2.xsd </div><div class="line">						http://www.springframework.org/schema/aop </div><div class="line">						http://www.springframework.org/schema/aop/spring-aop-4.2.xsd </div><div class="line">						http://www.springframework.org/schema/tx </div><div class="line">						http://www.springframework.org/schema/tx/spring-tx-4.2.xsd "&gt;</div><div class="line">						</div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="将struts2配置到web中"><a href="#将struts2配置到web中" class="headerlink" title="将struts2配置到web中"></a>将struts2配置到web中</h3><h4 id="准备Action"><a href="#准备Action" class="headerlink" title="准备Action"></a>准备Action</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ModelDriven</span>&lt;<span class="title">User</span>&gt; </span>&#123;</div><div class="line">	<span class="keyword">private</span> User user = <span class="keyword">new</span> User();</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">regist</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		System.out.println(<span class="string">"用户注册"</span>);</div><div class="line">		<span class="keyword">return</span> SUCCESS;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">getModel</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> user;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="配置Action"><a href="#配置Action" class="headerlink" title="配置Action"></a>配置Action</h4><p>src下创建struts.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></div><div class="line">	"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</div><div class="line">	"http://struts.apache.org/dtds/struts-2.3.dtd"&gt;</div><div class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 开启开发模式 项目编写时开启,上线时关闭--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.devMode"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"ssh"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"UserAction_*"</span> <span class="attr">class</span>=<span class="string">"com.geekhoon.web.action.UserAction"</span> <span class="attr">method</span>=<span class="string">"&#123;1&#125;"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">result</span>&gt;</span>/hello.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">package</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="配置入口过滤器"><a href="#配置入口过滤器" class="headerlink" title="配置入口过滤器"></a>配置入口过滤器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>spring_day04<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="comment">&lt;!-- 让spring随web服务器启动而创建 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 指定spring配置文件路径 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="comment">&lt;!-- 配置struts2入口过滤器 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="struts2与spring整合"><a href="#struts2与spring整合" class="headerlink" title="struts2与spring整合"></a>struts2与spring整合</h3><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>1.分别创建UserService接口和UserServiceImpl实现类(暂时仅创建就好)<br>2.Action中提供UserService属性(提供set方法)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ModelDriven</span>&lt;<span class="title">User</span>&gt; </span>&#123;</div><div class="line">	<span class="keyword">private</span> User user = <span class="keyword">new</span> User();</div><div class="line">	<span class="keyword">private</span> UserService userService;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserService</span><span class="params">(UserService userService)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.userService = userService;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	...</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="整合方案一"><a href="#整合方案一" class="headerlink" title="整合方案一"></a>整合方案一</h4><p>Action对象仍然由struts2创建,spring负责组装Action的依赖属性</p>
<h5 id="开启struts2访问spring容器开关"><a href="#开启struts2访问spring容器开关" class="headerlink" title="开启struts2访问spring容器开关"></a>开启struts2访问spring容器开关</h5><p>struts.xml中增加如下配置:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 开启struts2访问spring对象工厂 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.objectFactory"</span> <span class="attr">value</span>=<span class="string">"spring"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h5 id="struts2会根据依赖属性名称从spring容器获得依赖属性"><a href="#struts2会根据依赖属性名称从spring容器获得依赖属性" class="headerlink" title="struts2会根据依赖属性名称从spring容器获得依赖属性"></a>struts2会根据依赖属性名称从spring容器获得依赖属性</h5><p>1.struts.xml中增加如下配置:(默认就是如下配置)<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 由spring根据依赖属性名完成依赖属性的自动装配 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.objectFactory.spring.autoWire"</span> <span class="attr">value</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2.applicationContext.xml中增加如下配置:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Service层 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.geekhoon.service.impl.UserServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>struts2会根据依赖属性名称(UserAction中的userService),从spring容器(会加载applicationContext.xml)中找到同名对象(name为userService)并注入.即struts2创建了UserAction,但是Spring完成了依赖属性注入</p>
<h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>UserACtion的regist方法中打印userService,如果打印不是null,是内存地址,说明属性注入成功<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">regist</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	System.out.println(userService);</div><div class="line">	System.out.println(<span class="string">"用户注册"</span>);</div><div class="line">	<span class="keyword">return</span> SUCCESS;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="整合方案二-推荐"><a href="#整合方案二-推荐" class="headerlink" title="整合方案二(推荐)"></a>整合方案二(推荐)</h4><p>Action对象的创建以及依赖注入全部由spring负责完成</p>
<h5 id="开启struts2访问spring容器开关-1"><a href="#开启struts2访问spring容器开关-1" class="headerlink" title="开启struts2访问spring容器开关"></a>开启struts2访问spring容器开关</h5><p>struts.xml中增加如下配置:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 开启struts2访问spring对象工厂 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.objectFactory"</span> <span class="attr">value</span>=<span class="string">"spring"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h5 id="将Action配置到spring容器中"><a href="#将Action配置到spring容器中" class="headerlink" title="将Action配置到spring容器中"></a>将Action配置到spring容器中</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Action --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userAction"</span> <span class="attr">class</span>=<span class="string">"com.geekhoon.web.action.UserAction"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userService"</span> <span class="attr">ref</span>=<span class="string">"userService"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="修改struts2配置中Action的class属性"><a href="#修改struts2配置中Action的class属性" class="headerlink" title="修改struts2配置中Action的class属性"></a>修改struts2配置中Action的class属性</h5><p>不再使用全类名,而是使用spring容器中配置的Action的name属性值<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"ssh"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"UserAction_*"</span> <span class="attr">class</span>=<span class="string">"userAction"</span> <span class="attr">method</span>=<span class="string">"&#123;1&#125;"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">result</span>&gt;</span>/hello.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>注意事项:<br>1.方案二的Action中的依赖属性必须手动注入,即在配置Action时,书写<code>&lt;property&gt;</code>标签,指定属性的值或引用.而方案一中,属性注入是struts2自动从Spring容器中获取的<br>2.Action配置的scope一定为prototype(多例),保证每次请求都是新的Action,因为Action的生命周期是一次请求.当执行完当前Action的某一个方法后,Action就被销毁了.再次访问当前Action的其他方法,需要再次请求,再次创建新的Action实例.避免线程安全问题.<br>补充:java中的servlet采用的是单实例多线程方式</p>
<h3 id="spring整合c3p0连接池"><a href="#spring整合c3p0连接池" class="headerlink" title="spring整合c3p0连接池"></a>spring整合c3p0连接池</h3><h4 id="准备db-properties"><a href="#准备db-properties" class="headerlink" title="准备db.properties"></a>准备db.properties</h4><p>src下准备该配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">jdbc.driverClass=com.mysql.jdbc.Driver</div><div class="line">jdbc.jdbcUrl=jdbc:mysql:///crm</div><div class="line">jdbc.user=root</div><div class="line">jdbc.password=root</div></pre></td></tr></table></figure></p>
<h4 id="在spring配置中读取db-properties"><a href="#在spring配置中读取db-properties" class="headerlink" title="在spring配置中读取db.properties"></a>在spring配置中读取db.properties</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置读取db.properties --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h4 id="在spring中配置连接池"><a href="#在spring中配置连接池" class="headerlink" title="在spring中配置连接池"></a>在spring中配置连接池</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置datasource --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span> &gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClass&#125;"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.jdbcUrl&#125;"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.user&#125;"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="单独搭建hibernate5"><a href="#单独搭建hibernate5" class="headerlink" title="单独搭建hibernate5"></a>单独搭建hibernate5</h3><h4 id="书写实体和实体映射"><a href="#书写实体和实体映射" class="headerlink" title="书写实体和实体映射"></a>书写实体和实体映射</h4><p>com.geekhoon.domain包下,创建User实体类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.geekhoon.domain;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> Long user_id;</div><div class="line">	<span class="keyword">private</span> String user_code;</div><div class="line">	<span class="keyword">private</span> String user_name;</div><div class="line">	<span class="keyword">private</span> String user_password;</div><div class="line">	<span class="keyword">private</span> Character user_state;</div><div class="line">	</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Long <span class="title">getUser_id</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> user_id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser_id</span><span class="params">(Long user_id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.user_id = user_id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUser_code</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> user_code;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser_code</span><span class="params">(String user_code)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.user_code = user_code;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUser_name</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> user_name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser_name</span><span class="params">(String user_name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.user_name = user_name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUser_password</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> user_password;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser_password</span><span class="params">(String user_password)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.user_password = user_password;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Character <span class="title">getUser_state</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> user_state;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser_state</span><span class="params">(Character user_state)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.user_state = user_state;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"User [user_id="</span> + user_id + <span class="string">", user_code="</span> + user_code + <span class="string">", user_name="</span> + user_name + <span class="string">", user_password="</span></div><div class="line">				+ user_password + <span class="string">", user_state="</span> + user_state + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>domain包下创建实体映射配置文件:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC </span></div><div class="line">    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</div><div class="line">    "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</div><div class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"com.geekhoon.domain"</span> &gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"User"</span> <span class="attr">table</span>=<span class="string">"sys_user"</span> &gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"user_id"</span>  &gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"identity"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user_code"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user_name"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user_password"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user_state"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="tag">&lt;/<span class="name">class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="创建主配置文件"><a href="#创建主配置文件" class="headerlink" title="创建主配置文件"></a>创建主配置文件</h4><p>src下创建hibernate.cfg.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></div><div class="line">	"-//Hibernate/Hibernate Configuration DTD 3.0//EN"</div><div class="line">	"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 必选配置 --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span>jdbc:mysql:///crm<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 可选配置 --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">			</div><div class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">			</div><div class="line">			<span class="comment">&lt;!-- 注意:</span></div><div class="line">					1.不要配置hibernate.current_session_context_class,</div><div class="line">						因为spring管理sessionFactory时,spring来控制同一个线程返回同一个session</div><div class="line">					2.不要在hibernate配置中指定隔离级别.spring管理事务时指定</div><div class="line">			</div><div class="line">			&lt;property name="hibernate.current_session_context_class"&gt;thread&lt;/property&gt; --&gt;</div><div class="line">		<span class="comment">&lt;!-- 映射引入配置 --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/geekhoon/domain/User.hbm.xml"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><p>创建com.geekhoon.test包,新建HibernateTest类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateTest</span> </span>&#123;</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span></span>&#123;</div><div class="line">		Configuration conf = <span class="keyword">new</span> Configuration().configure();</div><div class="line">		SessionFactory sessionFactory = conf.buildSessionFactory();</div><div class="line">		Session session = sessionFactory.openSession();</div><div class="line">		Transaction tx = session.beginTransaction();</div><div class="line">		<span class="comment">//操作</span></div><div class="line">		User u = <span class="keyword">new</span> User();</div><div class="line">		u.setUser_name(<span class="string">"hibernate测试"</span>);</div><div class="line">		session.save(u);</div><div class="line">		</div><div class="line">		tx.commit();</div><div class="line">		session.close();</div><div class="line">		sessionFactory.close();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="spring整合hibernate"><a href="#spring整合hibernate" class="headerlink" title="spring整合hibernate"></a>spring整合hibernate</h3><h4 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h4><p>hibernate配置使用主配置文件hibernate.cfg.xml.<br>在spring容器中加载配置:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 将sessionFactory配置到spring --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.LocalSessionFactoryBean"</span> &gt;</span></div><div class="line">	<span class="comment">&lt;!-- 加载hibernate配置信息 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:hibernate.cfg.xml"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 注入c3p0连接池 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h5 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:applicationContext.xml"</span>)</div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateTest</span> </span>&#123;</div><div class="line">		</div><div class="line">	<span class="meta">@Resource</span>(name=<span class="string">"sessionFactory"</span>)</div><div class="line">	<span class="keyword">private</span> SessionFactory sf;</div><div class="line">	</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun2</span><span class="params">()</span></span>&#123;</div><div class="line">		</div><div class="line">		Session session = sf.openSession();</div><div class="line">		</div><div class="line">		Transaction tx = session.beginTransaction();</div><div class="line">		</div><div class="line">		<span class="comment">//操作</span></div><div class="line">		<span class="comment">//----------------------</span></div><div class="line">		User u = <span class="keyword">new</span> User();</div><div class="line">		u.setUser_name(<span class="string">"hibernate测试3"</span>);</div><div class="line">		</div><div class="line">		session.save(u);</div><div class="line">		<span class="comment">//----------------------</span></div><div class="line">		tx.commit();</div><div class="line">		</div><div class="line">		session.close();</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="方案二-推荐"><a href="#方案二-推荐" class="headerlink" title="方案二(推荐)"></a>方案二(推荐)</h4><p>hibernate配置在spring配置中注入,不需要主配置文件.<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 将sessionFactory配置到spring --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.LocalSessionFactoryBean"</span> &gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 直接在spring中指定hibernate配置(不需要hibernate.cfg.xml) --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernateProperties"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">props</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 必选配置 --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 可选配置 --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">props</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 引入实体映射配置 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappingDirectoryLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:com/geekhoon/domain"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 注入c3p0连接池 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>测试代码同上</p>
<h3 id="整理配置Service-Dao"><a href="#整理配置Service-Dao" class="headerlink" title="整理配置Service|Dao"></a>整理配置Service|Dao</h3><h4 id="书写Service"><a href="#书写Service" class="headerlink" title="书写Service"></a>书写Service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> UserDao ud;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User u)</span> </span>&#123;</div><div class="line">		ud.save(u);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUd</span><span class="params">(UserDao ud)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.ud = ud;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="书写Dao"><a href="#书写Dao" class="headerlink" title="书写Dao"></a>书写Dao</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">extends</span> <span class="title">HibernateDaoSupport</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</div><div class="line">	<span class="comment">//Hibernate模版,写如下或者继承HibernateDaoSupport</span></div><div class="line">	<span class="comment">//private HibernateTemplate ht;</span></div><div class="line"></div><div class="line">	<span class="meta">@Override</span> </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User u)</span> </span>&#123;</div><div class="line">		<span class="comment">//1.获得session</span></div><div class="line">		<span class="comment">//2.调用save</span></div><div class="line">		getHibernateTemplate().save(u);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="书写spring配置"><a href="#书写spring配置" class="headerlink" title="书写spring配置"></a>书写spring配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Dao层 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"com.geekhoon.dao.UserDaoImpl"</span> &gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>					</div><div class="line"><span class="comment">&lt;!-- Service层 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.geekhoon.service.impl.UserServiceImpl"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ud"</span> <span class="attr">ref</span>=<span class="string">"userDao"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:applicationContext.xml"</span>)</div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Resource</span>(name=<span class="string">"userService"</span>)</div><div class="line">	<span class="keyword">private</span> UserService userService;</div><div class="line">	</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="comment">//该代码在没有配置aop事务之前会抛出(不可写入异常)</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun3</span><span class="params">()</span></span>&#123;</div><div class="line">		</div><div class="line">		<span class="comment">//操作</span></div><div class="line">		User u = <span class="keyword">new</span> User();</div><div class="line">		u.setUser_name(<span class="string">"hibernate测试4"</span>);</div><div class="line">		userService.save(u);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="aop事务-注解版"><a href="#aop事务-注解版" class="headerlink" title="aop事务(注解版)"></a>aop事务(注解版)</h3><h4 id="配置事务管理器"><a href="#配置事务管理器" class="headerlink" title="配置事务管理器"></a>配置事务管理器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.HibernateTransactionManager"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 注入sessionFactory --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="打开注解事务管理开关"><a href="#打开注解事务管理开关" class="headerlink" title="打开注解事务管理开关"></a>打开注解事务管理开关</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 打开注解管理事务开关 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></div></pre></td></tr></table></figure>
<h4 id="在Service中加入注解来管理事务"><a href="#在Service中加入注解来管理事务" class="headerlink" title="在Service中加入注解来管理事务"></a>在Service中加入注解来管理事务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Transactional</span>(readOnly=<span class="keyword">false</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> UserDao ud;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User u)</span> </span>&#123;</div><div class="line">		ud.save(u);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUd</span><span class="params">(UserDao ud)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.ud = ud;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="测试-3"><a href="#测试-3" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:applicationContext.xml"</span>)</div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Resource</span>(name=<span class="string">"userService"</span>)</div><div class="line">	<span class="keyword">private</span> UserService userService;</div><div class="line">	</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun3</span><span class="params">()</span></span>&#123;</div><div class="line">		</div><div class="line">		<span class="comment">//操作</span></div><div class="line">		User u = <span class="keyword">new</span> User();</div><div class="line">		u.setUser_name(<span class="string">"hibernate测试4"</span>);</div><div class="line">		userService.save(u);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="aop事务-XML版"><a href="#aop事务-XML版" class="headerlink" title="aop事务(XML版)"></a>aop事务(XML版)</h3><h4 id="配置事务管理器-1"><a href="#配置事务管理器-1" class="headerlink" title="配置事务管理器"></a>配置事务管理器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.HibernateTransactionManager"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 注入sessionFactory --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="配置事务通知"><a href="#配置事务通知" class="headerlink" title="配置事务通知"></a>配置事务通知</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置事务通知 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"save*"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete*"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span>			</div><div class="line">	<span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span>	</div><div class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="配置切面"><a href="#配置切面" class="headerlink" title="配置切面"></a>配置切面</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置事务切面 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 配置切点 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* com.geekhoon.service.impl.*ServiceImpl.*(..))"</span> <span class="attr">id</span>=<span class="string">"txPC"</span>/&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 配置切面 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"txPC"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="测试-4"><a href="#测试-4" class="headerlink" title="测试"></a>测试</h4><p>测试前将UserServiceImpl上的@Transactional(readOnly=false)注释<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:applicationContext.xml"</span>)</div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Resource</span>(name=<span class="string">"userService"</span>)</div><div class="line">	<span class="keyword">private</span> UserService userService;</div><div class="line">	</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun3</span><span class="params">()</span></span>&#123;</div><div class="line">		</div><div class="line">		<span class="comment">//操作</span></div><div class="line">		User u = <span class="keyword">new</span> User();</div><div class="line">		u.setUser_name(<span class="string">"hibernate测试5"</span>);</div><div class="line">		userService.save(u);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Hibernate模板对象api"><a href="#Hibernate模板对象api" class="headerlink" title="Hibernate模板对象api"></a>Hibernate模板对象api</h2><p>UserServiceImpl:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> UserDao ud;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User u)</span> </span>&#123;</div><div class="line">		ud.save(u);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUd</span><span class="params">(UserDao ud)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.ud = ud;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(User u)</span> </span>&#123;</div><div class="line">		ud.update(u);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">		ud.delete(id);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">getById</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> ud.getById(id);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getByConditions1</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> ud.getByConditions1(name);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getByConditions2</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> ud.getByConditions2(name);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getByConditions3</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> ud.getByConditions3(name);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>UserDaoImpl:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">extends</span> <span class="title">HibernateDaoSupport</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</div><div class="line"></div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User u)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">//1 获得hibernateTemplate</span></div><div class="line">		<span class="comment">//2 调用save</span></div><div class="line">		getHibernateTemplate().save(u);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(User u)</span> </span>&#123;</div><div class="line">		getHibernateTemplate().update(u);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">		<span class="comment">//先查询再删除</span></div><div class="line">		getHibernateTemplate().delete(getById(id));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">getById</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">		</div><div class="line">		<span class="comment">//return getHibernateTemplate().load(User.class, id);</span></div><div class="line">		</div><div class="line">		<span class="keyword">return</span> getHibernateTemplate().get(User.class, id);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="comment">//HQL</span></div><div class="line">	<span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getByConditions1</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="comment">/*</span></div><div class="line">	原生Session步骤</div><div class="line">		//书写HQL</div><div class="line">		//创建查询对象</div><div class="line">		//设置参数</div><div class="line">		//执行查询</div><div class="line">		 * */</div><div class="line">		<span class="comment">//书写HQL</span></div><div class="line">		String hql = <span class="string">"from User where user_name like ? "</span>;</div><div class="line">		<span class="comment">//查询并返回</span></div><div class="line">		<span class="keyword">return</span> (List&lt;User&gt;) getHibernateTemplate().find(hql, <span class="string">"%"</span>+name+<span class="string">"%"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="comment">//Criteria</span></div><div class="line">	<span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getByConditions2</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="comment">/*</span></div><div class="line">		原生Session步骤</div><div class="line">			//创建离线Criteria对象</div><div class="line">			//设置表单参数</div><div class="line">			//分页参数(两行)</div><div class="line">			//关联session</div><div class="line">			//执行查询</div><div class="line">			 * */</div><div class="line">		</div><div class="line">		<span class="comment">//创建离线查询对象</span></div><div class="line">		DetachedCriteria dc =  DetachedCriteria.forClass(User.class);</div><div class="line">		<span class="comment">//设置参数</span></div><div class="line">		dc.add(Restrictions.like(<span class="string">"user_name"</span>, <span class="string">"%"</span>+name+<span class="string">"%"</span>));</div><div class="line">		<span class="comment">//执行查询(带有分页)</span></div><div class="line">		<span class="comment">//参数2:起始索引</span></div><div class="line">		<span class="comment">//参数3:抓取数量</span></div><div class="line">		<span class="keyword">return</span> (List&lt;User&gt;) getHibernateTemplate().findByCriteria(dc,<span class="number">0</span>,<span class="number">2</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="comment">//SQL</span></div><div class="line">	<span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getByConditions3</span><span class="params">(<span class="keyword">final</span> String name)</span> </span>&#123;</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> getHibernateTemplate().execute(<span class="keyword">new</span> HibernateCallback&lt;List&lt;User&gt;&gt;() &#123;</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="comment">//取出原生session</span></div><div class="line">			<span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">doInHibernate</span><span class="params">(Session session)</span> <span class="keyword">throws</span> HibernateException </span>&#123;</div><div class="line">				<span class="comment">//书写SQL</span></div><div class="line">				String sql = <span class="string">"select * from sys_user where user_name like ? "</span>;</div><div class="line">				<span class="comment">//创建Sql查询对象</span></div><div class="line">				SQLQuery query = session.createSQLQuery(sql);</div><div class="line">				<span class="comment">//设置参数</span></div><div class="line">				query.setParameter(<span class="number">0</span>, <span class="string">"%"</span>+name+<span class="string">"%"</span>);</div><div class="line">				<span class="comment">//指定将结果封装到User对象</span></div><div class="line">				query.addEntity(User.class);</div><div class="line">				<span class="comment">//执行查询</span></div><div class="line">				<span class="keyword">return</span> query.list();</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:applicationContext.xml"</span>)</div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="comment">//测试Hibernate模板(Service)</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HTTest</span> </span>&#123;</div><div class="line">	<span class="meta">@Resource</span>(name=<span class="string">"userService"</span>)</div><div class="line">	<span class="keyword">private</span> UserService us;</div><div class="line">	</div><div class="line">	<span class="comment">//save</span></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span></span>&#123;</div><div class="line">		User u = <span class="keyword">new</span> User();</div><div class="line">		u.setUser_name(<span class="string">"hibernate测试6"</span>);</div><div class="line">		us.save(u);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//get</span></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun2</span><span class="params">()</span></span>&#123;</div><div class="line">		User u = us.getById(<span class="number">1l</span>);</div><div class="line">		</div><div class="line">		System.out.println(u);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//update</span></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun3</span><span class="params">()</span></span>&#123;</div><div class="line">		User u = <span class="keyword">new</span> User();</div><div class="line">		u.setUser_id(<span class="number">9l</span>);</div><div class="line">		u.setUser_name(<span class="string">"hibernate测试修改"</span>);</div><div class="line">		</div><div class="line">		us.update(u);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//delete</span></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun4</span><span class="params">()</span></span>&#123;</div><div class="line">			</div><div class="line">		us.delete(<span class="number">9l</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//HQL</span></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun5</span><span class="params">()</span></span>&#123;</div><div class="line">						</div><div class="line">		System.out.println(us.getByConditions1(<span class="string">"测试"</span>));</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//Criteria</span></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun6</span><span class="params">()</span></span>&#123;</div><div class="line">						</div><div class="line">		System.out.println(us.getByConditions2(<span class="string">"测试"</span>));</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//SQL</span></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun7</span><span class="params">()</span></span>&#123;</div><div class="line">						</div><div class="line">		System.out.println(us.getByConditions3(<span class="string">"测试"</span>));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="注册页面"><a href="#注册页面" class="headerlink" title="注册页面"></a>注册页面</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></div><div class="line">    <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"$&#123;pageContext.request.contextPath&#125;/UserAction_regist"</span> <span class="attr">method</span>=<span class="string">"post"</span> &gt;</span></div><div class="line">		用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>  <span class="attr">name</span>=<span class="string">"user_code"</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">		昵称:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>  <span class="attr">name</span>=<span class="string">"user_name"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">		密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"user_password"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;整合原理图&quot;&gt;&lt;a href=&quot;#整合原理图&quot; class=&quot;headerlink&quot; title=&quot;整合原理图&quot;&gt;&lt;/a&gt;整合原理图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://oj3s07yy0.bkt.clouddn.com/blog/20170526/095903112.png&quot; alt=&quot;mark&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="SSH" scheme="https://geekhoon.github.io/categories/SSH/"/>
    
    
      <category term="SSH" scheme="https://geekhoon.github.io/tags/SSH/"/>
    
      <category term="hibernate" scheme="https://geekhoon.github.io/tags/hibernate/"/>
    
      <category term="struts2" scheme="https://geekhoon.github.io/tags/struts2/"/>
    
      <category term="spring" scheme="https://geekhoon.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>spring</title>
    <link href="https://geekhoon.github.io/2017/05/20/spring/"/>
    <id>https://geekhoon.github.io/2017/05/20/spring/</id>
    <published>2017-05-20T09:25:31.000Z</published>
    <updated>2017-05-21T12:47:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>Spring是一个JavaSE/EE的一栈式(full-stack)轻量级开源框架.<br>   一栈式是指:Spring框架在JavaEE每层都有解决方案<br>    Web: SpringMVC;<br>    Service: Spring管理Bean,Spring管理事务;<br>    Dao:Spring的JDBC模版,Spring的ORM模块;<br><a id="more"></a></p>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>Spring的核心功能就是对象的”容器”,用来管理项目中的所有对象(横跨三层).<br>说Spring能够处理请求,是因为Spring管理了可以处理请求的对象<br>说Spring能够操作数据库,是因为Spring管理了可以操作数据库的对象.<br>特点:<br>方便解耦,简化开发;<br>支持AOP编程;<br>支持声明式事务管理;<br>支持Junit测试;<br>方便集成各种优秀框架;<br>简化API应用难度;</p>
<h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><h4 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h4><p>Inverse Of Control反转控制,是指在Spring中,对象的创建方式被反转了:<br>不使用Spring时,对象由开发人员手动创建并获得;<br>使用Spring时,对象由Spring(程序)帮我们创建并获得</p>
<h4 id="DI"><a href="#DI" class="headerlink" title="DI"></a>DI</h4><p>Dependency Injection依赖注入,是指将属性值注入对象的技术.<br>不使用Spring时,依赖注入由开发人员手动完成;<br>使用Spring时,依赖注入由Spring(程序)帮我们完成.<br>Spring支持的注入技术:<br>1.构造方法注入 –&gt; 调用构造方法完成注入<br>2.set方法注入 –&gt; 调用set方法完成注入<br><em>注意</em>: 实现反转控制需要依赖注入技术的支持.</p>
<h4 id="BeanFactory-amp-ApplicationContext"><a href="#BeanFactory-amp-ApplicationContext" class="headerlink" title="BeanFactory&amp;ApplicationContext"></a>BeanFactory&amp;ApplicationContext</h4><p>BeanFactory(旧),在需要获得对象时才创建对象,现在一般不用<br>ApplicationContext(新),在容器创建时,默认创建所有对象,获得时直接取出.</p>
<h2 id="框架搭建"><a href="#框架搭建" class="headerlink" title="框架搭建"></a>框架搭建</h2><h3 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h3><p>spring核心容器包(4个)+apache提供的日志包(2个)</p>
<h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> Integer age;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"User [name="</span> + name + <span class="string">", age="</span> + age + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>在src下创建applicationContext.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="comment">&lt;!-- 导入约束 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></div><div class="line">	   <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> </div><div class="line">	   <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></div><div class="line">                           http://www.springframework.org/schema/beans/spring-beans-4.2.xsd "&gt;</div><div class="line">	<span class="comment">&lt;!-- 将user对象交给spring容器管理 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.geekhoon.domain.User"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"tom"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"15"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="comment">//1.创建spring容器对象</span></div><div class="line">		ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</div><div class="line">		<span class="comment">//2.从容器中获得指定对象</span></div><div class="line">		User u = (User) ac.getBean(<span class="string">"user"</span>);</div><div class="line">		</div><div class="line">		System.out.println(u);<span class="comment">//User [name=tom, age=15]</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Spring配置详解之XML"><a href="#Spring配置详解之XML" class="headerlink" title="Spring配置详解之XML"></a>Spring配置详解之XML</h2><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span>  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></div><div class="line">		<span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> </div><div class="line">		<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></div><div class="line">							http://www.springframework.org/schema/beans/spring-beans-4.2.xsd "&gt;</div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 将user对象交给spring容器管理 --&gt;</span></div><div class="line">	<span class="comment">&lt;!-- Bean元素: 将对象交给容器管理</span></div><div class="line">		 	class属性: 填写交给容器管理的对象的完整类名.</div><div class="line">		 	name属性: 给对象在容器中指定一个唯一标识符.	  支持特殊字符</div><div class="line">		 	id属性: 与name属性功能一模一样.出现时间较早.  不支持特殊字符</div><div class="line">		 	init-method|destory-method属性: 对应对象的初始化|销毁方法,属性值即方法需要在User类中定义</div><div class="line">		 	scope属性: 对象在容器中的作用范围</div><div class="line">		 		*singleton:(默认值)单例.对象的实例在容器中只有一个.单例对象在容器启动时创建.</div><div class="line">		 		*prototype:原型多例.每次获得时都会创建对象.</div><div class="line">(注意: Action对象要配置成多例的,Action的生命周期是一次请求,获得参数由成员变量接收,说明Action是线程安全的,每个请求分配一个Action对象)</div><div class="line"></div><div class="line">		 		request: 在web环境中,对象只在一次请求中有效.</div><div class="line">		 		session: 在web环境中,对象只在一次会话中有效.</div><div class="line">	 --&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.geekhoon.domain.User"</span> </span></div><div class="line">					  <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"destory"</span> &gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"tom"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 引入其他配置文件 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"cn/itcast/c_injection/injection2.xml"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="spring对象的创建方式"><a href="#spring对象的创建方式" class="headerlink" title="spring对象的创建方式"></a>spring对象的创建方式</h3><h4 id="构造方法-重点"><a href="#构造方法-重点" class="headerlink" title="构造方法(重点)"></a>构造方法(重点)</h4><p>User类中要有构造方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</div><div class="line">	System.out.println(<span class="string">"user对象被创建了!"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>配置文件:<br>注意:现在配置文件中有4个对象,只要加载了配置文件,4个对象都会被创建,比如说利用静态工厂获得user2时,也会打印user的构造方法.因为创建方式1创建的对象也会被创建<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span>  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></div><div class="line">		<span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> </div><div class="line">		<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></div><div class="line">							http://www.springframework.org/schema/beans/spring-beans-4.2.xsd "&gt;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 创建方式1: 调用构造方法创建对象,下面这种形式是调用无参构造 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.geekhoon.domain.User"</span> &gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 创建方式2: 调用静态工厂方法创建对象 </span></div><div class="line">			调用com.geekhoon.create.UserFactory类的静态getUser1方法 获得 user对象</div><div class="line">	--&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user2"</span> <span class="attr">class</span>=<span class="string">"com.geekhoon.create.UserFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getUser1"</span> &gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 创建方式3: 调用动态工厂方法创建对象,需要先创建userFactory对象   --&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 创建userFactory对象 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userFactory"</span> <span class="attr">class</span>=<span class="string">"com.geekhoon.create.UserFactory"</span>  &gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 调用userFactory对象的getUser2方法创建user对象  --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user3"</span> <span class="attr">factory-bean</span>=<span class="string">"userFactory"</span>  <span class="attr">factory-method</span>=<span class="string">"getUser2"</span> &gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>测试类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span></span>&#123;</div><div class="line">		</div><div class="line">		<span class="comment">//1 创建spring容器对象</span></div><div class="line">		<span class="comment">//ClassPathXmlApplicationContext()方法参数为配置文件路径,是相对应src/的路径</span></div><div class="line">		ClassPathXmlApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"com/geekhoon/create/create.xml"</span>);</div><div class="line">		<span class="comment">//2 从容器中获得指定对象</span></div><div class="line">		User u = (User) ac.getBean(<span class="string">"user"</span>);</div><div class="line">		</div><div class="line">		System.out.println(u);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="静态工厂"><a href="#静态工厂" class="headerlink" title="静态工厂"></a>静态工厂</h4><p>工厂类:(含静态方法,获得User对象)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserFactory</span> </span>&#123;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">//静态工厂方法</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> User <span class="title">getUser1</span><span class="params">()</span></span>&#123;</div><div class="line">		</div><div class="line">		System.out.println(<span class="string">"调用静态工厂方法!"</span>);</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> User();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>配置文件见上.<br>测试类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun2</span><span class="params">()</span></span>&#123;</div><div class="line">		</div><div class="line">		<span class="comment">//1 创建spring容器对象</span></div><div class="line">		ClassPathXmlApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"com/geekhoon/create/create.xml"</span>);</div><div class="line">		<span class="comment">//2 从容器中获得指定对象</span></div><div class="line">		User u = (User) ac.getBean(<span class="string">"user2"</span>);</div><div class="line">		</div><div class="line">		System.out.println(u);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="动态工厂"><a href="#动态工厂" class="headerlink" title="动态工厂"></a>动态工厂</h4><p>工厂类:(含非静态方法,获得User对象)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserFactory</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="comment">//动态工厂方法</span></div><div class="line">	<span class="function"><span class="keyword">public</span>  User <span class="title">getUser2</span><span class="params">()</span></span>&#123;</div><div class="line">			</div><div class="line">			System.out.println(<span class="string">"调用动态工厂方法!"</span>);</div><div class="line">			</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> User();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>配置文件见上.<br>测试类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun3</span><span class="params">()</span></span>&#123;</div><div class="line">		</div><div class="line">		<span class="comment">//1 创建spring容器对象</span></div><div class="line">		ClassPathXmlApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"com/geekhoon/create/create.xml"</span>);</div><div class="line">		<span class="comment">//2 从容器中获得指定对象</span></div><div class="line">		User u = (User) ac.getBean(<span class="string">"user3"</span>);</div><div class="line">		</div><div class="line">		System.out.println(u);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="spring中的依赖注入配置"><a href="#spring中的依赖注入配置" class="headerlink" title="spring中的依赖注入配置"></a>spring中的依赖注入配置</h3><h4 id="简单类型注入"><a href="#简单类型注入" class="headerlink" title="简单类型注入"></a>简单类型注入</h4><h5 id="构造方法注入-重点"><a href="#构造方法注入-重点" class="headerlink" title="构造方法注入(重点)"></a>构造方法注入(重点)</h5><p>为User类添加有参构造:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Integer age;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Car car;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"user对象被创建了!"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"public User(String name)!"</span>);</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, Integer age)</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"public User(String name, Integer age)"</span>);</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">( Integer age,String name)</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"public User( Integer age,String name)"</span>);</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">( Long age,String name)</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"public User( Long age,String name)"</span>);</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">		<span class="keyword">this</span>.age = age.intValue();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, Integer age, Car car)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">		<span class="keyword">this</span>.car = car;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> car;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCar</span><span class="params">(Car car)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.car = car;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Car类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> String  color;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> color;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(String color)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.color = color;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Car [name="</span> + name + <span class="string">", color="</span> + color + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>配置文件:(配置相关属性,指定调用哪一个构造方法)<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span>  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></div><div class="line">		<span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> </div><div class="line">		<span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span>             </div><div class="line">		<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></div><div class="line">							http://www.springframework.org/schema/beans/spring-beans-4.2.xsd "&gt;</div><div class="line">		</div><div class="line">		<span class="comment">&lt;!-- 构造方法注入 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user1"</span> <span class="attr">class</span>=<span class="string">"com.geekhoon.domain.User"</span> &gt;</span></div><div class="line">			<span class="comment">&lt;!-- 构造参数配置 </span></div><div class="line">				定位属性:</div><div class="line">					name属性:构造器参数属性名</div><div class="line">					index属性:参数在参数列表中的索引</div><div class="line">					type属性:指定参数的类型(全类名)</div><div class="line">				赋值属性:</div><div class="line">					value属性:需要为输入注入的值</div><div class="line">					ref属性:对象类型输入注入</div><div class="line">			--&gt;</div><div class="line">			<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"16"</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">type</span>=<span class="string">"java.lang.Integer"</span> &gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"jerry"</span> &gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user2"</span> <span class="attr">class</span>=<span class="string">"com.geekhoon.domain.User"</span> &gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"20"</span>  &gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"jack"</span> &gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"car"</span> <span class="attr">ref</span>=<span class="string">"car"</span> &gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"car"</span> <span class="attr">class</span>=<span class="string">"com.geekhoon.domain.Car"</span> &gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"color"</span> <span class="attr">value</span>=<span class="string">"黑色"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"奥迪"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>测试类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span></span>&#123;</div><div class="line">		</div><div class="line">		<span class="comment">//1 创建spring容器对象</span></div><div class="line">		ClassPathXmlApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"com/geekhoon/injection/injection.xml"</span>);</div><div class="line">		<span class="comment">//2 从容器中获得指定对象</span></div><div class="line">		User u = (User) ac.getBean(<span class="string">"user1"</span>);</div><div class="line">		</div><div class="line">		System.out.println(u);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun2</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="comment">//1 创建spring容器对象</span></div><div class="line">		ClassPathXmlApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"com/geekhoon/injection/injection.xml"</span>);</div><div class="line">		<span class="comment">//2 从容器中获得指定对象</span></div><div class="line">		User u = (User) ac.getBean(<span class="string">"user2"</span>);</div><div class="line">		System.out.println(u);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="set方法注入"><a href="#set方法注入" class="headerlink" title="set方法注入"></a>set方法注入</h5><p>两种方式:<br><em>property标签(重点)</em>:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 演示set方法注入 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- property标签set方法注入 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user3"</span> <span class="attr">class</span>=<span class="string">"com.geekhoon.domain.User"</span>  &gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"rose"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"22"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"car"</span> <span class="attr">ref</span>=<span class="string">"car"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><em>p名称空间</em>:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- p名称空间set方法注入</span></div><div class="line">注:出现比property标签要晚.写法比property标签简单.性质相同.</div><div class="line">准备工作:导入p名称空间,约束里面加xmlns:p="http://www.springframework.org/schema/p"  </div><div class="line"> --&gt;</div><div class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user4"</span> <span class="attr">class</span>=<span class="string">"com.geekhoon.domain.User"</span> </span></div><div class="line"> 			<span class="attr">p:name</span>=<span class="string">"韩梅梅"</span> <span class="attr">p:age</span>=<span class="string">"12"</span> <span class="attr">p:car-ref</span>=<span class="string">"car"</span> &gt;<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>测试类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun3</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="comment">//1 创建spring容器对象</span></div><div class="line">	ClassPathXmlApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"com/geekhoon/injection/injection.xml"</span>);</div><div class="line">	<span class="comment">//2 从容器中获得指定对象</span></div><div class="line">	User u = (User) ac.getBean(<span class="string">"user3"</span>);</div><div class="line">	System.out.println(u);</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun4</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="comment">//1 创建spring容器对象</span></div><div class="line">	ClassPathXmlApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"com/geekhoon/injection/injection.xml"</span>);</div><div class="line">	<span class="comment">//2 从容器中获得指定对象</span></div><div class="line">	User u = (User) ac.getBean(<span class="string">"user4"</span>);</div><div class="line">	System.out.println(u);</div><div class="line">		</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="复杂类型注入-重点"><a href="#复杂类型注入-重点" class="headerlink" title="复杂类型注入(重点)"></a>复杂类型注入(重点)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//复杂类型注入</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionBean</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Object[] arr;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> List list;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Map map;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Properties props;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> Object[] getArr() &#123;</div><div class="line">		<span class="keyword">return</span> arr;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setArr</span><span class="params">(Object[] arr)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.arr = arr;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> List <span class="title">getList</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> list;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List list)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.list = list;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Map <span class="title">getMap</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> map;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMap</span><span class="params">(Map map)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.map = map;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Properties <span class="title">getProps</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> props;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProps</span><span class="params">(Properties props)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.props = props;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"CollectionBean [arr="</span> + Arrays.toString(arr) + <span class="string">", list="</span> + list + <span class="string">", map="</span> + map + <span class="string">", props="</span> + props</div><div class="line">				+ <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 复杂类型注入 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"cb"</span> <span class="attr">class</span>=<span class="string">"com.geekhoon.domain.CollectionBean"</span> &gt;</span></div><div class="line">	<span class="comment">&lt;!-- 数组值注入</span></div><div class="line">		 情况1: 只需要为数组注入一个值,可以将数组当作简单类型使用</div><div class="line">		&lt;property name="arr" value="tom" &gt;&lt;/property&gt;</div><div class="line">	 --&gt;</div><div class="line">	 <span class="comment">&lt;!-- 情况2:需要为数组注入多个值 --&gt;</span></div><div class="line">	 <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"arr"</span>&gt;</span></div><div class="line">	 	<span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line">	 		<span class="tag">&lt;<span class="name">value</span>&gt;</span>tom<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	 		<span class="tag">&lt;<span class="name">value</span>&gt;</span>jerry<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	 		<span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"car"</span> /&gt;</span></div><div class="line">	 	<span class="tag">&lt;/<span class="name">array</span>&gt;</span></div><div class="line">	 <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"car"</span> <span class="attr">class</span>=<span class="string">"com.geekhoon.domain.Car"</span> &gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"color"</span> <span class="attr">value</span>=<span class="string">"黑色"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"奥迪"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="List"><a href="#List" class="headerlink" title="List"></a>List</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"cb"</span> <span class="attr">class</span>=<span class="string">"com.geekhoon.domain.CollectionBean"</span> &gt;</span></div><div class="line">	<span class="comment">&lt;!-- List 注入</span></div><div class="line">		情况1: 只需要为List注入一个值,可以将List当作简单类型使用 </div><div class="line">	&lt;property name="list" value="jerry" &gt;&lt;/property&gt;</div><div class="line">	--&gt;</div><div class="line">	<span class="comment">&lt;!-- 情况2:需要为List注入多个值 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">value</span>&gt;</span>jack<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		 		<span class="tag">&lt;<span class="name">value</span>&gt;</span>rose<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		 		<span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"car"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"car"</span> <span class="attr">class</span>=<span class="string">"com.geekhoon.domain.Car"</span> &gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"color"</span> <span class="attr">value</span>=<span class="string">"黑色"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"奥迪"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Map类型注入</span></div><div class="line">			entry表示一个键值对</div><div class="line">				key:键,值类型</div><div class="line">				key-ref:键,对象类型</div><div class="line">				value:值,值类型值</div><div class="line">				value-ref:值,对象类型值</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"cb"</span> <span class="attr">class</span>=<span class="string">"com.geekhoon.domain.CollectionBean"</span> &gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"map"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">map</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"韩梅梅"</span> &gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key-ref</span>=<span class="string">"car"</span> <span class="attr">value</span>=<span class="string">"呵呵"</span> &gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"嘿嘿"</span> <span class="attr">value-ref</span>=<span class="string">"car"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">map</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"car"</span> <span class="attr">class</span>=<span class="string">"com.geekhoon.domain.Car"</span> &gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"color"</span> <span class="attr">value</span>=<span class="string">"黑色"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"奥迪"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- properties类型注入 </span></div><div class="line">			key属性:键,必须值类型</div><div class="line">			prop标签体:值,必须值类型</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"props"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">props</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"jdbc.name"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"jdbc.password"</span>&gt;</span>1234<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">props</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span></span>&#123;</div><div class="line">		</div><div class="line">		<span class="comment">//1 创建spring容器对象</span></div><div class="line">		ClassPathXmlApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</div><div class="line">		<span class="comment">//2 从容器中获得指定对象</span></div><div class="line">		CollectionBean cb = (CollectionBean) ac.getBean(<span class="string">"cb"</span>);</div><div class="line">		</div><div class="line">		System.out.println(cb);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="spel表达式"><a href="#spel表达式" class="headerlink" title="spel表达式"></a>spel表达式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 演示spel表达式</span></div><div class="line">			格式:#&#123;表达式&#125;</div><div class="line">			语法:对象名.属性名</div><div class="line">			eg: user3.name =&gt; 表示引用user3对象的name属性值</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user5"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.domain.User"</span>  &gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"#&#123;user3.name&#125;"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"#&#123;user4.age&#125;"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"car"</span> <span class="attr">ref</span>=<span class="string">"car"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"car"</span> <span class="attr">class</span>=<span class="string">"com.geekhoon.domain.Car"</span> &gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"color"</span> <span class="attr">value</span>=<span class="string">"黑色"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"奥迪"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>测试类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun5</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="comment">//1 创建spring容器对象</span></div><div class="line">	ClassPathXmlApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"cn/itcast/c_injection/injection.xml"</span>);</div><div class="line">	<span class="comment">//2 从容器中获得指定对象</span></div><div class="line">	User u = (User) ac.getBean(<span class="string">"user5"</span>);</div><div class="line">	System.out.println(u);</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="spring分模块开发"><a href="#spring分模块开发" class="headerlink" title="spring分模块开发"></a>spring分模块开发</h3><p>在主配置文件中引入其他配置文件,路径保留src之后的<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 引入其他配置文件 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"com/geekhoon/injection/injection.xml"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="Spring配置详解之注解"><a href="#Spring配置详解之注解" class="headerlink" title="Spring配置详解之注解"></a>Spring配置详解之注解</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>1.导入aop包<br>2.引入约束<br>3.开启注解配置”开关”<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></div><div class="line">	   <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> </div><div class="line">	   <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> </div><div class="line">	   <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></div><div class="line">	   					   http://www.springframework.org/schema/beans/spring-beans-4.2.xsd </div><div class="line">	   					   http://www.springframework.org/schema/context </div><div class="line">	   					   http://www.springframework.org/schema/context/spring-context-4.2.xsd "&gt;</div><div class="line">		</div><div class="line">		<span class="comment">&lt;!-- 开启使用注解"开关"</span></div><div class="line">				component-scan元素:组件扫描</div><div class="line">					base-package属性:指定扫描范围,以包为单位. 简单说就是指定从哪个包中的类寻找注解</div><div class="line">				注意:填入的包包含子包.</div><div class="line">					例如"cn.itcast",会包含所有子包</div><div class="line">				</div><div class="line">		 --&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.itcast"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="将对象配置到容器"><a href="#将对象配置到容器" class="headerlink" title="将对象配置到容器"></a>将对象配置到容器</h3><p>@Component<br>@Repository<br>@Service<br>@Controller<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//4个注解功能没有任何区别</span></div><div class="line"><span class="meta">@Component</span>(<span class="string">"user"</span>)<span class="comment">//&lt;bean name="user" class="com.geekhoon.domain.User" &gt;</span></div><div class="line"><span class="comment">//@Repository("user")//注册Dao层对象</span></div><div class="line"><span class="comment">//@Service("user")//注册Service层对象</span></div><div class="line"><span class="comment">//@Controller("user")//注册Web层对象</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">	...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="指定对象作用域"><a href="#指定对象作用域" class="headerlink" title="指定对象作用域"></a>指定对象作用域</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(<span class="string">"user"</span>)</div><div class="line"><span class="meta">@Scope</span>(<span class="string">"singleton"</span>)<span class="comment">//&lt;bean scope="" &gt;单例</span></div><div class="line"><span class="comment">//@Scope("prototype")多例</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">	...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="指定对象生命周期"><a href="#指定对象生命周期" class="headerlink" title="指定对象生命周期"></a>指定对象生命周期</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//&lt;bean init-method="" &gt;</span></div><div class="line"><span class="meta">@PostConstruct</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">	System.out.println(<span class="string">"这是User的初始化方法!"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//&lt;bean destory-method="" &gt;</span></div><div class="line"><span class="comment">//注意:prototype对象没有销毁方法.</span></div><div class="line"><span class="meta">@PreDestroy</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span></span>&#123;</div><div class="line">	System.out.println(<span class="string">"这是User的销毁方法!"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="注入值类型属性"><a href="#注入值类型属性" class="headerlink" title="注入值类型属性"></a>注入值类型属性</h3><p>@value可以加在成员变量上,也可以在set方法上加<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Value</span>(<span class="string">"tom"</span>)<span class="comment">//&lt;property name="name" value="tom" /&gt;</span></div><div class="line"><span class="keyword">private</span> String name;</div><div class="line"></div><div class="line"><span class="meta">@Value</span>(<span class="string">"18"</span>)<span class="comment">//&lt;property name="age" value="18" /&gt;</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</div><div class="line">	<span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="注入对象类型属性"><a href="#注入对象类型属性" class="headerlink" title="注入对象类型属性"></a>注入对象类型属性</h3><p>配置文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></div><div class="line">	   <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> </div><div class="line">	   <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> </div><div class="line">	   <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></div><div class="line">	   					   http://www.springframework.org/schema/beans/spring-beans-4.2.xsd </div><div class="line">	   					   http://www.springframework.org/schema/context </div><div class="line">	   					   http://www.springframework.org/schema/context/spring-context-4.2.xsd "&gt;</div><div class="line">		</div><div class="line">		<span class="comment">&lt;!-- 开启使用注解"开关"</span></div><div class="line">				component-scan元素:组件扫描</div><div class="line">					base-package属性:指定扫描范围,以包为单位. 简单说就是指定从哪个包中的类寻找注解</div><div class="line">				注意:填入的包包含子包.</div><div class="line">					例如"com.geekhoon",会包含所有子包</div><div class="line">				</div><div class="line">		&lt;context:component-scan base-package="com.geekhoon"&gt;&lt;/context:component-scan&gt;</div><div class="line">		</div><div class="line">		</div><div class="line">		&lt;bean name="car1" class="com.geekhoon.domain.Car" &gt;</div><div class="line">			&lt;property name="name" value="阿斯顿马丁" &gt;&lt;/property&gt;</div><div class="line">			&lt;property name="color" value="黑色" &gt;&lt;/property&gt;</div><div class="line">		&lt;/bean&gt;</div><div class="line">		</div><div class="line">		&lt;bean name="car2" class="com.geekhoon.domain.Car" &gt;</div><div class="line">			&lt;property name="name" value="布加迪威航" &gt;&lt;/property&gt;</div><div class="line">			&lt;property name="color" value="红色" &gt;&lt;/property&gt;</div><div class="line">		&lt;/bean&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(<span class="string">"user"</span>)</div><div class="line"><span class="meta">@Scope</span>(<span class="string">"singleton"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">	<span class="meta">@Value</span>(<span class="string">"tom"</span>)</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Integer age;</div><div class="line">	</div><div class="line">	<span class="comment">//@Autowired //自动装配属性,根据类型从容器(spring配置)中找</span></div><div class="line">	<span class="comment">//@Qualifier("car2")//辅助@Autowired完成注入,也就是@Autowired和@Qualifier("car2")都要写</span></div><div class="line">	<span class="meta">@Resource</span>(name=<span class="string">"car2"</span>)<span class="comment">//直接手动指定将car2注入,写这一个@Resource(name="car2")就可以了</span></div><div class="line">	<span class="keyword">private</span> Car car;</div><div class="line"></div><div class="line">	...</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Spring整合junit测试"><a href="#Spring整合junit测试" class="headerlink" title="Spring整合junit测试"></a>Spring整合junit测试</h2><h3 id="导包及类库"><a href="#导包及类库" class="headerlink" title="导包及类库"></a>导包及类库</h3><p>4+2<br>JUnit类库和spring-test<br>spring-aop</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>实体类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">		</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> Integer age;</div><div class="line">	<span class="keyword">private</span> Car car;</div><div class="line"></div><div class="line">	getter/setter..</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"User [name="</span> + name + <span class="string">", age="</span> + age + <span class="string">", car="</span> + car + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> String  color;</div><div class="line">	</div><div class="line">	getter/setter..</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Car [name="</span> + name + <span class="string">", color="</span> + color + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>配置文件:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></div><div class="line">	   <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> </div><div class="line">	   <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></div><div class="line">                           http://www.springframework.org/schema/beans/spring-beans-4.2.xsd "&gt;</div><div class="line">	<span class="comment">&lt;!-- 将user对象交给spring容器管理 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.geekhoon.domain.User"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"tom"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"15"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"car"</span> <span class="attr">ref</span>=<span class="string">"car"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"car"</span> <span class="attr">class</span>=<span class="string">"com.geekhoon.domain.Car"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"宝马520"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"color"</span> <span class="attr">value</span>=<span class="string">"白色"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>测试类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//指定容器配置文件位置,相对于src的路径</span></div><div class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:applicationContext.xml"</span>)</div><div class="line"><span class="comment">//使用SpringJUnit4ClassRunner创建spring容器</span></div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 原始JUnit测试</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="comment">//1 创建spring容器对象</span></div><div class="line">		ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</div><div class="line">		<span class="comment">//2 从容器中获得指定对象</span></div><div class="line">		User u = (User) ac.getBean(<span class="string">"user"</span>);</div><div class="line">		System.out.println(u);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * spring整合JUnit测试</div><div class="line">	 */</div><div class="line">	<span class="comment">//从容器中找到名为"user"的bean注入到属性中</span></div><div class="line">	<span class="meta">@Resource</span>(name=<span class="string">"user"</span>)</div><div class="line">	<span class="keyword">private</span> User u;</div><div class="line">	</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun2</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(u);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">打印结果:User [name=tom, age=<span class="number">15</span>, car=Car [name=宝马<span class="number">520</span>, color=白色]]</div></pre></td></tr></table></figure></p>
<h2 id="Spring中的aop开发理论"><a href="#Spring中的aop开发理论" class="headerlink" title="Spring中的aop开发理论"></a>Spring中的aop开发理论</h2><h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><p>面向切面编程.AOP出现是OOP(Object Oriented Programming,OOP,面向对象程序设计)的延伸,是OOP的扩展,解决OOP中的一些问题.<br>AOP的底层实现原理是代理机制,Spring希望可以对所有类使用代理技术进行代理,Spring实现AOP使用两种代理机制：JDK动态代理和CGlib代理</p>
<h3 id="代码准备"><a href="#代码准备" class="headerlink" title="代码准备"></a>代码准备</h3><p>利用UserService和UserServiceImpl来演示,被代理类是UserServiceImpl,因为实现了UserService接口,所以动态代理和CGLib都可以进行代理.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="comment">//增</span></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</div><div class="line">	<span class="comment">//删</span></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</div><div class="line">	<span class="comment">//改</span></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</div><div class="line">	<span class="comment">//查</span></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">find</span><span class="params">()</span></span>;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"增加用户!"</span>);</div><div class="line">		<span class="comment">//int i = 1/0;</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"删除用户!"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"修改用户!"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"查找用户!"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h3><p>特点: 只能对实现接口的类进行代理,如果没有实现接口,无法进行代理<br><img src="http://oj3s07yy0.bkt.clouddn.com/blog/20170521/173341516.png" alt="mark"><br>代理工厂类: 用于返回代理对象.可以选择实现InvocationHandler接口,或者在newProxyInstance方法的第三个参数利用匿名内部类实现该接口,重写invoke方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxyFactory</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="comment">//定义目标对象(UserServiceImpl对象),返回值写UserService(多态))</span></div><div class="line">	<span class="keyword">private</span> UserService target;</div><div class="line">	</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">//定义构造,在创建动态代理工厂的时候,指定目标对象</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">DynamicProxyFactory</span><span class="params">(UserService target)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.target = target;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//返回代理对象</span></div><div class="line">	<span class="function"><span class="keyword">public</span> UserService <span class="title">getProxy</span><span class="params">()</span></span>&#123;</div><div class="line">		</div><div class="line">		<span class="comment">//生成代理对象</span></div><div class="line">		<span class="comment">//参数1: 定义了由哪个ClassLoader对象来对生成的代理对象进行加载,类的加载器(总共三种类加载器,本处使用的是应用类加载器),</span></div><div class="line">		<span class="comment">//来加载生成的代理类,可以使用 其他类名.class.getClassLoader()来获得应用类加载器,即类名可以换其他的</span></div><div class="line">		<span class="comment">//参数2: 代理类需要实现的接口,类型是接口类型的数组,因为本例中仅实现了UserService一个接口</span></div><div class="line">		<span class="comment">//需要new一个数组,将该接口放进去.下面使用的是另外一种方法,通过目标对象UserServiceImpl来获</span></div><div class="line">		<span class="comment">//得所有接口,返回值就是接口类型的数组</span></div><div class="line">		<span class="comment">//参数3: 一个InvocationHandler对象，表示的是当我这个动态代理对象在调用方法的时候，会关联到哪一个InvocationHandler对象上</span></div><div class="line">		<span class="comment">//工厂类实现InvocationHandler,然后参数写this,或者匿名内部类实现InvocationHandler</span></div><div class="line">		</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> (UserService) Proxy.newProxyInstance(DynamicProxyFactory.class.getClassLoader(),</div><div class="line">										UserServiceImpl.class.getInterfaces(),</div><div class="line">										<span class="keyword">this</span>);</div><div class="line">		</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//当我们通过代理对象调用一个方法的时候，这个方法的调用就会被转发为由</span></div><div class="line">	<span class="comment">//InvocationHandler这个接口的 invoke 方法来进行调用</span></div><div class="line">	<span class="comment">//proxy:　 指代我们所代理的那个真实对象</span></div><div class="line">	<span class="comment">//method:　指代的是我们所要调用真实对象的某个方法的Method对象</span></div><div class="line">	<span class="comment">//args:　　指代的是调用真实对象某个方法时接受的参数</span></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">		</div><div class="line">		System.out.println(<span class="string">"开启事务!"</span>);</div><div class="line">		</div><div class="line">		<span class="comment">//调用原有业务方法,并接收返回值</span></div><div class="line">		Object invoke = method.invoke(target, args);</div><div class="line">		</div><div class="line">		System.out.println(<span class="string">"关闭事务!"</span>);</div><div class="line">		</div><div class="line"></div><div class="line"></div><div class="line">		<span class="comment">/*</span></div><div class="line"></div><div class="line">		 // 对save方法进行增强;</div><div class="line">            if ("save".equals(method.getName())) &#123;</div><div class="line">                System.out.println("开启事务!");</div><div class="line"></div><div class="line">                Object invoke = method.invoke(target, args);</div><div class="line">		</div><div class="line">		        System.out.println("关闭事务!");</div><div class="line">            &#125;</div><div class="line"></div><div class="line">		*/</div><div class="line"></div><div class="line">		<span class="comment">//返回原有业务方法返回值</span></div><div class="line">		<span class="keyword">return</span> invoke;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="CGlib代理类"><a href="#CGlib代理类" class="headerlink" title="CGlib代理类"></a>CGlib代理类</h3><p>CGlib既可以代理实现接口的类,也可以代理未实现接口的类.代理类和被代理类是继承关系<br><img src="http://oj3s07yy0.bkt.clouddn.com/blog/20170521/182346467.png" alt="mark"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CGLibProxyFactory</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> UserServiceImpl target;</div><div class="line">	</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">CGLibProxyFactory</span><span class="params">(UserServiceImpl target)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.target = target;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//返回代理对象(CGLib代理对象是被代理对象的子类,返回被代理对象类型)</span></div><div class="line">	<span class="function"><span class="keyword">public</span> UserServiceImpl <span class="title">getProxy</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="comment">//创建CGLIb代理生成工具类</span></div><div class="line">		Enhancer en = <span class="keyword">new</span> Enhancer();</div><div class="line">		</div><div class="line">		<span class="comment">//指定谁是被代理类</span></div><div class="line">		en.setSuperclass(UserServiceImpl.class);</div><div class="line">		</div><div class="line">		<span class="comment">//指定增强的代码是什么</span></div><div class="line">		en.setCallback(<span class="keyword">this</span>);</div><div class="line">		</div><div class="line">		<span class="comment">//创建代理对象,并返回</span></div><div class="line">		<span class="keyword">return</span>  (UserServiceImpl) en.create();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object proxy, Method method, Object[] args, MethodProxy method2)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">		System.out.println(<span class="string">"开启事务!"</span>);</div><div class="line">		</div><div class="line">		<span class="comment">//调用原有业务方法</span></div><div class="line">		Object invoke = method.invoke(target, args);</div><div class="line">		</div><div class="line">		System.out.println(<span class="string">"关闭事务!"</span>);</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> invoke;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="comment">//测试动态代理</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span></span>&#123;</div><div class="line">		</div><div class="line">		<span class="comment">//1 创建被代理对象</span></div><div class="line">		UserService target = <span class="keyword">new</span> UserServiceImpl();</div><div class="line">		<span class="comment">//2 创建代理工厂</span></div><div class="line">		DynamicProxyFactory dpf = <span class="keyword">new</span> DynamicProxyFactory(target);</div><div class="line">		<span class="comment">//3 调用getProxy后的代理对象</span></div><div class="line">		UserService usProxy = dpf.getProxy();</div><div class="line">		<span class="comment">//4 测试</span></div><div class="line">		usProxy.save();</div><div class="line">		</div><div class="line">		<span class="comment">//---------------------------------------------------------------</span></div><div class="line">		</div><div class="line">		System.out.println(usProxy <span class="keyword">instanceof</span> UserServiceImpl);<span class="comment">//false</span></div><div class="line">		<span class="comment">//打印false,证明了代理类和被代理类并不是继承关系,它们共同实现一个接口,它俩是兄弟关系,并不是同一个类型</span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="comment">//测试CGlib代理</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun2</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="comment">//1 创建被代理对象</span></div><div class="line">		UserServiceImpl target = <span class="keyword">new</span> UserServiceImpl();</div><div class="line">		<span class="comment">//2 创建代理工厂</span></div><div class="line">		CGLibProxyFactory factory = <span class="keyword">new</span> CGLibProxyFactory(target);</div><div class="line">		<span class="comment">//3 获得代理对象</span></div><div class="line">		UserServiceImpl proxy = factory.getProxy();</div><div class="line">		<span class="comment">//4 测试</span></div><div class="line">		proxy.save();</div><div class="line">		</div><div class="line">		System.out.println(proxy <span class="keyword">instanceof</span> UserServiceImpl);<span class="comment">//true</span></div><div class="line">		<span class="comment">//打印true,证明了代理类和被代理类确实是继承关系,类型一致</span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="AOP中的相关术语"><a href="#AOP中的相关术语" class="headerlink" title="AOP中的相关术语"></a>AOP中的相关术语</h2><h3 id="连接点-join-point"><a href="#连接点-join-point" class="headerlink" title="连接点(join point)"></a>连接点(join point)</h3><p>目标对象中,所有可以增强的方法.比如上例UserServiceImpl的增删改查方法都可以进行增强</p>
<h3 id="切入点-point-cut"><a href="#切入点-point-cut" class="headerlink" title="切入点(point cut)"></a>切入点(point cut)</h3><p>即将要增强或已经增强的方法,比如只增强save</p>
<h3 id="目标对象-target"><a href="#目标对象-target" class="headerlink" title="目标对象(target)"></a>目标对象(target)</h3><p>被代理对象.比如上例的UserServiceImpl</p>
<h3 id="通知-advice"><a href="#通知-advice" class="headerlink" title="通知(advice)"></a>通知(advice)</h3><p>要对目标对象的切点增强的代码,比如增加的事务管理的代码</p>
<h3 id="代理对象-proxy"><a href="#代理对象-proxy" class="headerlink" title="代理对象(proxy)"></a>代理对象(proxy)</h3><p>对目标对象的切点应用通知后生成的对象</p>
<h3 id="织入-weaving"><a href="#织入-weaving" class="headerlink" title="织入(weaving)"></a>织入(weaving)</h3><p>将通知应用到目标对象切点的过程</p>
<h3 id="切面-aspect-advisor"><a href="#切面-aspect-advisor" class="headerlink" title="切面(aspect|advisor)"></a>切面(aspect|advisor)</h3><p>通知和切点合在一起,称为切面</p>
<h2 id="Spring中的aop开发步骤-XML"><a href="#Spring中的aop开发步骤-XML" class="headerlink" title="Spring中的aop开发步骤(XML)"></a>Spring中的aop开发步骤(XML)</h2><h3 id="导包-1"><a href="#导包-1" class="headerlink" title="导包"></a>导包</h3><p>4+2<br>spring-aop spring-aspects<br>aop联盟包<br>aspectJ织入包<br>spring-test<br>junit4</p>
<h3 id="准备目标对象"><a href="#准备目标对象" class="headerlink" title="准备目标对象"></a>准备目标对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"增加用户!"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"删除用户!"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"修改用户!"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"查找用户!"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="准备通知"><a href="#准备通知" class="headerlink" title="准备通知"></a>准备通知</h3><p>1.前置通知: 在目标方法执行之前执行;<br>2.环绕通知: 在目标方法执行之前和之后执行,也可以阻止目标方法执行;<br>3.后置通知: 在目标方法执行之后执行,出现异常不执行;<br>4.后置通知: 在目标方法执行之后执行,出现异常仍执行;<br>5.异常通知: 出现异常时才执行</p>
<p>通知类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdvice</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="comment">//前置通知</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"我是前置通知!"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//环绕通知</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint pjp)</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"我是环绕通知前半部分!"</span>);</div><div class="line">		<span class="comment">//执行目标方法</span></div><div class="line">		Object proceed = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			proceed = pjp.proceed();</div><div class="line">			System.out.println(<span class="string">"我是环绕通知后半部分-出现异常就不执行!"</span>);</div><div class="line">		&#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">			System.out.println(<span class="string">"我是环绕通知出现异常执行的代码!"</span>);</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e.getMessage());</div><div class="line">		&#125;<span class="keyword">finally</span> &#123;</div><div class="line">			System.out.println(<span class="string">"我是环绕通知后半部分-出现异常仍然执行!"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> proceed;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//后置通知</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">afterReturning</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"我是后置通知-出现异常不执行!"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//后置通知</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">after</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"我是后置通知-出现异常仍执行!"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//异常通知</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">afterThrowing</span><span class="params">()</span></span>&#123;</div><div class="line">			System.out.println(<span class="string">"我是异常通知-出现异常才执行!"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>完整配置文件:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></div><div class="line">	   <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> </div><div class="line">	   <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> </div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></div><div class="line">                           http://www.springframework.org/schema/beans/spring-beans-4.2.xsd </div><div class="line">                           http://www.springframework.org/schema/aop </div><div class="line">                           http://www.springframework.org/schema/aop/spring-aop-4.2.xsd "&gt;</div><div class="line">		</div><div class="line">		<span class="comment">&lt;!-- 1.配置目标对象 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.geekhoon.service.UserServiceImpl"</span> &gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 2.配置通知对象 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"myAdvice"</span> <span class="attr">class</span>=<span class="string">"cn.geekhoon.aop.MyAdvice"</span> &gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 3.配置织入 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!-- 配置切点表达式 --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* com.geekhoon.service.*ServiceImpl.*(..))"</span> <span class="attr">id</span>=<span class="string">"mypc"</span>/&gt;</span></div><div class="line">			<span class="comment">&lt;!-- 配置切面 --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"myAdvice"</span> &gt;</span></div><div class="line">				<span class="comment">&lt;!-- 前置切面 --&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before"</span>  <span class="attr">pointcut-ref</span>=<span class="string">"mypc"</span> /&gt;</span></div><div class="line">				<span class="comment">&lt;!-- 环绕切面 --&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"around"</span>  <span class="attr">pointcut-ref</span>=<span class="string">"mypc"</span> /&gt;</span></div><div class="line">				<span class="comment">&lt;!-- 后置切面 --&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"afterReturning"</span>  <span class="attr">pointcut-ref</span>=<span class="string">"mypc"</span> /&gt;</span></div><div class="line">				<span class="comment">&lt;!-- 后置切面 --&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"after"</span>  <span class="attr">pointcut-ref</span>=<span class="string">"mypc"</span> /&gt;</span></div><div class="line">				<span class="comment">&lt;!-- 异常切面 --&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"afterThrowing"</span>  <span class="attr">pointcut-ref</span>=<span class="string">"mypc"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></div><div class="line">		</div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="配置织入"><a href="#配置织入" class="headerlink" title="配置织入"></a>配置织入</h3><h4 id="引入aop约束"><a href="#引入aop约束" class="headerlink" title="引入aop约束"></a>引入aop约束</h4><h4 id="配置目标对象"><a href="#配置目标对象" class="headerlink" title="配置目标对象"></a>配置目标对象</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 1.配置目标对象 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.geekhoon.service.UserServiceImpl"</span> &gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="配置通知对象"><a href="#配置通知对象" class="headerlink" title="配置通知对象"></a>配置通知对象</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 2.配置通知对象 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"myAdvice"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.c_spring_aop.MyAdvice"</span> &gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="配置织入-1"><a href="#配置织入-1" class="headerlink" title="配置织入"></a>配置织入</h4><p>切入点表达式:AspectJ中提供了切入点的表达式,用来指定哪些包下的哪些类需要被增强; 表达式基于execution函数完成的,execution(“切入点表达式”);<br>格式: [方法的访问修饰符] 方法的返回值 包名.类名,方法名(参数)<br>例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">* com.geekhoon.service..*ServiceImpl.*(..); --&gt; 第一个&quot;..&quot;指当前包及其子包; 第二个&quot;..&quot;指参数列表;</div></pre></td></tr></table></figure></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 指定切点 </span></div><div class="line">切点表达式:</div><div class="line">	public void cn.itcast.service.UserServiceImpl.save()</div><div class="line">	void cn.itcast.service.UserServiceImpl.save() 不限制方法权限</div><div class="line">	* cn.itcast.service.UserServiceImpl.save() 不限制方法返回值</div><div class="line">	* cn.itcast.service.*ServiceImpl.save() cn.itcast.service包下所有以ServiceImpl结尾的类</div><div class="line">	* cn.itcast.service.*ServiceImpl.*() 类中的所有方法名</div><div class="line">	* cn.itcast.service.*ServiceImpl.*(..)方法的参数任意</div><div class="line">	* cn.itcast.service..*ServiceImpl.*(..)包含cn.itcast.service包以及包下 的所有子孙包</div><div class="line">	--&gt;</div><div class="line"><span class="comment">&lt;!-- 3.配置织入 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 配置切点表达式 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* com.geekhoon.service..*ServiceImpl.*(..))"</span> <span class="attr">id</span>=<span class="string">"mypc"</span>/&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 配置切面 </span></div><div class="line">			ref属性:指定哪个对象是通知对象</div><div class="line">			实际开发中根据需求配置一个切面或多个,在此5个都配置</div><div class="line">	--&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"myAdvice"</span> &gt;</span></div><div class="line">		<span class="comment">&lt;!-- 前置切面 </span></div><div class="line">				method:指定通知类中哪个方法为通知方法</div><div class="line">				pointcut-ref:指定切点表达式</div><div class="line">		--&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before"</span>  <span class="attr">pointcut-ref</span>=<span class="string">"mypc"</span> /&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 环绕切面 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"around"</span>  <span class="attr">pointcut-ref</span>=<span class="string">"mypc"</span> /&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 后置切面 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"afterReturning"</span>  <span class="attr">pointcut-ref</span>=<span class="string">"mypc"</span> /&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 后置切面 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"after"</span>  <span class="attr">pointcut-ref</span>=<span class="string">"mypc"</span> /&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 异常切面 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"afterThrowing"</span>  <span class="attr">pointcut-ref</span>=<span class="string">"mypc"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="测试类-1"><a href="#测试类-1" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//路径是相对于src的目录</span></div><div class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:aop1.xml"</span>)</div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</div><div class="line">	<span class="meta">@Resource</span>(name=<span class="string">"userService"</span>)</div><div class="line">	<span class="keyword">private</span> UserService us;</div><div class="line">	</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span></span>&#123;</div><div class="line">		</div><div class="line">		us.save();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Spring中的aop开发步骤-注解"><a href="#Spring中的aop开发步骤-注解" class="headerlink" title="Spring中的aop开发步骤(注解)"></a>Spring中的aop开发步骤(注解)</h2><p>配置注解与配置xml绝大数步骤是一致的,仅列举配置织入:</p>
<h3 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></div><div class="line">	   <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> </div><div class="line">	   <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> </div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></div><div class="line">                           http://www.springframework.org/schema/beans/spring-beans-4.2.xsd </div><div class="line">                           http://www.springframework.org/schema/aop </div><div class="line">                           http://www.springframework.org/schema/aop/spring-aop-4.2.xsd "&gt;</div><div class="line">		</div><div class="line">		<span class="comment">&lt;!-- 1.配置目标对象 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.geekhoon.service.UserServiceImpl"</span> &gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 2.配置通知对象 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"myAdvice"</span> <span class="attr">class</span>=<span class="string">"cn.geekhoon.aop.MyAdvice"</span> &gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="comment">&lt;!-- 3.开启注解配置切面开关 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="在通知类中加入注解"><a href="#在通知类中加入注解" class="headerlink" title="在通知类中加入注解"></a>在通知类中加入注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//通知类</span></div><div class="line"><span class="comment">//指定该类为切面配置类</span></div><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdvice</span> </span>&#123;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">//声明切点</span></div><div class="line">	<span class="meta">@Pointcut</span>(<span class="string">"execution(* com.geekhoon.service..*ServiceImpl.*(..))"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mypc</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//前置通知</span></div><div class="line">	<span class="meta">@Before</span>(<span class="string">"MyAdvice.mypc()"</span>) <span class="comment">//前置切面(通知+切点)</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"我是前置通知!"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//环绕通知</span></div><div class="line">	<span class="meta">@Around</span>(<span class="string">"MyAdvice.mypc()"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint pjp)</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"我是环绕通知前半部分!"</span>);</div><div class="line">		<span class="comment">//执行目标方法</span></div><div class="line">		Object proceed = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			proceed = pjp.proceed();</div><div class="line">			System.out.println(<span class="string">"我是环绕通知后半部分-出现异常就不执行!"</span>);</div><div class="line">		&#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">			System.out.println(<span class="string">"我是环绕通知出现异常执行的代码!"</span>);</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e.getMessage());</div><div class="line">		&#125;<span class="keyword">finally</span> &#123;</div><div class="line">			System.out.println(<span class="string">"我是环绕通知后半部分-出现异常仍然执行!"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> proceed;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//后置通知</span></div><div class="line">	<span class="meta">@AfterReturning</span>(<span class="string">"MyAdvice.mypc()"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">afterReturning</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"我是后置通知-出现异常不执行!"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//后置通知</span></div><div class="line">	<span class="meta">@After</span>(<span class="string">"MyAdvice.mypc()"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">after</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"我是后置通知-出现异常仍执行!"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//异常通知</span></div><div class="line">	<span class="meta">@AfterThrowing</span>(<span class="string">"MyAdvice.mypc()"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">afterThrowing</span><span class="params">()</span></span>&#123;</div><div class="line">			System.out.println(<span class="string">"我是异常通知-出现异常才执行!"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;p&gt;Spring是一个JavaSE/EE的一栈式(full-stack)轻量级开源框架.&lt;br&gt;   一栈式是指:Spring框架在JavaEE每层都有解决方案&lt;br&gt;    Web: SpringMVC;&lt;br&gt;    Service: Spring管理Bean,Spring管理事务;&lt;br&gt;    Dao:Spring的JDBC模版,Spring的ORM模块;&lt;br&gt;
    
    </summary>
    
      <category term="SSH" scheme="https://geekhoon.github.io/categories/SSH/"/>
    
    
      <category term="SSH" scheme="https://geekhoon.github.io/tags/SSH/"/>
    
      <category term="hibernate" scheme="https://geekhoon.github.io/tags/hibernate/"/>
    
      <category term="struts2" scheme="https://geekhoon.github.io/tags/struts2/"/>
    
      <category term="spring" scheme="https://geekhoon.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>struts2</title>
    <link href="https://geekhoon.github.io/2017/05/14/struts2/"/>
    <id>https://geekhoon.github.io/2017/05/14/struts2/</id>
    <published>2017-05-14T07:19:06.000Z</published>
    <updated>2017-05-27T03:04:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Struts2是一个基于MVC设计模式的Web应用框架,本质相当于Servlet,接收与处理请求.Struts2将web层的很多常见操作进行了封装,可以提高开发效率.<br>作用:作为控制器来建立模型与视图之间的数据交互<br><a id="more"></a></p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="创建动态web项目"><a href="#创建动态web项目" class="headerlink" title="创建动态web项目"></a>创建动态web项目</h3><h3 id="导jar包"><a href="#导jar包" class="headerlink" title="导jar包"></a>导jar包</h3><p>最基础的13个jar包,位于apps/struts2-blank/WEB-INF/lib</p>
<h3 id="创建Action类"><a href="#创建Action类" class="headerlink" title="创建Action类"></a>创建Action类</h3><p>用于接收处理请求<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</div><div class="line">		</div><div class="line">	System.out.println(<span class="string">"Hello World !"</span>);</div><div class="line">	</div><div class="line">	<span class="keyword">return</span> <span class="string">"success"</span>;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>在src下引入struts.xml,配置Action<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></div><div class="line">	"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</div><div class="line">	"http://struts.apache.org/dtds/struts-2.3.dtd"&gt;</div><div class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"hello"</span> <span class="attr">namespace</span>=<span class="string">"/a"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"HelloAction"</span> <span class="attr">class</span>=<span class="string">"com.geekhoon.action01.HelloAction"</span> <span class="attr">method</span>=<span class="string">"hello"</span> &gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span> <span class="attr">type</span>=<span class="string">"dispatcher"</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">package</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="配置Struts2的入口过滤器"><a href="#配置Struts2的入口过滤器" class="headerlink" title="配置Struts2的入口过滤器"></a>配置Struts2的入口过滤器</h3><p>修改web.xml,配置Struts2的入口过滤器,<filter-name>内容体上下一致即可.<filter-class>内容是固定的<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure></filter-class></filter-name></p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>访问路径为:<a href="http://localhost:8080/struts2/a/HelloAction,会跳转到index.jsp,显示&quot;你好&quot;,并在控制台打印&quot;Hello" target="_blank" rel="external">http://localhost:8080/struts2/a/HelloAction,会跳转到index.jsp,显示&quot;你好&quot;,并在控制台打印&quot;Hello</a> World !”</p>
<h2 id="Struts2架构及执行流程"><a href="#Struts2架构及执行流程" class="headerlink" title="Struts2架构及执行流程"></a>Struts2架构及执行流程</h2><p><img src="http://oj3s07yy0.bkt.clouddn.com/blog/20170514/203001647.PNG" alt="mark"><br>1.tomcat启动,加载应用的web.xml;<br>2.实例化并初始化过滤器(核心控制器);<br>3.加载struts.xml配置文件;<br>4.客户端发送请求(/a/helloAction);<br>5.过滤器FilterDispatcher拦截请求,通过ActionMapper判断请求是否交给action处理:<br>   如果是,那么判断请求的action是否存在,如果不存在,报404错误.<br>   如果否,那么将请求转发给对应的web组件;<br>6.过滤器创建ActionProxy对象,ActionProxy通过ConfigurationManager对象读取当前访问action的相关配置;<br>7.ActionProxy根据获得的action的配置信息,创建ActionInvocation对象;<br>8.执行Action前的拦截器;<br>9.执行action,返回结果.ActionInvocation根据action执行后的结果,查找逻辑视图,进行转发/重定向;<br>10.执行Action后的拦截器;<br>11.响应给浏览器;</p>
<h3 id="面向切面编程AOP"><a href="#面向切面编程AOP" class="headerlink" title="面向切面编程AOP"></a>面向切面编程AOP</h3><p>纵向重复,横向抽取!<br>过滤器体现aop:<br><img src="http://oj3s07yy0.bkt.clouddn.com/blog/20170514/205332796.png" alt="mark"><br>拦截器体现aop:<br><img src="http://oj3s07yy0.bkt.clouddn.com/blog/20170514/205359724.png" alt="mark"></p>
<h2 id="Struts2配置"><a href="#Struts2配置" class="headerlink" title="Struts2配置"></a>Struts2配置</h2><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- package元素:包配置,用于封装Action配置 </span></div><div class="line">		name属性:包名(必须),注意要唯一</div><div class="line">		namespace属性:命名空间,与action的name属性值共同决定Action的访问路径</div><div class="line">			 /hello  =&gt;  /项目名/hello/Action名称</div><div class="line">			 /a/b	 =&gt;  /项目名/a/b/Action名称</div><div class="line">			 /		 =&gt;	 /项目名/Action名称</div><div class="line">			 默认值	 =&gt;  相当于写"/".但相比"/"优先更高</div><div class="line">		extends属性:指定继承某个包.可以将包中的配置继承过来</div><div class="line">			struts-default:由struts2为我们准备的基础继承包.</div><div class="line">		abstract属性:声明该包为抽象包.专门用于被继承(struts-default就是抽象包,abstract="true")</div><div class="line">		struts-default.xml打开方式:</div><div class="line">		/Java Resources/Libraries/Web App Libraries/struts2-core-2.3.23.jar/struts-default.xml</div><div class="line">	--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"hello"</span> <span class="attr">namespace</span>=<span class="string">"/a"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- action元素:动作请求配置</span></div><div class="line">			name属性:与package的namespace属性值共同决定Action的访问路径;</div><div class="line">			class属性:Action的完整类名</div><div class="line">			method属性:调用的方法名</div><div class="line">			</div><div class="line">			访问HelloAction会调用com.geekhoon.action01.HelloAction类的hello方法.</div><div class="line">			action下可以有多个result标签</div><div class="line">	 --&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"HelloAction"</span> <span class="attr">class</span>=<span class="string">"com.geekhoon.action01.HelloAction"</span> <span class="attr">method</span>=<span class="string">"hello"</span> &gt;</span></div><div class="line">			<span class="comment">&lt;!-- result元素:结果视图</span></div><div class="line">					name属性: 与action方法的返回值一样</div><div class="line">					type属性:指定由哪个结果处理器类来处理</div><div class="line">						常见类型:</div><div class="line">					dispatcher(jsp转发)</div><div class="line">					chain(Action转发)</div><div class="line">					redirect(jsp重定向)</div><div class="line">					redirectAction(Action重定向)</div><div class="line">					</div><div class="line">					标签体:填写需要跳转到的页面路径.相对于项目的路径</div><div class="line">			 --&gt;</div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span> <span class="attr">type</span>=<span class="string">"dispatcher"</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="常量配置-键值对"><a href="#常量配置-键值对" class="headerlink" title="常量配置(键值对)"></a>常量配置(键值对)</h3><h4 id="默认常量配置位置"><a href="#默认常量配置位置" class="headerlink" title="默认常量配置位置"></a>默认常量配置位置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-Web App Libraries</div><div class="line">       -struts2-core-2.3.24.jar</div><div class="line">             -org.apache.struts2</div><div class="line">                    -default.properties</div></pre></td></tr></table></figure>
<h4 id="配置常量的方式"><a href="#配置常量的方式" class="headerlink" title="配置常量的方式"></a>配置常量的方式</h4><p><em>src/struts.xml(常用)</em>: <code>&lt;struts&gt;</code>标签下配置<code>&lt;constant name=&quot;常量名&quot; value=&quot;常量值&quot; /&gt;</code><br><em>src/struts.properties</em>: 常量名=常量值<br><em>WEB-INF/web.xml</em>:    <code>&lt;filter&gt;</code>标签下配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">	  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>常量名<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">	  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>常量值<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>注意: 列出的顺序即为加载顺序.后加载的覆盖先加载的.</p>
<h4 id="常用常量配置"><a href="#常用常量配置" class="headerlink" title="常用常量配置"></a>常用常量配置</h4><p><em>struts.i18n.encoding=UTF-8</em>  设置国际化编码为UTF-8,解决POST提交中文参数乱码;<br><em>struts.action.extension=action,,</em> 设置Struts2中Action访问后缀名;<br><em>struts.devMode=false</em> 设置是否打开Struts2的开发模式(1.国际化配置的热加载2.src/struts.xml的热加载 3.提供更多的错误信息),建议在开发时开启.项目上线前关闭.</p>
<h3 id="分模块开发"><a href="#分模块开发" class="headerlink" title="分模块开发"></a>分模块开发</h3><p>可以创建多个.xml文件配置Action信息,在struts.xml中使用<code>&lt;include file=&quot;.xml的路径&quot; /&gt;</code>加载其它xml配置<br>举例:在demo.xml中配置了action,如<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></div><div class="line">	"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</div><div class="line">	"http://struts.apache.org/dtds/struts-2.3.dtd"&gt;</div><div class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"demo"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> &gt;</span></div><div class="line">	</div><div class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"DemoAction"</span> <span class="attr">class</span>=<span class="string">"com.geekhoon.web.action.DemoAction"</span> <span class="attr">method</span>=<span class="string">"hello"</span> &gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"hello"</span> <span class="attr">type</span>=<span class="string">"dispatcher"</span> &gt;</span>/hello.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">package</span>&gt;</span></div><div class="line">	</div><div class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>需要在struts.xml的<code>&lt;struts&gt;</code>下加载demo.xml的位置,如:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 引入demo.xml(分模块开发) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">"/com/geekhoon/web/action/demo.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="动态方法调用"><a href="#动态方法调用" class="headerlink" title="动态方法调用"></a>动态方法调用</h3><h4 id="叹号动态方法调用-不推荐"><a href="#叹号动态方法调用-不推荐" class="headerlink" title="叹号动态方法调用(不推荐)"></a>叹号动态方法调用(不推荐)</h4><p><em>1.开启叹号动态方法常量</em>:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.enable.DynamicMethodInvocation"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><em>2.在action元素中删除method属性</em>:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"HelloAction"</span> <span class="attr">class</span>=<span class="string">"com.geekhoon.action01.HelloAction"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span> <span class="attr">type</span>=<span class="string">"dispatcher"</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><em>3.访问</em>:<br>访问路径:在action名称后面使用”!方法名”的方式指定调用哪个方法<br>如:<a href="http://localhost:8080/struts2/a/HelloAction!hello" target="_blank" rel="external">http://localhost:8080/struts2/a/HelloAction!hello</a></p>
<h4 id="通配符动态方法调用-推荐"><a href="#通配符动态方法调用-推荐" class="headerlink" title="通配符动态方法调用(推荐)"></a>通配符动态方法调用(推荐)</h4><p><em>1.在action中进行配置</em>:更改<code>&lt;action&gt;</code>的name属性(名称_*),不是一定用下划线,可以用其他符号,method的属性使用{1},代表第一个星号对应的方法名,访问时就可以在此位置写方法名<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 演示通配符动态方法调用 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"hellp"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> &gt;</span></div><div class="line">	</div><div class="line">		<span class="comment">&lt;!-- </span></div><div class="line">				HelloAction_*  =&gt; HelloAction__ABC </div><div class="line">				&#123;1&#125;	(第一个星号) =&gt; ABC</div><div class="line">				</div><div class="line">				HelloAction_*_* =&gt; HelloAction_ABC_BCD</div><div class="line">				&#123;1&#125; =&gt;ABC</div><div class="line">				&#123;2&#125; =&gt;BCD</div><div class="line">		 --&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"HelloAction_*"</span> <span class="attr">class</span>=<span class="string">"com.geekhoon.action01.HelloAction"</span> <span class="attr">method</span>=<span class="string">"&#123;1&#125;"</span> &gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span> <span class="attr">type</span>=<span class="string">"dispatcher"</span> &gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">package</span>&gt;</span></div><div class="line">	</div><div class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><em>2.访问</em>:<br><a href="http://localhost:8080/struts2/HelloAction_hello" target="_blank" rel="external">http://localhost:8080/struts2/HelloAction_hello</a></p>
<h3 id="常见配置默认值"><a href="#常见配置默认值" class="headerlink" title="常见配置默认值"></a>常见配置默认值</h3><p>package标签namespace:默认为””,相当于/;<br>action标签method:默认值为execute;<br>action标签class:默认值为com.opensymphony.xwork2.ActionSupport<br>result标签name:默认值为success;<br>result标签type:默认值为dispatcher;</p>
<h2 id="Struts2API"><a href="#Struts2API" class="headerlink" title="Struts2API"></a>Struts2API</h2><h3 id="Action对象创建方式"><a href="#Action对象创建方式" class="headerlink" title="Action对象创建方式"></a>Action对象创建方式</h3><p>pojo-普通类:不需要实现任何接口与继承任何类<br>以下三种创建方式,推荐使用继承ActionSupport</p>
<h4 id="pojo"><a href="#pojo" class="headerlink" title="pojo"></a>pojo</h4><p>创建一个普通类(pojo),如:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</div><div class="line">		</div><div class="line">	<span class="keyword">return</span> <span class="string">"success"</span>;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h4><p>创建一个普通类(pojo),实现Action接口,Action接口提供了一个标准的Action方法,做案例;还提供了很多字符串,用于常见返回结果,如:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> implements Action</span>&#123;&#125;</div></pre></td></tr></table></figure></p>
<h4 id="继承ActionSupport"><a href="#继承ActionSupport" class="headerlink" title="继承ActionSupport"></a>继承ActionSupport</h4><p> 创建一个普通类(pojo),继承ActionSupport类(推荐),ActionSupport类实现了Action接口(所以可以使用Action定义的常量),并且空实现了execute方法;还实现了其它接口(校验,序列化等):<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> extends ActionSupport </span>&#123;&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Action方法声明规则"><a href="#Action方法声明规则" class="headerlink" title="Action方法声明规则"></a>Action方法声明规则</h3><p>1.public修饰<br>2.返回值类型是String<br>3.方法名任意<br>4.方法不能有参数<br>5.可以抛出异常<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public String 动作方法名() throws Exception &#123;</div><div class="line">     // 代码;</div><div class="line">     return &quot;结果视图名&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="结果视图"><a href="#结果视图" class="headerlink" title="结果视图"></a>结果视图</h2><h3 id="全局与局部视图"><a href="#全局与局部视图" class="headerlink" title="全局与局部视图"></a>全局与局部视图</h3><p><img src="http://oj3s07yy0.bkt.clouddn.com/blog/20170516/154951468.png" alt="mark"><br><em>注意</em>:<br>1.全局是在<code>&lt;package&gt;</code>下配置,result可以被当前package的所有action使用<br>2.局部是在<code>&lt;action&gt;</code>下配置,result只能给当前action用<br>3.书写action时,返回值假如是error,从上图可以看出,全局和局部发生了冲突,则局部优先级更高,局部会覆盖全局,会执行局部结果视图中的相应操作.(类似于全局变量和局部变量)</p>
<h3 id="result标签type取值"><a href="#result标签type取值" class="headerlink" title="result标签type取值"></a>result标签type取值</h3><h4 id="dispatcher"><a href="#dispatcher" class="headerlink" title="dispatcher"></a>dispatcher</h4><p>(默认)内部转发到jsp页面</p>
<h4 id="redirect"><a href="#redirect" class="headerlink" title="redirect"></a>redirect</h4><p>重定向到jsp页面</p>
<h4 id="chain"><a href="#chain" class="headerlink" title="chain"></a>chain</h4><p>内部转发到action<br><em>方式一(转发到当前namespace下的action)</em>:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">type</span>=<span class="string">"chain"</span>&gt;</span>action的name值<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><em>方式二(转发到指定namespace下的action)</em>:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">type</span>=<span class="string">"chain"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"namespace"</span>&gt;</span>namespace的值<span class="tag">&lt;/<span class="name">param</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"actionName"</span>&gt;</span>action的name值<span class="tag">&lt;/<span class="name">param</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">result</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="redirectAction"><a href="#redirectAction" class="headerlink" title="redirectAction"></a>redirectAction</h4><p>重定向到action<br><em>方式一(重定向到当前namespace下的action)</em>:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">type</span>=<span class="string">"redirectAction"</span>&gt;</span>action的name值<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><em>方式二(重定向到指定namespace下的action)</em>:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">type</span>=<span class="string">"redirectAction"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"namespace"</span>&gt;</span>namespace的值<span class="tag">&lt;/<span class="name">param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"actionName"</span>&gt;</span>action的name值<span class="tag">&lt;/<span class="name">param</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">result</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="获取Servlet的API"><a href="#获取Servlet的API" class="headerlink" title="获取Servlet的API"></a>获取Servlet的API</h2><h3 id="获得原生ServletAPI"><a href="#获得原生ServletAPI" class="headerlink" title="获得原生ServletAPI"></a>获得原生ServletAPI</h3><p>是指获得:<br>HttpServletRequest<br>HttpServletResponse<br>ServletContext<br>HttpSession<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="comment">//获得HttpServletRequest</span></div><div class="line">		HttpServletRequest request = ServletActionContext.getRequest();</div><div class="line">		<span class="comment">//获得HttpServletResponse</span></div><div class="line">		HttpServletResponse response = ServletActionContext.getResponse();</div><div class="line">		<span class="comment">//获得ServletContext</span></div><div class="line">		ServletContext servletContext = ServletActionContext.getServletContext();</div><div class="line">		<span class="comment">//获得HttpSession</span></div><div class="line">		HttpSession session = request.getSession();</div><div class="line">		</div><div class="line">		<span class="comment">//应用:</span></div><div class="line">		request.setAttribute(<span class="string">"name"</span>, <span class="string">"request_name"</span>);</div><div class="line">		session.setAttribute(<span class="string">"name"</span>, <span class="string">"session_name"</span>);</div><div class="line">		servletContext.setAttribute(<span class="string">"name"</span>, <span class="string">"servletContext_name"</span>);</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> SUCCESS;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"api"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"HelloAction"</span> <span class="attr">class</span>=<span class="string">"com.geekhoon.demo.HelloAction"</span> &gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">type</span>=<span class="string">"dispatcher"</span>&gt;</span>/api.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">package</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	request域:$&#123;requestScope.name&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">	session域:$&#123;sessionScope.name&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">	application域:$&#123;applicationScope.name&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">	</div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">结果:</div><div class="line">request域:request_name</div><div class="line">session域:session_name</div><div class="line">application域:servletContext_name</div></pre></td></tr></table></figure>
<h3 id="获得解耦ServletAPI"><a href="#获得解耦ServletAPI" class="headerlink" title="获得解耦ServletAPI"></a>获得解耦ServletAPI</h3><p>是指通过ActionContext类访问获得:<br>request域Map<br>session域Map<br>application域Map.<br><strong>ActionContext</strong><br>ActionContext是Action执行时的上下文,上下文可以看作是一个容器(Map),它存放的是Action在执行时需要用到的对象,比如:在使用WebWork时,我们的上下文放有请求的参数(Parameter),会话(Session),Servlet上下文(ServletContext),本地化(Locale)信息等。<br>在每次执行Action之前都会创建新的ActionContext,ActionContext是线程安全的,也就是说在同一个线程里ActionContext里的属性是唯一的,这样Action就可以在多线程中使用。<br><strong>ActionContext特点</strong><br>1.ActionContext本质是一个map集合;<br>2.ActionContext的生命周期是:一次请求;<br>3.ActionContext本身存放在ThreadLocal中;<br><em>常用方法</em>:<br>ActionContext context = ActionContext.getContext(); – 获取当前线程的ActionContext实例;<br>context.put(String key, Object value);  – 向request域中存放数据;<br>context.get(String key); – 获取request域中的数据;<br>context.getParameters();            – 获取请求参数;<br>context.getSession();           – 获取HttpSession的值Map;<br>context.getApplication();       – 获取ServletContext的值Map;</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloAction2</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="comment">/*</span></div><div class="line">		 * 获得解耦ServletAPI</div><div class="line">		 */</div><div class="line">		<span class="comment">//获得application域Map</span></div><div class="line">		Map&lt;String, Object&gt; application = ActionContext.getContext().getApplication();</div><div class="line">		</div><div class="line">		<span class="comment">//获得session域Map</span></div><div class="line">		Map&lt;String, Object&gt; session = ActionContext.getContext().getSession();</div><div class="line">		</div><div class="line">		<span class="comment">//获得request域Map</span></div><div class="line">		<span class="comment">//方式一: Struts2并不推荐使用原生request, 而是推荐使用ActionContext本身替代request域</span></div><div class="line">		<span class="comment">//Map&lt;String, Object&gt; request = (Map&lt;String, Object&gt;) ActionContext.getContext().get("request");</span></div><div class="line">		<span class="comment">//方式二:使用ActionContext本身</span></div><div class="line">		ActionContext actionContext = ActionContext.getContext();</div><div class="line">	</div><div class="line">		<span class="comment">//应用</span></div><div class="line">		application.put(<span class="string">"name"</span>, <span class="string">"application_name"</span>);</div><div class="line">		session.put(<span class="string">"name"</span>, <span class="string">"session_name"</span>);</div><div class="line">		actionContext.put(<span class="string">"name"</span>, <span class="string">"request_name"</span>);</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> SUCCESS;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"api"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"HelloAction"</span> <span class="attr">class</span>=<span class="string">"com.geekhoon.demo.HelloAction"</span> &gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">type</span>=<span class="string">"dispatcher"</span>&gt;</span>/api.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"HelloAction2"</span> <span class="attr">class</span>=<span class="string">"com.geekhoon.demo.HelloAction2"</span> &gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">type</span>=<span class="string">"dispatcher"</span>&gt;</span>/api.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">package</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">结果:</div><div class="line">request域:request_name</div><div class="line">session域:session_name</div><div class="line">application域:application_name</div></pre></td></tr></table></figure>
<h3 id="实现接口方式获得-不推荐"><a href="#实现接口方式获得-不推荐" class="headerlink" title="实现接口方式获得(不推荐)"></a>实现接口方式获得(不推荐)</h3><p>获得request     – 实现ServletRequestAware<br>获得response    – 实现ServletResponseAware<br>获得session     – 实现SessionAware<br>获得ServletContext  – 实现ServletContextAware<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloAction3</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ServletRequestAware</span>,<span class="title">SessionAware</span>,<span class="title">ServletContextAware</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> ServletContext sc;</div><div class="line">	<span class="keyword">private</span> Map&lt;String, Object&gt; session;</div><div class="line">	<span class="keyword">private</span> HttpServletRequest request;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		</div><div class="line">		request.setAttribute(<span class="string">"name"</span>, <span class="string">"request_name"</span>);</div><div class="line">		session.put(<span class="string">"name"</span>, <span class="string">"session_name"</span>);</div><div class="line">		sc.setAttribute(<span class="string">"name"</span>, <span class="string">"application_name"</span>);</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> SUCCESS;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServletContext</span><span class="params">(ServletContext context)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.sc=context;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSession</span><span class="params">(Map&lt;String, Object&gt; session)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.session=session;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServletRequest</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.request = request;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="参数封装"><a href="#参数封装" class="headerlink" title="参数封装"></a>参数封装</h2><h3 id="简单类型参数封装"><a href="#简单类型参数封装" class="headerlink" title="简单类型参数封装"></a>简单类型参数封装</h3><h4 id="属性驱动"><a href="#属性驱动" class="headerlink" title="属性驱动"></a>属性驱动</h4><p>提供参数的成员属性及其setter方法:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">jsp中:</div><div class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>action中:<br>    提供参数的属性及其get/setter方法:<br>        private String username;<br>        …<br>        get/setter…</p>
<p>Action是每次请求都会创建一个Action,所以可以使用成员变量接收请求参数<br>struts2在帮我们封装参数时,可以自动类型转换<br>自动转换范围:8大基本数据类型以及对应包装类和java.util.Date类型<br>注意: 提交date类型的格式为 yyyy-MM-dd.<br>举例:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> Integer age;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> String password;</div><div class="line">	<span class="keyword">private</span> Date hiredate;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		</div><div class="line">		System.out.println(<span class="string">"参数name的值:"</span>+name);</div><div class="line">		System.out.println(<span class="string">"参数password的值:"</span>+password);</div><div class="line">		System.out.println(<span class="string">"参数age的值:"</span>+age);</div><div class="line">		System.out.println(<span class="string">"参数hiredate的值:"</span>+hiredate);</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> SUCCESS;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> password;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.password = password;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Date <span class="title">getHiredate</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> hiredate;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHiredate</span><span class="params">(Date hiredate)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.hiredate = hiredate;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"$&#123;pageContext.request.contextPath&#125;/DemoAction"</span> <span class="attr">method</span>=<span class="string">"post"</span> &gt;</span></div><div class="line">	用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">	密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">	年龄:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">	入职日期:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"hiredate"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="对象驱动-不推荐"><a href="#对象驱动-不推荐" class="headerlink" title="对象驱动(不推荐)"></a>对象驱动(不推荐)</h4><p>在页面中使用表达式:<br>jsp中:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"customer.username"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>action中:<br>    提供持久类的引用:<br>        private User user;<br>        public User getUser(){<br>            return user;<br>        }<br>        public void setUser(User user){<br>            this.user = user;<br>        }<br>举例:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> User user;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		</div><div class="line">		System.out.println(user);</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> SUCCESS;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> user;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.user = user;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>User类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> Integer age;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> String password;</div><div class="line">	<span class="keyword">private</span> Date hiredate;</div><div class="line">	</div><div class="line">	get/set...</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"User [age="</span> + age + <span class="string">", name="</span> + name + <span class="string">", password="</span> + password + <span class="string">", hiredate="</span> + hiredate + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>jsp: 注意name属性的写法<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"$&#123;pageContext.request.contextPath&#125;/DemoAction"</span> <span class="attr">method</span>=<span class="string">"post"</span> &gt;</span></div><div class="line">	用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user.name"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">	密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"user.password"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">	年龄:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user.age"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">	入职日期:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user.hiredate"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="模型驱动"><a href="#模型驱动" class="headerlink" title="模型驱动"></a>模型驱动</h4><p>1.action实现ModelDriven(模型驱动)接口;<br>2.提供实体类的引用,并且手动创建实例;<br>3.实现getModel方法;<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//实现ModelDriven接口</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ModelDriven</span>&lt;<span class="title">User</span>&gt; </span>&#123;</div><div class="line">	<span class="comment">//准备User成员变量,提供实体类的引用,并且手动创建实例;</span></div><div class="line">	<span class="keyword">private</span> User user = <span class="keyword">new</span> User();</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		</div><div class="line">		System.out.println(user);</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> SUCCESS;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">//实现接口方法,在方法中返回接收参数的user对象</span></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">getModel</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> user;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//不需要get/set...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>jsp:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"$&#123;pageContext.request.contextPath&#125;/DemoAction"</span> <span class="attr">method</span>=<span class="string">"post"</span> &gt;</span></div><div class="line">	用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">	密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">	年龄:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">	入职日期:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"hiredate"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>User类同上</p>
<h3 id="复杂类型参数封装"><a href="#复杂类型参数封装" class="headerlink" title="复杂类型参数封装"></a>复杂类型参数封装</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//复杂类型参数接收</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> String[] arr;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> List&lt;String&gt; list ;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Map map;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		</div><div class="line">		System.out.println(<span class="keyword">this</span>.toString());</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> SUCCESS;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	get/set....</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"DemoAction [arr="</span> + Arrays.toString(arr) + <span class="string">", list="</span> + list + <span class="string">", map="</span> + map + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>jsp:name值写Action中对应的属性名,list[数字]代表向list的指定索引添加数据,map[‘key名称’]代表给指定key赋值<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"$&#123;pageContext.request.contextPath&#125;/DemoAction"</span> <span class="attr">method</span>=<span class="string">"post"</span> &gt;</span></div><div class="line">	数组:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"arr"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">	数组:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"arr"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">	数组:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"arr"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">	List:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"list"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">	List:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"list"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">	List:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"list[6]"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">	map:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"map['hehe']"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="OGNL表达式"><a href="#OGNL表达式" class="headerlink" title="OGNL表达式"></a>OGNL表达式</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>概念:OGNL(Object-Graph Navigation Language的简称)对象视图导航语言.与EL表达式性质类似.但是OGNL表达式的功能更加强大.struts2框架整合了OGNL表达式<br>作用:<br>1.支持对象方法调用<br>2.支持类静态方法调用和值访问<br>3.支持赋值操作和表达式串联<br>4.支持访问OGNL上下文（OGNL context）和ActionContext<br>5.支持操作集合对象</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h4><p>ognl-xxx.jar</p>
<h4 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h4><p>OGNL表达式,使用前需要先提供取值范围,分别是Root和Context部分<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="comment">/*</span></div><div class="line">		 * 准备工作</div><div class="line">		 */</div><div class="line">		<span class="comment">//1.准备Root</span></div><div class="line">		User root = <span class="keyword">new</span> User();</div><div class="line">		root.setName(<span class="string">"tom"</span>);</div><div class="line">		root.setAge(<span class="number">15</span>);</div><div class="line">		</div><div class="line">		<span class="comment">//2.准备Context</span></div><div class="line">		Map context = <span class="keyword">new</span> HashMap();</div><div class="line">		</div><div class="line">		User u1 = <span class="keyword">new</span> User();</div><div class="line">		u1.setName(<span class="string">"jack"</span>);</div><div class="line">		u1.setAge(<span class="number">19</span>);</div><div class="line"></div><div class="line">		User u2 = <span class="keyword">new</span> User();</div><div class="line">		u2.setName(<span class="string">"rose"</span>);</div><div class="line">		u2.setAge(<span class="number">21</span>);</div><div class="line">		</div><div class="line">		</div><div class="line">		context.put(<span class="string">"u1"</span>, u1);</div><div class="line">		context.put(<span class="string">"u2"</span>, u2);</div><div class="line">	</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>User类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> Integer age;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"User [name="</span> + name + <span class="string">", age="</span> + age + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h4><p>使用Ognl.getValue(“OGNL表达式”,Context部分,Root部分);<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//取root中的属性值</span></div><div class="line">System.out.println(Ognl.getValue(<span class="string">"name"</span>, context, root));</div><div class="line"><span class="comment">//取Context中的属性值</span></div><div class="line">System.out.println(Ognl.getValue(<span class="string">"#u1.name"</span>, context, root));</div><div class="line">System.out.println(Ognl.getValue(<span class="string">"#u2.name"</span>, context, root));</div></pre></td></tr></table></figure></p>
<h4 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//赋root中的值</span></div><div class="line">System.out.println(Ognl.getValue(<span class="string">"name='tom2'"</span>, context, root));</div><div class="line"><span class="comment">//赋Context中的值</span></div><div class="line">System.out.println(Ognl.getValue(<span class="string">"#u1.name='jack2'"</span>, context, root));</div><div class="line">System.out.println(Ognl.getValue(<span class="string">"#u2.name='rose2'"</span>, context, root));</div></pre></td></tr></table></figure>
<h4 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//调用root中的方法</span></div><div class="line">Ognl.getValue(<span class="string">"setAge(17)"</span>, context, root);</div><div class="line"><span class="comment">//调用context中的方法</span></div><div class="line">Ognl.getValue(<span class="string">"#u1.setAge(20)"</span>, context, root);</div><div class="line"></div><div class="line">System.out.println(root.getAge());</div><div class="line">System.out.println(u1.getAge());</div></pre></td></tr></table></figure>
<h4 id="调用静态方法-属性"><a href="#调用静态方法-属性" class="headerlink" title="调用静态方法|属性"></a>调用静态方法|属性</h4><p>准备一个类OgnlUtils:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OgnlUtils</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> String WORD = <span class="string">"geekhoon"</span>;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">echo</span><span class="params">(Object obj)</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"echo方法被调用了"</span>);</div><div class="line">		<span class="keyword">return</span> obj;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Ognl.getValue("@com.geekhoon.demo.OgnlUtils@echo('哈哈哈')", context, root);//打印"echo方法被调用了"</span></div><div class="line">System.out.println(Ognl.getValue(<span class="string">"@com.geekhoon.demo.OgnlUtils@echo('哈哈哈')"</span>, context, root));<span class="comment">//打印"echo方法被调用了"和"哈哈哈"</span></div><div class="line"></div><div class="line">System.out.println(Ognl.getValue(<span class="string">"@com.geekhoon.demo.OgnlUtils@WORD"</span>, context, root));<span class="comment">//打印"geekhoon"</span></div><div class="line"></div><div class="line"><span class="comment">//如果静态方法|属性是在java.lang.Math类中. 可以省略完整类名.</span></div><div class="line">System.out.println(Ognl.getValue(<span class="string">"@@random()"</span>, context, root));</div><div class="line">System.out.println(Ognl.getValue(<span class="string">"@@PI"</span>, context, root));</div></pre></td></tr></table></figure>
<h4 id="创建List-Map"><a href="#创建List-Map" class="headerlink" title="创建List/Map"></a>创建List/Map</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建List</span></div><div class="line">List list = (List) Ognl.getValue(<span class="string">"&#123;'geekhoon',20,'健身'&#125;"</span>, context, root);</div><div class="line">System.out.println(list);</div><div class="line"></div><div class="line"><span class="comment">//创建Map</span></div><div class="line">Map map = (Map) Ognl.getValue(<span class="string">"#&#123;'name':'jack','age':'21'&#125;"</span>, context, root);</div><div class="line">System.out.println(map);</div></pre></td></tr></table></figure>
<h2 id="值栈"><a href="#值栈" class="headerlink" title="值栈"></a>值栈</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p>就是一个接口ValueStack,实现类为OgnlValueStack.其贯穿在Action的整个生命周期中,是数据的中转站,OGNL表达式就是从值栈中取值赋值;</p>
<h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p><img src="http://oj3s07yy0.bkt.clouddn.com/blog/20170517/202201586.png" alt="mark"></p>
<h4 id="root-栈"><a href="#root-栈" class="headerlink" title="root(栈)"></a>root(栈)</h4><p>CompoundRoot就是一个ArrayList,root中默认存放当前访问的Action对象;<br>压栈:push<br>弹栈:pop</p>
<h4 id="context"><a href="#context" class="headerlink" title="context"></a>context</h4><p>OgnlContext就是一个Map,存储一些引用:<br>root<br>原生Request<br>原生Response<br>原生ServletContext<br>request域<br>session域<br>application域<br>parameter<br>attr<br>ValueStack<br>…</p>
<h4 id="查看结构"><a href="#查看结构" class="headerlink" title="查看结构"></a>查看结构</h4><p>方式一: 创建Action,在其中获取OgnlValueStack对象,Debug模式启动;<br>方式二: 在jsp页面中使用:<code>&lt;s:debug&gt;&lt;/s:debug&gt;</code></p>
<h3 id="获取值栈"><a href="#获取值栈" class="headerlink" title="获取值栈"></a>获取值栈</h3><p>1.通过当前线程的ActionContext:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ValueStack valueStack = ActionContext.getContext().getValueStack();</div></pre></td></tr></table></figure></p>
<p>2.通过Request域:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ValueStack valueStack = ServletActionContext.getRequest().getAttribute(ServletActionContext.STRUTS_VALUESTACK_KEY);</div></pre></td></tr></table></figure></p>
<h2 id="OGNL与Struts2整合的应用"><a href="#OGNL与Struts2整合的应用" class="headerlink" title="OGNL与Struts2整合的应用"></a>OGNL与Struts2整合的应用</h2><h3 id="参数赋值"><a href="#参数赋值" class="headerlink" title="参数赋值"></a>参数赋值</h3><p>1.属性驱动: 从表单获得诸如name=tom的参数后,会经过参数拦截器,参数拦截器将表单提交的”name=tom”当作ognl表达式解析.然后从root中找到name属性,并赋值为tom<br>2.对象驱动: 从表单获得诸如user.name=tom的参数后,参数拦截器从root中找到user,再找到user的name属性赋值为tom<br>3.模型驱动: 从表单获得诸如name=tom的参数后,会经过参数拦截器,如图所示,action中的user压栈到栈顶,然后拦截器从栈顶的user中获得name属性,并赋值为tom<br><img src="http://oj3s07yy0.bkt.clouddn.com/blog/20170517/201954534.png" alt="mark"><br>以下代码手动将action中user对象压栈到栈顶,实现如上图所示的压栈操作,然后在form表单中键入name和age,点击提交,跳转到action.在控制台打印的name和age都为null,原因是没实现模型驱动接口.在访问action之前要访问默认的20个拦截器（查看方式在struts2默认的配置文件中），在参数拦截器params之前,要经过模型驱动拦截器,模型驱动拦截器会将User压栈,然后经过参数拦截器的时候,会将栈顶的User中的name和age赋值,就有值了.手动压栈没值的原因就是在action中才进行压栈操作,此时20个拦截器已执行完,即赋值操作已经执行完,赋值时并没找到要赋值的User(因为此时栈顶是action,不是User),所以值是null<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> User user = <span class="keyword">new</span> User();</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		</div><div class="line">		</div><div class="line">		<span class="comment">//将User对象压入栈顶(Root)</span></div><div class="line">		ActionContext.getContext().getValueStack().push(user);</div><div class="line">		</div><div class="line">		System.out.println(user);</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> SUCCESS;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></div><div class="line">    <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">prefix</span>=<span class="string">"s"</span> <span class="attr">uri</span>=<span class="string">"/struts-tags"</span> %&gt;</span></div><div class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"$&#123;pageContext.request.contextPath&#125;/Demo2Action"</span> <span class="attr">method</span>=<span class="string">"post"</span> &gt;</span></div><div class="line">		用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">		年龄:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">s:debug</span>&gt;</span><span class="tag">&lt;/<span class="name">s:debug</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"Demo2Action"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.b_struts_ognl.Demo2Action"</span>  &gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">result</span> &gt;</span>/form.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div></pre></td></tr></table></figure>
<p>正确操作是实现模型驱动接口,代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ModelDriven</span>&lt;<span class="title">User</span>&gt; </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> User user = <span class="keyword">new</span> User();</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		</div><div class="line">		System.out.println(user);</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> SUCCESS;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">getModel</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> user;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h3><p>在重定向时附带参数,在<code>&lt;result&gt;</code>中添加<code>&lt;param&gt;</code>,strurt2识别不了的name属性值就会被当作参数名,比如下面的name属性值name<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"Demo3Action"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.b_struts_ognl.Demo3Action"</span>  &gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">type</span>=<span class="string">"redirectAction"</span> &gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"namespace"</span>&gt;</span>/<span class="tag">&lt;/<span class="name">param</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"actionName"</span>&gt;</span>Demo1Action<span class="tag">&lt;/<span class="name">param</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--  $&#123;name&#125;表示ognl表达式</span></div><div class="line">				注意:不能在属性中使用.只能在标签体中</div><div class="line">		 --&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span>$&#123;name&#125;<span class="tag">&lt;/<span class="name">param</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在action中,设置name属性(提供getter/setter), 在方法中对name进行赋值,在xml中就可以通过ognl表达式${name}获得name值<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> String name ;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		</div><div class="line">		name=<span class="string">"jerry"</span>;</div><div class="line">		</div><div class="line">		System.out.println(<span class="string">"Demo3Action !"</span>);</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> SUCCESS;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="struts2标签"><a href="#struts2标签" class="headerlink" title="struts2标签"></a>struts2标签</h3><p>准备的action:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</div><div class="line">	<span class="comment">//栈中</span></div><div class="line">	<span class="keyword">private</span> String rootName = <span class="string">"rootTom"</span>;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		</div><div class="line">		<span class="comment">//原生request域</span></div><div class="line">		ServletActionContext.getRequest().setAttribute(<span class="string">"requestName"</span>,<span class="string">"requestTom"</span>);</div><div class="line">		<span class="comment">//session域</span></div><div class="line">		ActionContext.getContext().getSession().put(<span class="string">"sessionName"</span>, <span class="string">"sessionTom"</span>);</div><div class="line">		<span class="comment">//application域</span></div><div class="line">		ActionContext.getContext().getApplication().put(<span class="string">"applicationName"</span>, <span class="string">"applicationTom"</span>);</div><div class="line">		<span class="comment">//ActionContext</span></div><div class="line">		ActionContext.getContext().put(<span class="string">"contextName"</span>,<span class="string">"contextTom"</span>);</div><div class="line">		</div><div class="line">		<span class="comment">//----------------------------------------------------------------------------------</span></div><div class="line">		</div><div class="line">		List list = <span class="keyword">new</span> ArrayList();</div><div class="line">		</div><div class="line">		list.add(<span class="keyword">new</span> User(<span class="string">"tom"</span>,<span class="number">18</span>));</div><div class="line">		list.add(<span class="keyword">new</span> User(<span class="string">"jerry"</span>,<span class="number">16</span>));</div><div class="line">		list.add(<span class="keyword">new</span> User(<span class="string">"jack"</span>,<span class="number">19</span>));</div><div class="line">		list.add(<span class="keyword">new</span> User(<span class="string">"rose"</span>,<span class="number">21</span>));</div><div class="line">		</div><div class="line">		ActionContext.getContext().put(<span class="string">"list"</span>,list);</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> SUCCESS;</div><div class="line">	</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getRootName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> rootName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRootName</span><span class="params">(String rootName)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.rootName = rootName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="debug标签"><a href="#debug标签" class="headerlink" title="debug标签"></a>debug标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">s:debug</span>&gt;</span><span class="tag">&lt;/<span class="name">s:debug</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="property标签"><a href="#property标签" class="headerlink" title="property标签"></a>property标签</h4><p>代替EL表达式在页面上取值的标签.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>= <span class="string">”OGNL表达式”/</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>使用property标签取值:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 使用property标签 --&gt;</span></div><div class="line">原生request域:<span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"#request.requestName"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">session域:<span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"#session.sessionName"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">application域:<span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"#application.applicationName"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">ActionContext:<span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"#contextName"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">Root:<span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"rootName"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>使用EL表达式取值:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 使用el表达式 --&gt;</span></div><div class="line">原生request域:$&#123;requestName&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">session域:$&#123;sessionName&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">application域:$&#123;applicationName&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">ActionContext:$&#123;contextName&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">Root:$&#123;rootName&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="iterator标签"><a href="#iterator标签" class="headerlink" title="iterator标签"></a>iterator标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 演示iterator标签  </span></div><div class="line">		value属性:使用ognl取出要遍历的集合</div><div class="line">		var属性:将当前遍历的对象以var属性值作为键放入ActionContext中</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">s:iterator</span> <span class="attr">value</span>=<span class="string">"#list"</span> <span class="attr">var</span>=<span class="string">"user"</span> &gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"#user.name"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">s:iterator</span>&gt;</span></div><div class="line"></div><div class="line">EL:</div><div class="line"><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">"$&#123;list&#125;"</span> <span class="attr">var</span>=<span class="string">"user"</span> &gt;</span></div><div class="line">	$&#123;user.name&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 遍历时会将当前遍历的对象放入栈顶 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">s:iterator</span> <span class="attr">value</span>=<span class="string">"#list"</span>  &gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"name"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">s:iterator</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 数数 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">s:iterator</span> <span class="attr">begin</span>=<span class="string">"1"</span> <span class="attr">end</span>=<span class="string">"10"</span> <span class="attr">step</span>=<span class="string">"1"</span>  &gt;</span></div><div class="line">	<span class="comment">&lt;!-- property标签不写属性,默认取栈顶 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">s:property</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">s:iterator</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="textfield标签"><a href="#textfield标签" class="headerlink" title="textfield标签"></a>textfield标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 表单标签=文本框 </span></div><div class="line">	%&#123;ognl表达式&#125;  =&gt; 强制ognl表达式</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">s:textfield</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">label</span>=<span class="string">"用户名"</span> <span class="attr">value</span>=<span class="string">"%&#123;#request.requestName&#125;"</span> &gt;</span><span class="tag">&lt;/<span class="name">s:textfield</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="OGNL表达式特殊符号"><a href="#OGNL表达式特殊符号" class="headerlink" title="OGNL表达式特殊符号"></a>OGNL表达式特殊符号</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&quot;#&quot;:</div><div class="line">	获取context数据: #OGNL表达式;</div><div class="line">	构建map集合: #&#123;key:value,key:value,...&#125;</div><div class="line">&quot;$&quot;:</div><div class="line">	在配置文件中使用OGNL, $&#123;OGNL表达式&#125; --&gt; 只能写在标签体中;</div><div class="line">&quot;%&quot;:</div><div class="line">	强制解析OGNL表达式: &quot;%&#123;OGNL表达式&#125;&quot;</div><div class="line">&quot;@&quot;:</div><div class="line"></div><div class="line">	@完整类名@静态方法名|属性名</div></pre></td></tr></table></figure>
<h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><h3 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>定义在Action执行之前或之后的代码,在流程到达Action之前,会先经过拦截器.Struts2利用拦截器来封装大部分功能,它的设计与过滤器类似,体现了面向切面编程的思想,我们也可以自定义拦截器用于扩展struts2的功能</p>
<h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>用于拦截Action请求,可以阻止Action执行,可以在Action执行之前或之后执行处理代码,可以提取Action中的重复代码</p>
<h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p>struts2框架启动时创建拦截器,struts2框架关闭时销毁拦截器</p>
<h3 id="创建自定义拦截器"><a href="#创建自定义拦截器" class="headerlink" title="创建自定义拦截器"></a>创建自定义拦截器</h3><p>3种方式:</p>
<h4 id="实现Interceptor接口"><a href="#实现Interceptor接口" class="headerlink" title="实现Interceptor接口"></a>实现Interceptor接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor01</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 初始化;</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="keyword">this</span> + <span class="string">" : 初始化..."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 拦截;</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">intercept</span><span class="params">(ActionInvocation invocation)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        System.out.println(<span class="keyword">this</span> + <span class="string">" : 拦截了..."</span>);</div><div class="line">        <span class="comment">// 放行;</span></div><div class="line">        <span class="keyword">return</span> invocation.invoke();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 销毁;</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="keyword">this</span> + <span class="string">" : 销毁了..."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="继承AbstractInterceptor类"><a href="#继承AbstractInterceptor类" class="headerlink" title="继承AbstractInterceptor类"></a>继承AbstractInterceptor类</h4><p>抽象拦截器帮我们空实现了init和destory方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor02</span> <span class="keyword">extends</span> <span class="title">AbstractInterceptor</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 拦截</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">intercept</span><span class="params">(ActionInvocation invocation)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        System.out.println(<span class="keyword">this</span> + <span class="string">" : 拦截了..."</span>);</div><div class="line">        <span class="comment">// 放行;</span></div><div class="line">        <span class="keyword">return</span> invocation.invoke();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="继承MethodFilterInterceptor类"><a href="#继承MethodFilterInterceptor类" class="headerlink" title="继承MethodFilterInterceptor类"></a>继承MethodFilterInterceptor类</h4><p>方法过滤拦截器,该拦截器内部封装了一个判断,根据我们的配置判断当前执行的action方法是否需要被拦截,判断成立会调用doIntercept,执行拦截;若判断不成立,则直接放行<br><em>优点</em>:可以选择拦截所有方法,也可以选择拦截指定的方法或者放行指定的方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor03</span> <span class="keyword">extends</span> <span class="title">MethodFilterInterceptor</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 拦截</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">doIntercept</span><span class="params">(ActionInvocation invocation)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        System.out.println(<span class="keyword">this</span> + <span class="string">" : 拦截了..."</span>);</div><div class="line">        <span class="comment">// 放行;</span></div><div class="line">        <span class="keyword">return</span> invocation.invoke();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><h4 id="放行"><a href="#放行" class="headerlink" title="放行"></a>放行</h4><p>invocation.invoke()<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="comment">//放行操作</span></div><div class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">doIntercept</span><span class="params">(ActionInvocation invocation)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	<span class="comment">//前处理</span></div><div class="line">	System.out.println(<span class="string">"拦截器的前处理!"</span>);</div><div class="line">	</div><div class="line">	String result = invocation.invoke();<span class="comment">//放行到后续的拦截器|Action</span></div><div class="line">	<span class="comment">//后处理</span></div><div class="line">	System.out.println(<span class="string">"拦截器的后处理!"</span>);</div><div class="line">	</div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="拦截"><a href="#拦截" class="headerlink" title="拦截"></a>拦截</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="comment">//拦截操作</span></div><div class="line"><span class="comment">//1.不需要调用Invocation.invoke()方法</span></div><div class="line"><span class="comment">//2.返回一个结果字符串进行页面跳转</span></div><div class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">doIntercept</span><span class="params">(ActionInvocation invocation)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	System.out.println(<span class="string">"拦截器进行拦截!!!"</span>);</div><div class="line">	<span class="keyword">return</span> <span class="string">"error"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="拦截器配置"><a href="#拦截器配置" class="headerlink" title="拦截器配置"></a>拦截器配置</h3><h4 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h4><p>1.注册拦截器: 在package下配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">interceptors</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 注册拦截器--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"MyInterceptor01"</span> <span class="attr">class</span>=<span class="string">"com.geekhoon.MyInterceptor01"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2.配置自定义拦截器栈<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">interceptors</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 1.注册拦截器 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"myInterceptor"</span> <span class="attr">class</span>=<span class="string">"com.geekhoon.MyInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 2.配置自定义拦截器栈 (21个) --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">interceptor-stack</span> <span class="attr">name</span>=<span class="string">"myStack"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 引入自定义拦截器 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"myInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 引用默认栈中的20个拦截器 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">interceptor-stack</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>3.指定默认拦截器栈: 在package下,interceptors外配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 3.指定默认拦截器栈 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">default-interceptor-ref</span> <span class="attr">name</span>=<span class="string">"myStack"</span>&gt;</span><span class="tag">&lt;/<span class="name">default-interceptor-ref</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="高级配置"><a href="#高级配置" class="headerlink" title="高级配置"></a>高级配置</h4><p>1.对于拦截方法的指定:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">interceptors</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 1.注册拦截器 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"myInterceptor"</span> <span class="attr">class</span>=<span class="string">"com.geekhoon.MyInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 2.配置自定义拦截器栈 (21个) --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">interceptor-stack</span> <span class="attr">name</span>=<span class="string">"myStack"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 引入自定义拦截器 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"myInterceptor"</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!-- 注意:指定哪些方法拦截或不拦截只能选择一种指定不能同时使用 --&gt;</span></div><div class="line">			<span class="comment">&lt;!-- 指定哪些方法不拦截 </span></div><div class="line">			&lt;param name="excludeMethods"&gt;execute,add,delete&lt;/param&gt;</div><div class="line">			--&gt;</div><div class="line">			<span class="comment">&lt;!-- 指定只拦截哪些方法 --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"includeMethods"</span>&gt;</span>execute,add,delete<span class="tag">&lt;/<span class="name">param</span>&gt;</span></div><div class="line">			</div><div class="line">		<span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 引用默认栈中的20个拦截器 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">interceptor-stack</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2.多个包中使用同一套拦截器配置技巧:将拦截器配置单独放入到一个包中. 需要使用这套拦截器配置的包继承该包即可.<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">将拦截器配置单独放入到一个包中:</div><div class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"basepackage"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">abstract</span>=<span class="string">"true"</span> &gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">interceptors</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 1.注册拦截器 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"myInterceptor"</span> <span class="attr">class</span>=<span class="string">"com.geekhoon.MyInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 2.配置自定义拦截器栈 (21个) --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">interceptor-stack</span> <span class="attr">name</span>=<span class="string">"myStack"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 引入自定义拦截器 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"myInterceptor"</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!-- 注意:指定哪些方法拦截或不拦截只能选择一种指定不能同时使用 --&gt;</span></div><div class="line">			<span class="comment">&lt;!-- 指定哪些方法不拦截 </span></div><div class="line">			&lt;param name="excludeMethods"&gt;execute,add,delete&lt;/param&gt;</div><div class="line">			--&gt;</div><div class="line">			<span class="comment">&lt;!-- 指定只拦截哪些方法 --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"includeMethods"</span>&gt;</span>execute,add,delete<span class="tag">&lt;/<span class="name">param</span>&gt;</span></div><div class="line">			</div><div class="line">		<span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 引用默认栈中的20个拦截器 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">interceptor-stack</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 3.指定默认拦截器栈 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">default-interceptor-ref</span> <span class="attr">name</span>=<span class="string">"myStack"</span>&gt;</span><span class="tag">&lt;/<span class="name">default-interceptor-ref</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">需要使用这套拦截器配置的包继承该包:</div><div class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"other"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"basepackage"</span> &gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">action</span>&gt;</span>...</div><div class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Struts2是一个基于MVC设计模式的Web应用框架,本质相当于Servlet,接收与处理请求.Struts2将web层的很多常见操作进行了封装,可以提高开发效率.&lt;br&gt;作用:作为控制器来建立模型与视图之间的数据交互&lt;br&gt;
    
    </summary>
    
      <category term="SSH" scheme="https://geekhoon.github.io/categories/SSH/"/>
    
    
      <category term="SSH" scheme="https://geekhoon.github.io/tags/SSH/"/>
    
      <category term="hibernate" scheme="https://geekhoon.github.io/tags/hibernate/"/>
    
      <category term="struts2" scheme="https://geekhoon.github.io/tags/struts2/"/>
    
  </entry>
  
  <entry>
    <title>hibernate</title>
    <link href="https://geekhoon.github.io/2017/05/09/hibernate/"/>
    <id>https://geekhoon.github.io/2017/05/09/hibernate/</id>
    <published>2017-05-09T07:18:46.000Z</published>
    <updated>2017-05-27T02:31:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>1.ORM(Object Relation Mapping):对象关系映射.<br>  作用: 通过对象与表之间的关系映射,动态生成SQL语句,从而达到操作对象即完成对表的操作<br>2.hibernate: Dao(持久层)的ORM框架<br>  作用:通过对象与表之间的关系映射,动态生成SQL语句,从而达到操作对象即完成对表的操作 – 操作实体类就相当于操作数据库表<br><a id="more"></a></p>
<h2 id="hibernate框架搭建"><a href="#hibernate框架搭建" class="headerlink" title="hibernate框架搭建"></a>hibernate框架搭建</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>hibernate是Dao层的解决方案,故Web项目,Java项目皆可</p>
<h3 id="导jar包"><a href="#导jar包" class="headerlink" title="导jar包"></a>导jar包</h3><p>9个hibernate必须jar包,1个MYSQL驱动包</p>
<h3 id="创建数据库与表"><a href="#创建数据库与表" class="headerlink" title="创建数据库与表"></a>创建数据库与表</h3><h3 id="创建对应的实体类JavaBean"><a href="#创建对应的实体类JavaBean" class="headerlink" title="创建对应的实体类JavaBean"></a>创建对应的实体类JavaBean</h3><h3 id="创建映射配置文件"><a href="#创建映射配置文件" class="headerlink" title="创建映射配置文件"></a>创建映射配置文件</h3><p>位置: 和实体类同在domain包下(不是必须)<br>命名规范: 实体类名.hbm.xml(不是必须)<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">Customer.hbm.xml:</div><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="comment">&lt;!-- 引入约束 --&gt;</span></div><div class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC </span></div><div class="line">    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</div><div class="line">    "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</div><div class="line"><span class="comment">&lt;!-- </span></div><div class="line">    package:可以配置包名;</div><div class="line">	如:&lt;hibernate-mapping package="com.geekhoon.domain"&gt;</div><div class="line">	配置包名后,后面凡是需要完整类名的地方,都可以省略包名</div><div class="line"> --&gt;</div><div class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- </span></div><div class="line">		class:映射类与表的关系</div><div class="line">        name:类的全限定名;(如果配置了package,直接写实体类名)</div><div class="line">        table:类对应的表名;</div><div class="line">     --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"cn.geekhoon.domain.Customer"</span> <span class="attr">table</span>=<span class="string">"cst_customer"</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- </span></div><div class="line">			id:映射主键属性名(OID)与主键列对应关系</div><div class="line">            name:主键在类中的属性名(OID名称);</div><div class="line">            column:主键在表中的字段名;</div><div class="line">            length:设置字段的长度(不写默认数据库对应列长度);</div><div class="line">            type:设置字段的类型</div><div class="line">                type="long"                                           hibernate类型</div><div class="line">                type="java.lang.Long"                                 java类型</div><div class="line">                &lt;column name="cust_id" sql-type="bigint"&gt;&lt;/column&gt;    数据库类型</div><div class="line"></div><div class="line">            注:当name值与column值相同,可以省略column;</div><div class="line">         --&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"cust_id"</span>&gt;</span></div><div class="line"></div><div class="line">            <span class="comment">&lt;!-- </span></div><div class="line">                用于描述主键的生成策略:</div><div class="line">                    native表示主键自动增长(int,Integer,long);</div><div class="line">             --&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- </span></div><div class="line">			property:映射非主键属性名与非主键列对应关系</div><div class="line">            name:属性名;</div><div class="line">            column:属性名对应表中的字段名;</div><div class="line">            注:当name值与column值相同,可以省略column;</div><div class="line">         --&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"cust_name"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"source"</span> <span class="attr">column</span>=<span class="string">"cust_source"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"industry"</span> <span class="attr">column</span>=<span class="string">"cust_industry"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"level"</span> <span class="attr">column</span>=<span class="string">"cust_level"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"phone"</span> <span class="attr">column</span>=<span class="string">"cust_phone"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mobile"</span> <span class="attr">column</span>=<span class="string">"cust_mobile"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="创建hibernate主配置"><a href="#创建hibernate主配置" class="headerlink" title="创建hibernate主配置"></a>创建hibernate主配置</h3><p>位置: src下<br>命名规范: hibernate.cfg.xml(固定写法)<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></div><div class="line">			</div><div class="line">	<span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 1. 必选配置:数据库基本信息 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span>jdbc:mysql:///hibernate01<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 数据库方言:</span></div><div class="line">			所有数据库的sql语句都是基于SQL99标准的,每种数据库在此基础上会有部分扩充,称为方言</div><div class="line">			这里是MySQL --&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 2. 可选配置:hibernate配置 --&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 是否在控制台打印SQL语句 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 是否对控制台显示的SQL语句进行格式化 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 建表方式</span></div><div class="line">			create(测试时使用):没有表,建表.有表,删原表建新表;</div><div class="line">			create-drop(测试时使用):启动hibernate时建表,释放资源时删表;</div><div class="line">			update(常用):没有表,建表.有表,可更新表结构;</div><div class="line">			validate:不会自动建表,每次启动都会校验表结构;</div><div class="line">		 --&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 3. 重要:加载映射文件 --&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 相对应src目录下的位置 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/geekhoon/domain/Customer.hbm.xml"</span> /&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><p>注意:增加操作不需要查,删除和更改都有两种方式,不先查的话会有缺点<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 增 CRUD之C</div><div class="line">	 * create</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="comment">//通过工具类获得session对象</span></div><div class="line">		Session session = HibernateUtils.OpenSession();</div><div class="line">		<span class="comment">//获取事务对象,并开启事务</span></div><div class="line">		Transaction tx = session.beginTransaction();</div><div class="line">		<span class="comment">//操作数据库</span></div><div class="line">		Customer c = <span class="keyword">new</span> Customer();</div><div class="line">		c.setCust_name(<span class="string">"wahaha"</span>);</div><div class="line">		session.save(c);</div><div class="line">		<span class="comment">//提交事务</span></div><div class="line">		tx.commit();</div><div class="line">		<span class="comment">//释放资源</span></div><div class="line">		session.close();</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 删 CRUD之D</div><div class="line">	 * delete</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>&#123;</div><div class="line">		Session session = HibernateUtils.OpenSession();</div><div class="line">		Transaction tx = session.beginTransaction();</div><div class="line">		<span class="comment">/*</span></div><div class="line">		 * 方式1:先查后删</div><div class="line">		 */</div><div class="line">		Customer customer = session.get(Customer.class, <span class="number">3L</span>);</div><div class="line">		<span class="comment">/*</span></div><div class="line">		 * 方式2:不查,直接new一个对象,但是要设置被删对象的id</div><div class="line">		 *  Customer customer = new Customer();</div><div class="line">			customer.setCust_id(4L);</div><div class="line">缺点:不能完成级联删除(多表之间,存在外键,不能随意删除,先删主表(主表的主键是从表的外键),才能删从表(包含外键的表))</div><div class="line">		 */</div><div class="line">		</div><div class="line">		</div><div class="line">		session.delete(customer);</div><div class="line">		tx.commit();</div><div class="line">		session.close();</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 改 CRUD之U</div><div class="line">	 * update</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</div><div class="line">		Session session = HibernateUtils.OpenSession();</div><div class="line">		Transaction tx = session.beginTransaction();</div><div class="line">		<span class="comment">/*</span></div><div class="line">		 * 方式1:先查后改</div><div class="line">		 */</div><div class="line">		<span class="comment">/*Customer customer = session.get(Customer.class, 1L);</span></div><div class="line">		customer.setCust_name("gggggggggg");*/</div><div class="line">		</div><div class="line">		<span class="comment">/*</span></div><div class="line">		 * 方式2:不查,new一个对象,需要设置id</div><div class="line">缺点: 除了设置的name列:setCust_name有值"geek",其他列被全部置为null</div><div class="line">		 * 方式1不存在此问题</div><div class="line">		 */</div><div class="line">		Customer customer = <span class="keyword">new</span> Customer();</div><div class="line">		customer.setCust_id(<span class="number">1L</span>);</div><div class="line">		customer.setCust_name(<span class="string">"geek"</span>);</div><div class="line">		</div><div class="line">		session.update(customer);</div><div class="line">		tx.commit();</div><div class="line">		session.close();</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 查 CRUD之R</div><div class="line">	 * read</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span>&#123;</div><div class="line">		Session session = HibernateUtils.OpenSession();</div><div class="line">		Transaction tx = session.beginTransaction();</div><div class="line">		</div><div class="line">		Customer customer = session.get(Customer.class, <span class="number">1L</span>);</div><div class="line">		System.out.println(customer);</div><div class="line">		tx.commit();</div><div class="line">		session.close();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">作用：</div><div class="line">	用于加载主配置文件;</div><div class="line">常用方法:</div><div class="line">	构造:</div><div class="line">		Configuration conf = <span class="keyword">new</span> Configuration();</div><div class="line">	其它:</div><div class="line">		conf.configure(); <span class="comment">// 加载src下的主配置文件;</span></div><div class="line">		buildSessionFactory(); <span class="comment">// 根据主配置文件,构建SessionFactory;</span></div><div class="line">通常写法:</div><div class="line">	Configuration conf = <span class="keyword">new</span> Configuration().configure();</div></pre></td></tr></table></figure>
<h3 id="SessionFactory"><a href="#SessionFactory" class="headerlink" title="SessionFactory"></a>SessionFactory</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">作用:</div><div class="line">	session对象的工厂对象,用于创建Session;</div><div class="line">常用方法:</div><div class="line">	创建:</div><div class="line">		conf.buildSessionFactory(); <span class="comment">// 根据主配置文件,构建SessionFactory;</span></div><div class="line">	获得session:</div><div class="line">		openSession(); <span class="comment">// 获取普通Session;</span></div><div class="line">		getCurrentSession(); <span class="comment">// 获取与线程绑定的Session;</span></div><div class="line">	特性:</div><div class="line">		<span class="number">1</span>. 其创建和销毁会消耗很多资源(内存);</div><div class="line">		<span class="number">2</span>. 一个线程安全的对象,所有由该工厂生产的Session都共享工厂中维护的数据;</div><div class="line">		<span class="number">3</span>. 其内部维护了很多的信息:</div><div class="line">			a. 连接数据库的信息</div><div class="line">	  		b. hibernate的基本配置</div><div class="line">	  		c. 映射文件的位置,以及映射文件中的配置;</div><div class="line">	  		d. 一些预定义的SQL语句（这些语句都是通用的）</div><div class="line">			e. hibernate的二级缓存</div><div class="line">原则就是：</div><div class="line">	一个应用应该只有一个SessionFactory.在应用加载时创建,应用卸载时销毁.</div><div class="line">写法:</div><div class="line">	<span class="comment">//创建SessionFactory</span></div><div class="line">	SessionFactory sf = conf.buildSessionFactory();</div><div class="line">	<span class="comment">//创建Session</span></div><div class="line">	Session session = sf.openSession();</div></pre></td></tr></table></figure>
<h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">作用：</div><div class="line">	用于跟数据库交互.包含了增删改查(CRUD)以及获取事务对象.</div><div class="line">常用方法:</div><div class="line">	创建:</div><div class="line">		SessionFactory.openSession(); <span class="comment">// 获取普通Session;</span></div><div class="line">		SessionFactory.getCurrentSession(); <span class="comment">// 获取与线程绑定的Session;</span></div><div class="line">	其它:</div><div class="line">		save(Object entity); <span class="comment">// 保存一个实体到数据库;</span></div><div class="line">	  	update(Object entity); <span class="comment">// 更新一个实体;</span></div><div class="line">	  	delete(Object entity); <span class="comment">// 删除一个实体;(自己创建对象时不能完成级联删除)</span></div><div class="line">	  	get(Class clazz,Serializable id); </div><div class="line">		<span class="comment">// 根据id查询一个实体.参数的含义:Class表示要查询的实体类字节码,Serializable就是查询的条件,即ID值;</span></div><div class="line">	  	</div><div class="line">		beginTransaction(); <span class="comment">// 开启事务,并返回事务对象;</span></div></pre></td></tr></table></figure>
<h3 id="Transaction"><a href="#Transaction" class="headerlink" title="Transaction"></a>Transaction</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">作用:</div><div class="line">	用于控制事务;</div><div class="line">常用方法:</div><div class="line">	创建:</div><div class="line">		Session.beginTransaction(); <span class="comment">// 开启事务,并返回事务对象;</span></div><div class="line"></div><div class="line">	其它:</div><div class="line">		commit(); <span class="comment">// 提交事务;</span></div><div class="line">	  	rollback(); <span class="comment">// 回滚事务;</span></div></pre></td></tr></table></figure>
<h2 id="HibernateUtils工具类"><a href="#HibernateUtils工具类" class="headerlink" title="HibernateUtils工具类"></a>HibernateUtils工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateUtils</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> SessionFactory sessionFactory;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 使用原则</div><div class="line">	 * 	一个应用应该只有一个SessionFactory.在应用加载时创建,应用卸载时销毁.</div><div class="line">	 */</div><div class="line">	<span class="keyword">static</span> &#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//加载配置文件</span></div><div class="line">			Configuration conf = <span class="keyword">new</span> Configuration().configure();</div><div class="line">			<span class="comment">//生成sessionFactory</span></div><div class="line">			sessionFactory = conf.buildSessionFactory();</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(<span class="string">"初始化SessionFactory失败"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 获取Session;</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">openSession</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> sessionFactory.openSession();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="持久化类"><a href="#持久化类" class="headerlink" title="持久化类"></a>持久化类</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>与数据库表建立了映射关系的JavaBean</p>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>实现通过操作持久化类完成对数据库表的操作</p>
<h3 id="编写规则"><a href="#编写规则" class="headerlink" title="编写规则"></a>编写规则</h3><p>1.提供无参构造<br>2.提供唯一标识OID与表的主键对应<br>3.提供私有属性,并为私有属性提供公共的getter/setter方法<br>4.属性的类型使用包装类型<br>5.不要使用final修饰</p>
<h3 id="持久化类的状态"><a href="#持久化类的状态" class="headerlink" title="持久化类的状态"></a>持久化类的状态</h3><p>1.瞬时态: 无OID,与Hibernate Session无关联<br>2.持久态: 有OID,与Hibernate Session关联<br>3.游离态/托管态: 有OID,与Hibernate Session无关联</p>
<h4 id="三种状态及转化"><a href="#三种状态及转化" class="headerlink" title="三种状态及转化"></a>三种状态及转化</h4><p><img src="http://oj3s07yy0.bkt.clouddn.com/blog/20170511/234219931.png" alt="mark"><br><img src="http://oj3s07yy0.bkt.clouddn.com/blog/20170511/234309837.png" alt="mark"><br>1.hibernate框架的功能就是对数据进行持久化操作<br>2.持久态对象,会在session提交时,自动与数据库同步<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">根据<span class="number">2</span>,提交时,会自动更新数据库,所以执行完<span class="number">1</span>和<span class="number">2</span>后,<span class="number">3</span>的update可以省略不写</div><div class="line">Customer customer = session.get(Customer.class, <span class="number">1L</span>);<span class="comment">//1</span></div><div class="line">customer.setCust_name(<span class="string">"gggggggggg"</span>);<span class="comment">//2</span></div><div class="line"></div><div class="line">session.update(customer);<span class="comment">//3</span></div><div class="line">tx.commit();</div><div class="line">session.close();</div></pre></td></tr></table></figure></p>
<h3 id="saveOrUpdate方法"><a href="#saveOrUpdate方法" class="headerlink" title="saveOrUpdate方法"></a>saveOrUpdate方法</h3><p>会自动根据对象状态(判断依据是id值,id为null代表瞬时态;id不为null代表游离态),完成save或update操作,对象是瞬时态时,执行save;对象是游离态时,执行update.</p>
<h2 id="主键生成策略"><a href="#主键生成策略" class="headerlink" title="主键生成策略"></a>主键生成策略</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;generator class=&quot;native&quot;&gt;&lt;/generator&gt;</div><div class="line">1. 主键类型:</div><div class="line">	- 自然主键</div><div class="line">		主键具有业务含义的字段;</div><div class="line">	- 代理主键</div><div class="line">		主键不具有业务含义的字段;</div><div class="line"></div><div class="line">2. 主键生成策略:</div><div class="line">	- identity(常用)</div><div class="line">		主键自增,有数据库负责主键生成;</div><div class="line">	- sequence</div><div class="line">		序列,Oracle时使用;</div><div class="line">	- hilo(用不着)</div><div class="line">		高低位算法,适用于既不支持自增也不支持序列,但还想实现主键自增效果的数据库;</div><div class="line">	- native(常用)</div><div class="line">		自动根据数据库提供的主键自增来选择使用identity,sequence,hilo;</div><div class="line">	- increment</div><div class="line">		hibernate每次插入之前先查询表中OID的最大值,在最大值基础上+1作为新的主键;</div><div class="line">	- uuid</div><div class="line">		主键类型为字符串时使用,自动使用UUID随机生成字符串作为主键;</div><div class="line">	- assigned</div><div class="line">		由程序员手动指定OID值;</div></pre></td></tr></table></figure>
<h2 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>hibernate的一级缓存就是指Session缓存,Session缓存就是一块内存空间(Map),用来存放持久态JavaBean</p>
<h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><p>减少对数据库的访问次数</p>
<h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>在使用hibernate查询对象的时候,首先hibernate会使用对象属性的OID值在hibernate的一级缓存中进行查找:<br>如果没有找到相同OID值的对象,则会生成对应sql语句,去数据库中查找相应数据.当从数据库中查询到所需数据时,会将数据信息封装成对象放置到一级缓存中.<br>如果找到相同OID值的对象,就直接将该对象从一级缓存中取出使用,不生成sql语句,不会再查询数据库.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Customer c1 = session.get(Customer.class, <span class="number">1l</span>);<span class="comment">//执行SQL</span></div><div class="line">		</div><div class="line">Customer c2 = session.get(Customer.class, <span class="number">1l</span>);<span class="comment">//没有执行SQL</span></div><div class="line"></div><div class="line">System.out.println(c1==c2);<span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>1.当调用Session接口的save(),update(),saveOrUpdate()方法时,若Session缓存中没有相应的对象,hibernate会自动将当前操作的对象信息存放到hibernate的一级缓存中.<br>2.当调用Session接口的load(),get()方法,以及Query接口的list(),iterator()方法时,会判断缓存中是否存在该对象,有则返回,不会查询数据库.如果缓存中没有要查询对象,再去数据库中查询对应对象,并存放到一级缓存中.<br>3.当调用Session接口的close()方法时,Session缓存会被清空.</p>
<h3 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h3><p>使用hibernate查询对象时,一级缓存中没有相同的OID值的对象,会查询数据库,并将查询到的数据封装成对象,一式两份分别存放在一级缓存和快照中,然后一级缓存中的对象会被返回给程序,程序对对象属性进行修改(修改的就是一级缓存中的对象属性),当事务提交时,hibernate会自动对缓存中的数据与快照中的数据进行比对,如不一致将执行update.如一致,则不做操作</p>
<h2 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">1. 是什么</div><div class="line">	逻辑上的一组操作,要么都成功,要么都失败;</div><div class="line"></div><div class="line">2.  特性</div><div class="line">	- (A)原子性:</div><div class="line">		逻辑上的一组操作,要么都成功,要么都失败;</div><div class="line">	- (C)一致性:</div><div class="line">		事务完成后,所有的数据必须符合业务逻辑,否则要回滚;</div><div class="line">	- (I)隔离性:</div><div class="line">		事务之间相互隔离;</div><div class="line">	- (D)持久性:</div><div class="line">		事务提交后,数据持久化到数据库中;</div><div class="line"></div><div class="line">3.  事务并发问题</div><div class="line">	- 脏读:</div><div class="line">		一个事务读取到另一个事务未提交的事务;</div><div class="line">	- 不可重复读:</div><div class="line">		一个事务中两次查询的数据不一致   --&gt;(update);</div><div class="line">	- 虚读(幻读):</div><div class="line">		一个事务中两次查询的数据不一致   --&gt;(insert);</div><div class="line"></div><div class="line">4.  事务的隔离级别</div><div class="line">	- 8 (串行化)serializable:</div><div class="line">		解决脏读,不可重复读,虚读(幻读)问题;</div><div class="line">	- 4 (可重复读)repeatable read(默认隔离级别):</div><div class="line">		解决脏读,不可重复读问题;</div><div class="line">	- 2 (读已提交)read committed:</div><div class="line">		解决脏读问题;</div><div class="line">	- 1 (读未提交)read uncommitted:</div><div class="line">		未解决任何问题;</div><div class="line"></div><div class="line">5.  在hibernate设置事务隔离级别(hibernate.cfg.xml)</div><div class="line">	&lt;!-- </div><div class="line">		设置事务的隔离级别</div><div class="line">			MySQL默认事务隔离级别为4;</div><div class="line">			Oracle默认事务隔离级别为2;</div><div class="line">	 --&gt;</div><div class="line">	&lt;property name=&quot;hibernate.connection.isolation&quot;&gt;4&lt;/property&gt;</div><div class="line">	&lt;!-- 配置Session与当前线程绑定 --&gt;</div><div class="line">	&lt;property name=&quot;hibernate.current_session_context_class&quot;&gt;thread&lt;/property&gt;</div></pre></td></tr></table></figure>
<h3 id="项目中事务管理"><a href="#项目中事务管理" class="headerlink" title="项目中事务管理"></a>项目中事务管理</h3><p>在项目中,service层负责开启事务,执行业务以及关闭事务,dao层负责CRUD操作,需要保证service层和dao层使用的是同一个session对象,需要使用ThreadLocal,但是不用自己写,hibernate已经封装好了,通过调用sessionFactory.getCurrentSession()可以获得从ThreadLocal中获得与当前线程绑定的session.<br><strong>使用getCurrentSession方法的注意事项:</strong><br>1.必须配合配置才能调用该方法,如果没有配置,调用会报错<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置Session与当前线程绑定 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.current_session_context_class"</span>&gt;</span>thread<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2.getCurrentSession获得的session对象在事务提交时自动关闭,不要再调用session的close()<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">service层管理事务:</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">CustomerService</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> CustomerDao dao = <span class="keyword">new</span> CustomerDaoImPl();</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Customer c)</span> </span>&#123;</div><div class="line">		<span class="comment">//开启事务</span></div><div class="line">		HibernateUtils.getCurrentSession().beginTransaction();</div><div class="line">		<span class="comment">//调用dao,执行业务</span></div><div class="line">		dao.save(c);</div><div class="line">		<span class="comment">//关闭事务</span></div><div class="line">		HibernateUtils.getCurrentSession().getTransaction().commit();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">Dao层获得当前线程对应的Session操作数据库:</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDaoImPl</span> <span class="keyword">implements</span> <span class="title">CustomerDao</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Customer c)</span> </span>&#123;</div><div class="line">		</div><div class="line">		Session session = HibernateUtils.getCurrentSession();</div><div class="line">		session.save(c);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="hibernate查询"><a href="#hibernate查询" class="headerlink" title="hibernate查询"></a>hibernate查询</h2><h3 id="对象图导航查询"><a href="#对象图导航查询" class="headerlink" title="对象图导航查询"></a>对象图导航查询</h3><p>根据已经加载的对象，导航到他的关联对象.譬如要查找一个联系人对应的客户，就可以由联系人对象自动导航找到联系人所属的客户对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">LinkMan linkMan = session.get(LinkMan.class,<span class="number">1L</span>);</div><div class="line">Customer customer = linkMan.getCustomer();</div></pre></td></tr></table></figure></p>
<h3 id="OID检索方式"><a href="#OID检索方式" class="headerlink" title="OID检索方式"></a>OID检索方式</h3><p>用Session的get()和load()方法加载某条记录对应的对象.如下面两种加载客户对象的方式，就是OID检索方式.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Customer customer = session.get(Customer.class,<span class="number">1L</span>);</div><div class="line">Customer customer = session.load(Customer.class,<span class="number">1L</span>);</div></pre></td></tr></table></figure></p>
<h3 id="HQL查询"><a href="#HQL查询" class="headerlink" title="HQL查询"></a>HQL查询</h3><p>适用于简单多表查询</p>
<h4 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h4><h5 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h5><p>from 持久化类名;<br>from 持久化类全限定类名;<br>select 别名 from 持久化类名 别名;<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 基本检索,查询所有</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span></span>&#123;</div><div class="line">	Session session = HibernateUtils.OpenSession();</div><div class="line">	<span class="comment">//1.写HQL语句</span></div><div class="line">	String hql = <span class="string">"from Customer"</span>;</div><div class="line">	<span class="comment">//String hql = "from com.geekhoon.domain.Customer";</span></div><div class="line">	<span class="comment">//String hql = "select c from Customer c ";</span></div><div class="line">	<span class="comment">//2.创建HQL查询对象</span></div><div class="line">	Query query = session.createQuery(hql);</div><div class="line">	<span class="comment">//3.执行查询</span></div><div class="line">	List&lt;Customer&gt; list = query.list();</div><div class="line">	</div><div class="line">	System.out.println(list);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h5><p>from 持久化类 order by 排序属性名;<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span></span>&#123;</div><div class="line">	Session session = HibernateUtils.OpenSession();</div><div class="line">	<span class="comment">//1.写HQL语句</span></div><div class="line">	String hql = <span class="string">"from Customer order by cust_id asc"</span>;</div><div class="line">	String hql = <span class="string">"from Customer order by cust_id desc"</span>;</div><div class="line">	<span class="comment">//2.创建HQL查询对象</span></div><div class="line">	Query query = session.createQuery(hql);</div><div class="line">	<span class="comment">//3.执行查询</span></div><div class="line">	List&lt;Customer&gt; list = query.list();</div><div class="line">	</div><div class="line">	System.out.println(list);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h5><p>1.问号占位符<br>   from 持久化类 where 属性名 = ?;<br>2.命名占位符<br>   from 持久化类 where 属性名 = :标识名;<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span></span>&#123;</div><div class="line">	Session session = HibernateUtils.OpenSession();</div><div class="line">	<span class="comment">//1.写HQL语句</span></div><div class="line">	String hql = <span class="string">"from Customer where cust_name like ?"</span>;</div><div class="line">	<span class="comment">//2.创建HQL查询对象</span></div><div class="line">	Query query = session.createQuery(hql);</div><div class="line">	</div><div class="line">	<span class="comment">//0代表占位符位置,从0开始</span></div><div class="line">	query.setParameter(<span class="number">0</span>, <span class="string">"%geek%"</span>);</div><div class="line">	<span class="comment">//3.执行查询</span></div><div class="line">	<span class="comment">//返回结果是多个,用list()</span></div><div class="line">	<span class="comment">//List&lt;Customer&gt; list = query.list();</span></div><div class="line">	<span class="comment">//返回结果是一个,用uniqueResult()</span></div><div class="line">	Customer customer = (Customer) query.uniqueResult();</div><div class="line">	System.out.println(customer);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span></span>&#123;</div><div class="line">	Session session = HibernateUtils.OpenSession();</div><div class="line">	<span class="comment">//1.写HQL语句</span></div><div class="line">	String hql = <span class="string">"from Customer where cust_name like :name"</span>;</div><div class="line">	<span class="comment">//2.创建HQL查询对象</span></div><div class="line">	Query query = session.createQuery(hql);</div><div class="line">	</div><div class="line">	<span class="comment">//标识名可以任意取</span></div><div class="line">	query.setParameter(<span class="string">"name"</span>, <span class="string">"%geek%"</span>);</div><div class="line">	</div><div class="line">	<span class="comment">//3.执行查询</span></div><div class="line">	List&lt;Customer&gt; list = query.list();</div><div class="line">	System.out.println(customer);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Query.setFirstResult(<span class="keyword">int</span> stratIndex); <span class="comment">// 设置开始索引;</span></div><div class="line">Query.setMaxResults(<span class="keyword">int</span> pageSize); <span class="comment">// 设置每页大小;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo3</span><span class="params">()</span></span>&#123;</div><div class="line">	Session session = HibernateUtils.OpenSession();</div><div class="line">	<span class="comment">//1.写HQL语句</span></div><div class="line">	String hql = <span class="string">"from Customer"</span>;</div><div class="line">	<span class="comment">//2.创建HQL查询对象</span></div><div class="line">	Query query = session.createQuery(hql);</div><div class="line">	</div><div class="line">	<span class="comment">//StartIndex = (PageNum - 1) * PageSize</span></div><div class="line">	query.setFirstResult(<span class="number">2</span>);<span class="comment">// 设置查询开始索引; --&gt; startIndex</span></div><div class="line">	query.setMaxResults(<span class="number">2</span>);<span class="comment">// 设置一次查询几条记录; --&gt; pageSize</span></div><div class="line">	</div><div class="line">	<span class="comment">//3.执行查询</span></div><div class="line">	List&lt;Customer&gt; list = query.list();</div><div class="line">	<span class="comment">//Customer customer = (Customer) query.uniqueResult();</span></div><div class="line">	System.out.println(list);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="统计查询"><a href="#统计查询" class="headerlink" title="统计查询"></a>统计查询</h5><p>count/max/min/avg/sum<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo3</span><span class="params">()</span></span>&#123;</div><div class="line">	Session session = HibernateUtils.OpenSession();</div><div class="line">	<span class="comment">//1.写HQL语句,根据需求换成其他聚合函数即可</span></div><div class="line">	String hql = <span class="string">"select count(cust_id) from Customer"</span>;</div><div class="line">	<span class="comment">//2.创建HQL查询对象</span></div><div class="line">	Query query = session.createQuery(hql);</div><div class="line">	</div><div class="line">	<span class="comment">//3.执行查询</span></div><div class="line">	Long rows = (Long) query.uniqueResult();</div><div class="line">	System.out.println(rows);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="投影查询"><a href="#投影查询" class="headerlink" title="投影查询"></a>投影查询</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">两种方式:</div><div class="line">1.投影列:(返回值是数组)</div><div class="line">	select 属性名, 属性名, ... where 持久化名;</div><div class="line">2.投影对象:(返回值是对象,需要在持久化类中写空参和含有具体属性的构造方法)</div><div class="line">	select new 持久化类(属性名, 属性名, ...) where 持久化名;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span></span>&#123;</div><div class="line">	Session session = HibernateUtils.OpenSession();</div><div class="line">	<span class="comment">//1.写HQL语句</span></div><div class="line">	String hql = <span class="string">"select cust_id,cust_name from Customer"</span>;</div><div class="line">	<span class="comment">//2.创建HQL查询对象</span></div><div class="line">	Query query = session.createQuery(hql);</div><div class="line">	<span class="comment">//3.执行查询</span></div><div class="line">	List&lt;Object[]&gt; list = query.list();</div><div class="line">	</div><div class="line">	<span class="keyword">for</span>(Object[] arr : list)&#123;</div><div class="line">		System.out.println(Arrays.toString(arr));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span></span>&#123;</div><div class="line">	Session session = HibernateUtils.OpenSession();</div><div class="line">	<span class="comment">//1.写HQL语句</span></div><div class="line">	String hql = <span class="string">"select new Customer(cust_id,cust_name) from Customer"</span>;</div><div class="line">	<span class="comment">//2.创建HQL查询对象</span></div><div class="line">	Query query = session.createQuery(hql);</div><div class="line">	<span class="comment">//3.执行查询</span></div><div class="line">	List&lt;Customer&gt; list = query.list();</div><div class="line">	System.out.println(list);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h4><h5 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h5><p>from 持久化类 别名 inner join 别名.对方引用属性;<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">String hql = <span class="string">" from Customer c inner join c.linkMen "</span>;</div><div class="line">		</div><div class="line">Query query = session.createQuery(hql);</div><div class="line"></div><div class="line">List&lt;Object[]&gt; list = query.list();</div><div class="line"></div><div class="line"><span class="keyword">for</span>(Object[] arr : list)&#123;</div><div class="line">	System.out.println(Arrays.toString(arr));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="迫切内连接"><a href="#迫切内连接" class="headerlink" title="迫切内连接"></a>迫切内连接</h5><p>from 持久化类 别名 inner join fetch 别名.对方引用属性;<br>注意:将结果进行组装不再以数组返回,而是返回对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">迫切内连接(将LinkMen对象组装到Customer对象中返回)</div><div class="line">String hql = <span class="string">" from Customer c inner join fetch c.linkMen "</span>;</div><div class="line"></div><div class="line">Query query = session.createQuery(hql);</div><div class="line"></div><div class="line">List&lt;Customer&gt; list = query.list();</div><div class="line"></div><div class="line">System.out.println(list);</div></pre></td></tr></table></figure></p>
<h5 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h5><p>from 持久化类 别名 left join 别名.对方引用属性;<br>String hql = “ from Customer c left join c.linkMen “;<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Query query = session.createQuery(hql);</div><div class="line"></div><div class="line">List&lt;Object[]&gt; list = query.list();</div><div class="line"></div><div class="line"><span class="keyword">for</span>(Object[] arr : list)&#123;</div><div class="line">	System.out.println(Arrays.toString(arr));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="右外连接"><a href="#右外连接" class="headerlink" title="右外连接"></a>右外连接</h5><p>from 持久化类  别名 right join 别名.对方引用属性;<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">String hql = <span class="string">" from Customer c right join c.linkMen "</span>;</div><div class="line">		</div><div class="line">Query query = session.createQuery(hql);</div><div class="line"></div><div class="line">List&lt;Object[]&gt; list = query.list();</div><div class="line"></div><div class="line"><span class="keyword">for</span>(Object[] arr : list)&#123;</div><div class="line">	System.out.println(Arrays.toString(arr));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="右外迫切连接"><a href="#右外迫切连接" class="headerlink" title="右外迫切连接"></a>右外迫切连接</h5><p>右外迫切:将LinkMan组装到Customer中.有可能LinkMen没有对应的Customer对象.这种情况不组装,并且直接返回null<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">String hql = <span class="string">" from Customer c right join fetch c.linkMen "</span>;</div><div class="line">		</div><div class="line">Query query = session.createQuery(hql);</div><div class="line"></div><div class="line">List&lt;Customer&gt; list = query.list();</div><div class="line"></div><div class="line">System.out.println(list);</div></pre></td></tr></table></figure></p>
<h3 id="Criteria查询-QBC查询"><a href="#Criteria查询-QBC查询" class="headerlink" title="Criteria查询(QBC查询)"></a>Criteria查询(QBC查询)</h3><p>适用于单表条件查询</p>
<h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QBC</span> </span>&#123;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 查询所有</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span></span>&#123;</div><div class="line">		Session session = HibernateUtils.OpenSession();</div><div class="line">		<span class="comment">//1.创建查询对象</span></div><div class="line">		Criteria criteria = session.createCriteria(Customer.class);</div><div class="line">		<span class="comment">//2.执行查询</span></div><div class="line">		List list = criteria.list();</div><div class="line">		System.out.println(list);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 条件查询</div><div class="line">	 * 常用:</div><div class="line">            短语      |   含义</div><div class="line">        Restrictions.eq     |    =</div><div class="line">        Restrictions.gt     |    &gt;</div><div class="line">        Restrictions.ge     |    &gt;=</div><div class="line">        Restrictions.lt     |    &lt; </div><div class="line">        Restrictions.le     |    &lt;= </div><div class="line">        Restrictions.between|   between</div><div class="line">        Restrictions.like   |    like</div><div class="line">        Restrictions.in     |    in</div><div class="line">        Restrictions.and    |    and</div><div class="line">        Restrictions.or     |    or</div><div class="line">        Restrictions.asc()  |    asc</div><div class="line">        Restrictions.desc() |    desc</div><div class="line">		Restrictions.isNull |    is null</div><div class="line">		Restrictions.isNotNull | is not null</div><div class="line">		</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span></span>&#123;</div><div class="line">		Session session = HibernateUtils.OpenSession();</div><div class="line">		<span class="comment">//1.创建查询对象</span></div><div class="line">		Criteria criteria = session.createCriteria(Customer.class);</div><div class="line">		<span class="comment">//2.指定查询条件</span></div><div class="line">		<span class="comment">/*</span></div><div class="line">		 * 一个条件</div><div class="line">		 */</div><div class="line">		<span class="comment">//criteria.add(Restrictions.like("cust_name", "%1%"));</span></div><div class="line">		<span class="comment">/*</span></div><div class="line">		 * 多个条件</div><div class="line">		 */</div><div class="line">		criteria.add(Restrictions.and(</div><div class="line">				Restrictions.like(<span class="string">"cust_name"</span>, <span class="string">"%1%"</span>),</div><div class="line">				Restrictions.eq(<span class="string">"cust_phone"</span>, <span class="string">"110"</span>)</div><div class="line">				));</div><div class="line">		<span class="comment">//Customer result = (Customer) criteria.uniqueResult();//查询一个结果</span></div><div class="line">		List&lt;Customer&gt; list = criteria.list();<span class="comment">//查询多个结果</span></div><div class="line">		System.out.println(list);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 分页查询</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo3</span><span class="params">()</span></span>&#123;</div><div class="line">		Session session = HibernateUtils.OpenSession();</div><div class="line">		<span class="comment">//1.获取查询对象</span></div><div class="line">		Criteria criteria = session.createCriteria(Customer.class);</div><div class="line">		<span class="comment">//2.设置分页参数</span></div><div class="line">		criteria.setFirstResult(<span class="number">0</span>);<span class="comment">//startIndex</span></div><div class="line">		criteria.setMaxResults(<span class="number">2</span>);<span class="comment">//pageSize</span></div><div class="line">		<span class="comment">//3.执行查询</span></div><div class="line">		List&lt;Customer&gt; list = criteria.list();</div><div class="line">		System.out.println(list);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 排序查询</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo4</span><span class="params">()</span></span>&#123;</div><div class="line">		Session session = HibernateUtils.OpenSession();</div><div class="line">		<span class="comment">//1.获取查询对象</span></div><div class="line">		Criteria criteria = session.createCriteria(Customer.class);</div><div class="line">		<span class="comment">//2.设置排序条件</span></div><div class="line">		<span class="comment">//根据id升序/降序</span></div><div class="line">		<span class="comment">//criteria.addOrder(Order.asc("cust_id"));</span></div><div class="line">		criteria.addOrder(Order.desc(<span class="string">"cust_id"</span>));</div><div class="line">		<span class="comment">//3.执行查询</span></div><div class="line">		List&lt;Customer&gt; list = criteria.list();</div><div class="line">		System.out.println(list);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 统计查询</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo4</span><span class="params">()</span></span>&#123;</div><div class="line">		Session session = HibernateUtils.openSession();</div><div class="line">		<span class="comment">//开启事务</span></div><div class="line">		Transaction tx = session.beginTransaction();</div><div class="line">		<span class="comment">//操作</span></div><div class="line">		<span class="comment">//------------------------------------------------------------------	</span></div><div class="line">		<span class="comment">//创建Criteria查询对象</span></div><div class="line">		Criteria criteria = session.createCriteria(Customer.class);</div><div class="line">		</div><div class="line">		<span class="comment">//聚合函数</span></div><div class="line">		<span class="comment">//count</span></div><div class="line">		<span class="comment">//criteria.setProjection(Projections.count("cust_id"));</span></div><div class="line">		<span class="comment">//criteria.setProjection(Projections.rowCount());</span></div><div class="line">		<span class="comment">//max</span></div><div class="line">		<span class="comment">//criteria.setProjection(Projections.max("cust_id"));</span></div><div class="line">		<span class="comment">//min</span></div><div class="line">		<span class="comment">//criteria.setProjection(Projections.min("cust_id"));</span></div><div class="line">		<span class="comment">//avg</span></div><div class="line">		<span class="comment">//criteria.setProjection(Projections.avg("cust_id"));</span></div><div class="line">		<span class="comment">//sum</span></div><div class="line">		criteria.setProjection(Projections.sum(<span class="string">"cust_id"</span>));</div><div class="line">		<span class="comment">//执行查询</span></div><div class="line">		Number num = (Number) criteria.uniqueResult();</div><div class="line">		</div><div class="line">		System.out.println(num);</div><div class="line">		<span class="comment">//------------------------------------------------------------------	</span></div><div class="line">		<span class="comment">//提交事务 </span></div><div class="line">		tx.commit();</div><div class="line">		<span class="comment">//关闭资源</span></div><div class="line">		session.close();;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="离线criteria查询对象"><a href="#离线criteria查询对象" class="headerlink" title="离线criteria查询对象"></a>离线criteria查询对象</h4><p>普通Criteria和离线Criteria的区别:<br><strong>普通</strong>:需要由session来创建Criteria,在dao层创建Criteria对象,拼装参数,进行查询.当查询参数发生变化时,三层的代码都需要响应的发生变化.<br><strong>离线</strong>:不需要session对象即可创建Criteria.在web层创建离线查询对象,获得请求中的参数,将参数封装到离线查询对象.就是封装参数是在web层完成的,如果查询参数发生变化,只需要修改web层代码即可,提高了系统的可维护性.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1. 创建离线查询对象:</div><div class="line">    DetachedCriteria dc = DetachedCriteria.forClass(clazz)</div><div class="line">2. 操作:</div><div class="line">    dc.add();// 条件;</div><div class="line">    ...</div><div class="line">3. 与Session进行关联:</div><div class="line">    Criteria criteria = dc.getEx ecutableCriteria(session);</div></pre></td></tr></table></figure></p>
<p>以上:1,2步操作位于web层,3步位于dao层</p>
<p><strong>补充</strong>:(这里使用的是hibernate模版)<br>daoImpl中根据用户名查询对象的方法:首先创建离线查询对象(不是一定要在web层创建,在dao层创建依然获取页面传来的user参数),添加条件后,进行查询,这里直接使用hibernate模版,不用手动与Session进行关联,调用模版api–findByCriteria(DetachedCriteria dc)即可完成查询,内部封装了关联session的操作,返回值是List集合<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">getByUserCode</span><span class="params">(String user_code)</span> </span>&#123;</div><div class="line">		<span class="comment">//1.创建离线查询对象</span></div><div class="line">		DetachedCriteria dc = DetachedCriteria.forClass(User.class);</div><div class="line">		<span class="comment">//2.添加条件</span></div><div class="line">		dc.add(Restrictions.eq(<span class="string">"user_code"</span>, user_code));</div><div class="line">		<span class="comment">//3.查询</span></div><div class="line">		List&lt;User&gt; list = (List&lt;User&gt;) getHibernateTemplate().findByCriteria(dc);</div><div class="line">		<span class="keyword">return</span> list!=<span class="keyword">null</span>&amp;&amp;list.size()&gt;<span class="number">0</span> ? list.get(<span class="number">0</span>) : <span class="keyword">null</span>;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<h3 id="原生SQL查询"><a href="#原生SQL查询" class="headerlink" title="原生SQL查询"></a>原生SQL查询</h3><p>适用于绝大多数多表复杂查询</p>
<h4 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SQLTest</span> </span>&#123;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 查询所有</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span></span>&#123;</div><div class="line">		Session session = HibernateUtils.OpenSession();</div><div class="line">		<span class="comment">//1.编写sql语句</span></div><div class="line">		String sql = <span class="string">"select * from cst_customer"</span>;</div><div class="line">		<span class="comment">//2.封装查询对象</span></div><div class="line">		SQLQuery query = session.createSQLQuery(sql);</div><div class="line">		<span class="comment">//3.指定实例(告诉hibernate将结果封装到哪个对象中)</span></div><div class="line">		query.addEntity(Customer.class);</div><div class="line">		<span class="comment">//4.执行查询</span></div><div class="line">		List&lt;Customer&gt; list = query.list();</div><div class="line">		</div><div class="line">		System.out.println(list);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 条件查询</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span></span>&#123;</div><div class="line">		Session session = HibernateUtils.OpenSession();</div><div class="line">		<span class="comment">//1.编写sql语句</span></div><div class="line">		String sql = <span class="string">"select * from cst_customer where cust_name like ?"</span>;</div><div class="line">		<span class="comment">//2.封装查询对象</span></div><div class="line">		SQLQuery query = session.createSQLQuery(sql);</div><div class="line">		<span class="comment">//3.指定参数占位符的值</span></div><div class="line">		query.setParameter(<span class="number">0</span>, <span class="string">"%geek%"</span>);</div><div class="line">		<span class="comment">//4.指定实例</span></div><div class="line">		query.addEntity(Customer.class);</div><div class="line">		<span class="comment">//5.执行查询</span></div><div class="line">		Customer result = (Customer)query.uniqueResult();</div><div class="line">		</div><div class="line">		System.out.println(result);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 统计查询</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo3</span><span class="params">()</span></span>&#123;</div><div class="line">		Session session = HibernateUtils.OpenSession();</div><div class="line">		<span class="comment">//1.编写sql</span></div><div class="line">		String sql = <span class="string">"select count(*) from cst_customer"</span>;</div><div class="line">		<span class="comment">//2.封装查询对象</span></div><div class="line">		SQLQuery query = session.createSQLQuery(sql);</div><div class="line">		<span class="comment">//3.执行查询</span></div><div class="line">		BigInteger rows = (BigInteger) query.uniqueResult();</div><div class="line">		</div><div class="line">		System.out.println(rows);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 分页查询</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo4</span><span class="params">()</span></span>&#123;</div><div class="line">		Session session = HibernateUtils.OpenSession();</div><div class="line">		<span class="comment">//1.编写sql</span></div><div class="line">		String sql = <span class="string">"select * from cst_customer limit ? , ?"</span>;</div><div class="line">		<span class="comment">//2.封装查询对象</span></div><div class="line">		SQLQuery query = session.createSQLQuery(sql);</div><div class="line">		<span class="comment">//3.指定参数占位符的值</span></div><div class="line">		query.setParameter(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">		query.setParameter(<span class="number">1</span>, <span class="number">2</span>);</div><div class="line">		<span class="comment">//4.指定实例</span></div><div class="line">		query.addEntity(Customer.class);</div><div class="line">		<span class="comment">//5.执行查询</span></div><div class="line">		List&lt;Customer&gt; list = query.list();</div><div class="line">		</div><div class="line">		System.out.println(list);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="多表查询-1"><a href="#多表查询-1" class="headerlink" title="多表查询"></a>多表查询</h4><h5 id="交叉查询"><a href="#交叉查询" class="headerlink" title="交叉查询"></a>交叉查询</h5><p>笛卡尔积<br>select * from 表A,表B;</p>
<h5 id="内连接-1"><a href="#内连接-1" class="headerlink" title="内连接"></a>内连接</h5><p><em>隐式</em>:select <em> from 表A, 表B where 条件;
</em>显式<em>:select </em> from 表A inner join 表B on 条件;</p>
<h5 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h5><p><em>左外连接</em>:select <em> from 表A left outer join 表B on 条件;
</em>右外连接<em>:select </em> from 表A right outer join 表B on 条件;</p>
<h2 id="实体关系"><a href="#实体关系" class="headerlink" title="实体关系"></a>实体关系</h2><h3 id="一对多-多对一"><a href="#一对多-多对一" class="headerlink" title="一对多|多对一"></a>一对多|多对一</h3><h4 id="ORM对象关系映射"><a href="#ORM对象关系映射" class="headerlink" title="ORM对象关系映射"></a>ORM对象关系映射</h4><p><strong>R 关系数据库</strong><br>客户表对应联系人表,客户表中的每一条记录都是一家公司,一家公司对应多个联系人<br><img src="http://oj3s07yy0.bkt.clouddn.com/blog/20170512/153031608.png" alt="mark"><br><strong>O 对象</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">一方:</div><div class="line">    在一方对象中使用Set集合存放多方对象;</div><div class="line">多方:</div><div class="line">    在多方对象中直接引用一方对象;\</div></pre></td></tr></table></figure></p>
<p><img src="http://oj3s07yy0.bkt.clouddn.com/blog/20170512/154140899.png" alt="mark"><br><strong>M 映射</strong><br>需要在各自的映射配置文件中,class标签下,进行配置,配置完后还需要在主配置文件中引入映射配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">一方:	在一方配置文件中配置set标签:</div><div class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"存放多方对象的集合变量名"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"一表在多表中的外键名"</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"多方对象的全限定名"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"linkMen"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 指定对应的外键 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"lkm_cust_id"</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 一对多,指定关联的类是LinkMan --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"com.geekhoon.domain.LinkMan"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></div><div class="line"></div><div class="line">多方:	在多方配置文件中配置many-to-one标签</div><div class="line"><span class="tag">&lt;<span class="name">many-to-one</span> </span></div><div class="line">	<span class="attr">name</span>=<span class="string">"一方对象在多方对象中引用的变量名"</span> </div><div class="line">	<span class="attr">class</span>=<span class="string">"一方对象的全限定名"</span> </div><div class="line">	<span class="attr">column</span>=<span class="string">"一表在多表中的外键名"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">many-to-one</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">many-to-one</span> </span></div><div class="line">	<span class="attr">name</span>=<span class="string">"customer"</span></div><div class="line">	<span class="attr">column</span>=<span class="string">"lkm_cust_id"</span></div><div class="line">	<span class="attr">class</span>=<span class="string">"com.geekhoon.domain.Customer"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">many-to-one</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="一对多中的操作"><a href="#一对多中的操作" class="headerlink" title="一对多中的操作"></a>一对多中的操作</h4><h5 id="级联操作"><a href="#级联操作" class="headerlink" title="级联操作"></a>级联操作</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">什么是级联: 当主控方执行保存,更新或删除操作时,其关联对象也执行相同的操作;</div><div class="line"></div><div class="line">什么是主控方:</div><div class="line">   例:保存客户级联保存关联联系人--主控方是:客户;</div><div class="line">   例:保存联系人级联保存关联客户--主控方是联系人;</div><div class="line"></div><div class="line">需要在映射配置中添加cascade属性.</div><div class="line">cascade级联操作属性:</div><div class="line">   save-update:级联保存-更新;</div><div class="line">   delete:级联删除;</div><div class="line">   all:级联保存-更新,删除;</div></pre></td></tr></table></figure>
<p><strong>级联添加</strong><br>一对多|多对一: 在一中添加了cascade属性后,下次再save或update时就可以简化代码,2处和3处就可以省略不写.但是如果现在只写2处和3处,不写1处,是不可以的.因为在多中没有配置cascade属性.也就是说,如果一中添加了cascade属性,就可以通过保存客户级联保存联系人.只有双方都添加了cascade属性,才可以彼此级联保存(都设置了后,就可以只写1或只写2,3)<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">一对多:</div><div class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"linkMen"</span> <span class="attr">cascade</span>=<span class="string">"save-update"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 指定对应的外键 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"lkm_cust_id"</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 一对多,指定关联的类是LinkMan --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"com.geekhoon.domain.LinkMan"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">多对一:</div><div class="line"><span class="tag">&lt;<span class="name">many-to-one</span> <span class="attr">name</span>=<span class="string">"customer"</span></span></div><div class="line">	<span class="attr">column</span>=<span class="string">"lkm_cust_id"</span></div><div class="line">	<span class="attr">class</span>=<span class="string">"com.geekhoon.domain.Customer"</span></div><div class="line">	<span class="attr">cascade</span>=<span class="string">"save-update"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">many-to-one</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="comment">//保存客户以及客户下的多个联系人</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</div><div class="line">	Session session = HibernateUtils.OpenSession();</div><div class="line">	<span class="comment">//开启事务</span></div><div class="line">	Transaction tx = session.beginTransaction();</div><div class="line">	<span class="comment">//操作------------------------</span></div><div class="line">	<span class="comment">//创建客户</span></div><div class="line">	Customer c = <span class="keyword">new</span> Customer();</div><div class="line">	c.setCust_name(<span class="string">"Alibaba"</span>);</div><div class="line">	<span class="comment">//创建联系人</span></div><div class="line">	LinkMan lm1 = <span class="keyword">new</span> LinkMan();</div><div class="line">	LinkMan lm2 = <span class="keyword">new</span> LinkMan();</div><div class="line">	</div><div class="line">	lm1.setLkm_name(<span class="string">"大黄"</span>);</div><div class="line">	lm2.setLkm_name(<span class="string">"二黄"</span>);</div><div class="line">	</div><div class="line">	<span class="comment">//表达关系</span></div><div class="line">	<span class="comment">//一对多</span></div><div class="line">	c.getLinkMen().add(lm1);</div><div class="line">	c.getLinkMen().add(lm2);</div><div class="line">	<span class="comment">//多对一</span></div><div class="line">	lm1.setCustomer(c);</div><div class="line">	lm2.setCustomer(c);</div><div class="line">	</div><div class="line">	<span class="comment">//将客户以及联系人保存到数据库</span></div><div class="line">	session.save(c);<span class="comment">//1</span></div><div class="line">	session.save(lm1);<span class="comment">//2</span></div><div class="line">	session.save(lm2);<span class="comment">//3</span></div><div class="line">	</div><div class="line">	<span class="comment">//---------------------------</span></div><div class="line">	<span class="comment">//提交事务</span></div><div class="line">	tx.commit();</div><div class="line">	<span class="comment">//释放资源</span></div><div class="line">	session.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>级联删除</strong><br>要求:通过删除联系人(多),级联删除客户(一)<br>只需要在多方的添加cascade,如下:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">many-to-one</span></span></div><div class="line">	<span class="attr">name</span>=<span class="string">"customer"</span></div><div class="line"> 	<span class="attr">column</span>=<span class="string">"lkm_cust_id"</span></div><div class="line"> 	<span class="attr">class</span>=<span class="string">"com.geekhoon.domain.Customer"</span></div><div class="line"> 	<span class="attr">cascade</span>=<span class="string">"delete"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">many-to-one</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>当前,联系人表中id为1和2的联系人,对应的客户id都为1,如果只执行1,联系人中id为1的记录被删除,客户表中id为1的记录也被删除,此时联系人表中id为2的记录中对应的客户id为null;如果1,2都执行,则联系人中id为1,2的字段都删除,客户中id为1的字段被删除<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="comment">//通过删除联系人,级联删除客户</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>&#123;</div><div class="line">	Session session = HibernateUtils.OpenSession();</div><div class="line">	Transaction tx = session.beginTransaction();</div><div class="line">	<span class="comment">//操作-----------------------</span></div><div class="line">	<span class="comment">//获得要删除的联系人</span></div><div class="line">	LinkMan lm1 = session.get(LinkMan.class, <span class="number">1L</span>);</div><div class="line">	LinkMan lm2 = session.get(LinkMan.class, <span class="number">2L</span>);</div><div class="line">	</div><div class="line">	session.delete(lm1);<span class="comment">//1</span></div><div class="line">	session.delete(lm2);<span class="comment">//2</span></div><div class="line">	<span class="comment">//---------------------------</span></div><div class="line">	tx.commit();</div><div class="line">	session.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意:级联操作简化了代码操作,但是在实际开发中,不推荐使用级联删除</p>
<h5 id="inverse"><a href="#inverse" class="headerlink" title="inverse"></a>inverse</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">inverse设置是否不维护关系:</div><div class="line">   true:不维护关系;</div><div class="line">   false:维护关系;</div><div class="line">注意: 外键列所在实体,无法放弃维护关系</div></pre></td></tr></table></figure>
<p>背景:在保存客户及级联的联系人操作中,保存了一条客户记录和级联的两条联系人记录,如果在保存时,同时表达了一对多和多对一的关系(代码如下),会出现一个问题:在控制台中打印的sql语句中,除了三条insert语句,还多了两条update语句,这是因为关系维护重复,多出的update语句是由一对多关系维护产生的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">表达关系:</div><div class="line"><span class="comment">//一对多</span></div><div class="line">c.getLinkMen().add(lm1);</div><div class="line">c.getLinkMen().add(lm2);</div><div class="line"><span class="comment">//多对一</span></div><div class="line">lm1.setCustomer(c);</div><div class="line">lm2.setCustomer(c);</div></pre></td></tr></table></figure></p>
<p>解决方案1:在代码书写上,只书写多对一关系维护代码,删除一对多关系维护代码.如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">表达关系:</div><div class="line"><span class="comment">//多对一</span></div><div class="line">lm1.setCustomer(c);</div><div class="line">lm2.setCustomer(c);</div></pre></td></tr></table></figure></p>
<p>解决方案2:在一的一方(客户)配置中添加inverse属性,设置为true,让Customer放弃维护关联关系,此时代码如下,还可以如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">表达关系:</div><div class="line"><span class="comment">//一对多</span></div><div class="line">c.getLinkMen().add(lm1);</div><div class="line">c.getLinkMen().add(lm2);</div><div class="line"><span class="comment">//多对一</span></div><div class="line">lm1.setCustomer(c);</div><div class="line">lm2.setCustomer(c);</div></pre></td></tr></table></figure></p>
<p>客户映射配置文件:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"linkMen"</span> <span class="attr">inverse</span>=<span class="string">"true"</span> &gt;</span></div><div class="line">	<span class="comment">&lt;!-- 指定对应的外键 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"lkm_cust_id"</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 一对多,指定关联的类是LinkMan --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"com.geekhoon.domain.LinkMan"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>结论:一对多多对一关系中,为了避免sql语句冗余.一般会在一的一方将inverse属性设置为true. 让一的一方放弃维护关联关系,. 所有维护关系的操作,都通过多的一方来完成</p>
<h5 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h5><p><em>删除关系</em>：使联系人中id为1的记录,不再级联客户<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo</span><span class="params">()</span></span>&#123;</div><div class="line">	Session session = HibernateUtils.OpenSession();</div><div class="line">	Transaction tx = session.beginTransaction();</div><div class="line">	</div><div class="line">	<span class="comment">//获得id为1的联系人对象</span></div><div class="line">	LinkMan lm = session.get(LinkMan.class, <span class="number">1L</span>);</div><div class="line">	<span class="comment">//表达关系</span></div><div class="line">	lm.setCustomer(<span class="keyword">null</span>);</div><div class="line"></div><div class="line">	</div><div class="line">	tx.commit();</div><div class="line">	session.close();</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><em>修改关系</em>:使联系人中id为1的记录,级联客户id为1的客户<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo</span><span class="params">()</span></span>&#123;</div><div class="line">	Session session = HibernateUtils.OpenSession();</div><div class="line">	Transaction tx = session.beginTransaction();</div><div class="line">	</div><div class="line">	<span class="comment">//获得id为1的联系人对象</span></div><div class="line">	LinkMan lm = session.get(LinkMan.class, <span class="number">3L</span>);</div><div class="line">	</div><div class="line">	<span class="comment">//获得id为1的客户对象</span></div><div class="line">	<span class="comment">//方式1:先查询出所属的客户</span></div><div class="line">	<span class="comment">//Customer customer = session.get(Customer.class, 1L);</span></div><div class="line">	<span class="comment">//方式2:自己创建客户,收到设置oid</span></div><div class="line">	Customer customer = <span class="keyword">new</span> Customer();</div><div class="line">	customer.setCust_id(<span class="number">1L</span>);</div><div class="line">	</div><div class="line">	<span class="comment">//设置关系</span></div><div class="line">	lm.setCustomer(customer);</div><div class="line"></div><div class="line">	</div><div class="line">	tx.commit();</div><div class="line">	session.close();</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><em>查询管理</em>:<br>1.通过联系人查询所属客户<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo</span><span class="params">()</span></span>&#123;</div><div class="line">	Session session = HibernateUtils.OpenSession();</div><div class="line">	Transaction tx = session.beginTransaction();</div><div class="line">	</div><div class="line">	<span class="comment">//获得id为1的联系人对象</span></div><div class="line">	LinkMan lm = session.get(LinkMan.class, <span class="number">3L</span>);</div><div class="line">	</div><div class="line">	System.out.println(lm.getCustomer());</div><div class="line"></div><div class="line">	</div><div class="line">	tx.commit();</div><div class="line">	session.close();</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2.通过客户查询所属联系人<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo</span><span class="params">()</span></span>&#123;</div><div class="line">	Session session = HibernateUtils.OpenSession();</div><div class="line">	Transaction tx = session.beginTransaction();</div><div class="line">	</div><div class="line">	<span class="comment">//获得id为1的客户对象</span></div><div class="line">	Customer customer = session.get(Customer.class, <span class="number">1L</span>);</div><div class="line"></div><div class="line">	System.out.println(customer.getLinkMen());<span class="comment">//需要在LinkMan中重写ToString()</span></div><div class="line"></div><div class="line">	</div><div class="line">	tx.commit();</div><div class="line">	session.close();</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h3><h4 id="ORM对象关系映射-1"><a href="#ORM对象关系映射-1" class="headerlink" title="ORM对象关系映射"></a>ORM对象关系映射</h4><p><strong>R 关系数据库</strong><br>用户表对应角色表,一个用户可以对应多个角色,一个角色也可以对应多个用户,所以是多对多的关系<br><img src="http://oj3s07yy0.bkt.clouddn.com/blog/20170512/195911717.png" alt="mark"><br><strong>O 对象</strong><br><img src="http://oj3s07yy0.bkt.clouddn.com/blog/20170512/200901955.png" alt="mark"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//用户实体类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> Long user_id;</div><div class="line">	<span class="keyword">private</span> String user_code;</div><div class="line">	<span class="keyword">private</span> String user_name;</div><div class="line">	<span class="keyword">private</span> String user_password;</div><div class="line">	<span class="keyword">private</span> Character user_state;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Set&lt;Role&gt; roles = <span class="keyword">new</span> HashSet&lt;Role&gt;();</div><div class="line">	</div><div class="line">	get/set...</div><div class="line">&#125;</div><div class="line"><span class="comment">//角色实体类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> Long role_id;</div><div class="line">	<span class="keyword">private</span> String role_name;</div><div class="line">	<span class="keyword">private</span> String role_memo;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Set&lt;User&gt; users = <span class="keyword">new</span> HashSet&lt;User&gt;();</div><div class="line">	</div><div class="line">	get/set...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>M 映射</strong><br>分别在两个映射文件中添加set标签:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"当前实体类中的set集合的属性名"</span> <span class="attr">table</span>=<span class="string">"中间表的表名"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"当前表在中间表的外键名"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">many-to-many</span> <span class="attr">class</span>=<span class="string">"对方持久化类的全限定名"</span> <span class="attr">column</span> =<span class="string">"对方表在中间表的外键名"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>User实体对应的映射配置:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"roles"</span> <span class="attr">table</span>=<span class="string">"sys_user_role"</span>   &gt;</span></div><div class="line">	<span class="comment">&lt;!-- 别人引用"我"的外键列名 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"user_id"</span> &gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 表达集合是多对多关系</span></div><div class="line">		class属性:表达我与谁是多对多</div><div class="line">		column属性:表达另外一个外键列名</div><div class="line">	 --&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">many-to-many</span> <span class="attr">class</span>=<span class="string">"Role"</span> <span class="attr">column</span>=<span class="string">"role_id"</span> &gt;</span><span class="tag">&lt;/<span class="name">many-to-many</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>Role实体对应的映射配置:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"users"</span> <span class="attr">table</span>=<span class="string">"sys_user_role"</span> <span class="attr">inverse</span>=<span class="string">"true"</span>   &gt;</span></div><div class="line">	<span class="comment">&lt;!-- 别人引用"我"的外键列名 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"role_id"</span> &gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="tag">&lt;<span class="name">many-to-many</span> <span class="attr">class</span>=<span class="string">"User"</span> <span class="attr">column</span>=<span class="string">"user_id"</span> &gt;</span><span class="tag">&lt;/<span class="name">many-to-many</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="多对多中的操作"><a href="#多对多中的操作" class="headerlink" title="多对多中的操作"></a>多对多中的操作</h4><h5 id="级联操作-1"><a href="#级联操作-1" class="headerlink" title="级联操作"></a>级联操作</h5><p>道理与一对多一样,在set标签中添加cascade属性即可,级联删除不建议使用.</p>
<h5 id="inverse-1"><a href="#inverse-1" class="headerlink" title="inverse"></a>inverse</h5><p>背景:保存用户以及所属角色时,如果两方关系都表达,在保存时会抛出中间表主键重复异常.两方关系都描述,hibernate会维护两次关系.两次关系维护都是向中间表插入记录.关系描述重复,所以插入记录重复.<br>解决方案1:书写代码时,只书写维护一方关系的代码<br>解决方案2:在某一方配置中.加入inverse属性放弃维护关系<br>在多对多关系中一般需要挑选一方放弃关系维护,避免中间表数据录入重复.技术层面讲,选择任何一方放弃都可以.但是在业务上,关系的维护方不能放弃.<br>关系的维护方举例:<br>(1)老师-学生: 需要先有老师,学生才能选择是哪个老师的学生.关系的维护方是学生,所以老师放弃.<br>(2)商品-订单: 需要先有商品,才能下订单.关系的维护方是订单,商品放弃.<br>(3)用户-角色: 需要先有用户,才能决定他是什么角色,所以用户维护关系,角色放弃<br>综上所述:在角色实体的映射配置的set标签中,添加inverse=”true”<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo</span><span class="params">()</span></span>&#123;</div><div class="line">	Session session = HibernateUtils.OpenSession();</div><div class="line">	<span class="comment">//开启事务</span></div><div class="line">	Transaction tx = session.beginTransaction();</div><div class="line">	<span class="comment">//操作------------------------</span></div><div class="line">	<span class="comment">//创建用户</span></div><div class="line">	User user1 = <span class="keyword">new</span> User();</div><div class="line">	User user2 = <span class="keyword">new</span> User();</div><div class="line">	user1.setUser_name(<span class="string">"张三"</span>);</div><div class="line">	user2.setUser_name(<span class="string">"李四"</span>);</div><div class="line">	</div><div class="line">	<span class="comment">//创建角色</span></div><div class="line">	Role role1 = <span class="keyword">new</span> Role();</div><div class="line">	Role role2 = <span class="keyword">new</span> Role();</div><div class="line">	role1.setRole_name(<span class="string">"程序员"</span>);</div><div class="line">	role2.setRole_name(<span class="string">"架构师"</span>);</div><div class="line">	</div><div class="line">	<span class="comment">//表达关系</span></div><div class="line">	<span class="comment">//解决方案1:下面两组只写一组</span></div><div class="line">	<span class="comment">//解决方案2:两组都写,在角色实体的映射配置的set标签中,添加inverse="true"</span></div><div class="line">	<span class="comment">//1</span></div><div class="line">	user1.getRoles().add(role1);<span class="comment">//向中间表插入1-1</span></div><div class="line">	user1.getRoles().add(role2);</div><div class="line">	user2.getRoles().add(role1);</div><div class="line">	user2.getRoles().add(role2);</div><div class="line">	<span class="comment">//2</span></div><div class="line">	role1.getUsers().add(user1);<span class="comment">//向中间表插入1-1</span></div><div class="line">	role1.getUsers().add(user2);</div><div class="line">	role2.getUsers().add(user1);</div><div class="line">	role2.getUsers().add(user2);</div><div class="line">	</div><div class="line">	<span class="comment">//4.保存</span></div><div class="line">	session.save(user1);</div><div class="line">	session.save(user2);</div><div class="line">	session.save(role1);</div><div class="line">	session.save(role2);</div><div class="line">	<span class="comment">//---------------------------</span></div><div class="line">	<span class="comment">//提交事务</span></div><div class="line">	tx.commit();</div><div class="line">	<span class="comment">//释放资源</span></div><div class="line">	session.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="其他操作-1"><a href="#其他操作-1" class="headerlink" title="其他操作"></a>其他操作</h5><p><em>移除用户的角色</em>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="comment">//移除用户中id为1的记录的角色中id为2的角色</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>&#123;</div><div class="line">	Session session = HibernateUtils.OpenSession();</div><div class="line">	Transaction tx = session.beginTransaction();</div><div class="line">	<span class="comment">//操作-----------------------</span></div><div class="line">	User user = session.get(User.class, <span class="number">1L</span>);</div><div class="line">	<span class="comment">//方案1:可以中间表中直接删除用户id为1对应的角色id为2的这条记录</span></div><div class="line">	Role role = session.get(Role.class, <span class="number">2L</span>);</div><div class="line">	</div><div class="line">	<span class="comment">//方案2:需要在Role实体类中重写hashCode()和equal(),才能删除成功</span></div><div class="line"><span class="comment">//hashCode()和equal()默认是每个属性相同,才判定为同一个对象,上面的代码中</span></div><div class="line"><span class="comment">//如果只写了1组,且在Role中重写了hashCode()和equals(),只设定id.则上面会保存</span></div><div class="line"><span class="comment">//失败,中间表中只会有1,1 和 2,1.原因是</span></div><div class="line"><span class="comment">/*</span></div><div class="line">	Role role1 = new Role();</div><div class="line">	Role role2 = new Role();</div><div class="line">	role1.setRole_name("程序员");</div><div class="line">	role2.setRole_name("架构师");</div><div class="line">	</div><div class="line">	id都为null,所以判定为同一个对象</div><div class="line"></div><div class="line">*/</div><div class="line">	<span class="comment">/*Role role = new Role();</span></div><div class="line">	role.setRole_id(2L);*/</div><div class="line">	</div><div class="line">	user.getRoles().remove(role);</div><div class="line">	<span class="comment">//---------------------------</span></div><div class="line">	tx.commit();</div><div class="line">	session.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><em>修改用户的角色</em>:方案1和方案2都可以,不需要写hashCode()和equals()<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">	<span class="comment">//修改用户中id为1的记录的角色为角色中id为2的角色</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span></span>&#123;</div><div class="line">		Session session = HibernateUtils.OpenSession();</div><div class="line">		Transaction tx = session.beginTransaction();</div><div class="line">		<span class="comment">//操作-----------------------</span></div><div class="line">		User user = session.get(User.class, <span class="number">1L</span>);</div><div class="line">		<span class="comment">//方案1:</span></div><div class="line">		<span class="comment">//Role role = session.get(Role.class, 2L);</span></div><div class="line">		</div><div class="line">		<span class="comment">//方案2:</span></div><div class="line">		Role role = <span class="keyword">new</span> Role();</div><div class="line">		role.setRole_id(<span class="number">2L</span>);</div><div class="line">		</div><div class="line">		user.getRoles().add(role);</div><div class="line">		<span class="comment">//---------------------------</span></div><div class="line">		tx.commit();</div><div class="line">		session.close();</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p><em>查询用户的角色</em>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo3</span><span class="params">()</span></span>&#123;</div><div class="line">	Session session = HibernateUtils.OpenSession();</div><div class="line">	Transaction tx = session.beginTransaction();</div><div class="line">	<span class="comment">//操作-----------------------</span></div><div class="line">	User user = session.get(User.class, <span class="number">1L</span>);</div><div class="line">	</div><div class="line">	System.out.println(user.getRoles());</div><div class="line">	<span class="comment">//---------------------------</span></div><div class="line">	tx.commit();</div><div class="line">	session.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;1.ORM(Object Relation Mapping):对象关系映射.&lt;br&gt;  作用: 通过对象与表之间的关系映射,动态生成SQL语句,从而达到操作对象即完成对表的操作&lt;br&gt;2.hibernate: Dao(持久层)的ORM框架&lt;br&gt;  作用:通过对象与表之间的关系映射,动态生成SQL语句,从而达到操作对象即完成对表的操作 – 操作实体类就相当于操作数据库表&lt;br&gt;
    
    </summary>
    
      <category term="SSH" scheme="https://geekhoon.github.io/categories/SSH/"/>
    
    
      <category term="SSH" scheme="https://geekhoon.github.io/tags/SSH/"/>
    
      <category term="hibernate" scheme="https://geekhoon.github.io/tags/hibernate/"/>
    
  </entry>
  
  <entry>
    <title>JDBC事务</title>
    <link href="https://geekhoon.github.io/2017/04/12/JDBC%E4%BA%8B%E5%8A%A1/"/>
    <id>https://geekhoon.github.io/2017/04/12/JDBC事务/</id>
    <published>2017-04-12T15:20:57.000Z</published>
    <updated>2017-04-12T15:25:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>概念: 逻辑上的一组操作,要么全部成功,要么全部失败.<br>作用: 保证在一个事务中多次操作要么全部成功,要么全部失败<br>缩写为tx<br><a id="more"></a></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>在数据操作前开启事务,如果在多次数据操作间出现了错误,比如A给B转账,A转出了100,但此时B没有收到,此时程序出错,则A可以rollback回滚,恢复到开始事务时的状态.如果多次数据操作间没出现错误,则可以commit提交.<br><strong>注意:</strong>事务是否结束,取决与 是否调用了rollback 或 commit</p>
<h4 id="cmd事务操作"><a href="#cmd事务操作" class="headerlink" title="cmd事务操作"></a>cmd事务操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">-- 方式一:</div><div class="line">    a) 开启事务:</div><div class="line">        start transaction;</div><div class="line">    b) 结束事务:</div><div class="line">        commit;(提交事务)</div><div class="line">        rollback;(回滚事务)</div><div class="line"></div><div class="line">-- 方式二:</div><div class="line">    a) 设置自动提交为<span class="keyword">false</span>:</div><div class="line">        set autocommit = <span class="number">0</span>;(<span class="number">0</span> == <span class="keyword">false</span>, <span class="number">1</span> == <span class="keyword">true</span>)</div><div class="line">    b) 结束事务:</div><div class="line">        commit;(提交事务)</div><div class="line">        rollback;(回滚事务)</div></pre></td></tr></table></figure>
<h4 id="JDBC事务操作"><a href="#JDBC事务操作" class="headerlink" title="JDBC事务操作"></a>JDBC事务操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">a) 获取连接(conn);</div><div class="line">b) 开启事务:</div><div class="line">    conn.setAutoCommit(<span class="keyword">false</span>);</div><div class="line">c) 结束事务:</div><div class="line">    conn.commit();(提交事务)</div><div class="line">    conn.rollback();(回滚事务)</div></pre></td></tr></table></figure>
<h4 id="DBUtils事务操作"><a href="#DBUtils事务操作" class="headerlink" title="DBUtils事务操作"></a>DBUtils事务操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">a) 获取连接(conn);</div><div class="line">b) 开启事务:</div><div class="line">    conn.setAutoCommit(<span class="keyword">false</span>);</div><div class="line">c) 结束事务:</div><div class="line">    DbUtils.commitAndClose(conn);</div><div class="line">    DbUtils.rollbackAndClose(conn);</div></pre></td></tr></table></figure>
<h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>本地线程变量<br>作用: 在当前线程任意位置,共享数据;</p>
<h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">set(Object obj);  设置数据;</div><div class="line">get();  获取数据;</div><div class="line">remove();  移除数据;</div><div class="line"></div><div class="line">ThreadLocal local = <span class="keyword">new</span> ThreadLocal();</div><div class="line">Thread ct = Thread.currentThread();</div><div class="line"></div><div class="line">local相当于map集合,键的位置存放当前线程,值的位置存放Connection对象</div><div class="line">对应关系:</div><div class="line">local.set(con) --- map.put(ct,con)</div><div class="line">local.get -------- map.get(ct)</div><div class="line">local.remove ----- map.remove(ct)</div></pre></td></tr></table></figure>
<h2 id="事务特性"><a href="#事务特性" class="headerlink" title="事务特性"></a>事务特性</h2><p>ACID<br>1.原子性: 事务结束后,这组操作,要么同时成功,要么同时失败;<br>2.一致性: 事务前后数据必须保持一致,操作完成后,所有数据必须符合业务逻辑,否则事务必须中止;<br>3.隔离性(多事务的并发): 多事务并发,事务以相互隔离的方式执行;<br>4.持久性: 事务提交后,数据必须以一种持久性方式存取起来,事务不可逆;</p>
<h2 id="事务中的问题与隔离级别"><a href="#事务中的问题与隔离级别" class="headerlink" title="事务中的问题与隔离级别"></a>事务中的问题与隔离级别</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">脏读:</div><div class="line">    一个事务读取到另一个事务未提交的数据;</div><div class="line"></div><div class="line">不可重复读:</div><div class="line">    一个事务中两次查询的数据不一致   --&gt; 一个事务读到了另一个事务 已经提交数据(update)</div><div class="line"></div><div class="line">虚读(幻读):</div><div class="line">    一个事务中两次查询的数据不一致   --&gt; 一个事务读到了另一个事务 已经提交数据(insert)</div></pre></td></tr></table></figure>
<h3 id="隔离"><a href="#隔离" class="headerlink" title="隔离"></a>隔离</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">隔离级别(安全从高到低,性能从低到高):</div><div class="line">    (串行化)serializable;       --&gt; 解决脏读,不可重复读,虚读(幻读)问题;</div><div class="line">    (可重复读)repeatalbe read;  --&gt; 解决脏读,不可重复读问题;(mysql默认隔离级别)</div><div class="line">    (读已提交)read committed;   --&gt; 解决脏读问题;</div><div class="line">    (读未提交)read uncommitted; --&gt; 未解决任何问题;</div><div class="line"></div><div class="line">查看隔离级别:</div><div class="line">    select @@tx_isolation;</div><div class="line"></div><div class="line">修改隔离级别:</div><div class="line">    set session transaction isolation level 隔离级别;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;事务&quot;&gt;&lt;a href=&quot;#事务&quot; class=&quot;headerlink&quot; title=&quot;事务&quot;&gt;&lt;/a&gt;事务&lt;/h2&gt;&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;概念: 逻辑上的一组操作,要么全部成功,要么全部失败.&lt;br&gt;作用: 保证在一个事务中多次操作要么全部成功,要么全部失败&lt;br&gt;缩写为tx&lt;br&gt;
    
    </summary>
    
      <category term="JAVA进阶" scheme="https://geekhoon.github.io/categories/JAVA%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="数据库" scheme="https://geekhoon.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>JSP</title>
    <link href="https://geekhoon.github.io/2017/04/09/JavaWeb-11-JSP/"/>
    <id>https://geekhoon.github.io/2017/04/09/JavaWeb-11-JSP/</id>
    <published>2017-04-09T07:08:53.000Z</published>
    <updated>2017-04-13T01:39:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>JSP(Java Server Pages)是建立在Servlet规范之上的动态网页开发技术(实质是一个Servlet)<br><a id="more"></a></p>
<h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><p>html+java代码;<br>html: 展示静态网页;<br>java代码: 在网页中实现动态资源的展示;</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="脚本元素-标签"><a href="#脚本元素-标签" class="headerlink" title="脚本元素(标签)"></a>脚本元素(标签)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">1.声明:(定义成员变量或成员方法)</div><div class="line">	&lt;%! 类体 %&gt;</div><div class="line">2.脚本:(存放在Servlet的service方法中的代码段)</div><div class="line">	&lt;% 方法体 %&gt;</div><div class="line">3.表达式:(存放可以输出的内容,内容会在浏览器上显示)</div><div class="line">	&lt;%= 方法的参数 %&gt;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;%-- 声明 --%&gt;</div><div class="line">&lt;%! </div><div class="line">	<span class="keyword">private</span> String username = <span class="string">"geekhoon"</span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> username;</div><div class="line">	&#125;</div><div class="line">%&gt;</div><div class="line">&lt;%-- 脚本 --%&gt;</div><div class="line">&lt;% </div><div class="line">	<span class="keyword">int</span> i = <span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>(; i &lt; <span class="number">10</span> ; i++ )&#123;</div><div class="line">		System.out.print(i);控制台打印<span class="number">123456789</span></div><div class="line">		out.print(i);页面显示<span class="number">123456789</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> j = i;</div><div class="line">%&gt;</div><div class="line">&lt;%-- 表达式 --%&gt;</div><div class="line">&lt;%= j %&gt; 页面显示<span class="number">10</span></div><div class="line">&lt;%= username %&gt; 页面显示geekhoon</div></pre></td></tr></table></figure>
<p>一个面试题:报错?输出结果?<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;%=i%&gt;</div><div class="line">&lt;% i++; %&gt;</div><div class="line">&lt;% <span class="keyword">int</span> i = <span class="number">10</span>; %&gt;</div><div class="line">&lt;%=<span class="keyword">this</span>.i%&gt;</div><div class="line">&lt;%! <span class="keyword">int</span> i = <span class="number">5</span>;%&gt;</div><div class="line">&lt;% i++;%&gt;</div><div class="line">&lt;%=i%&gt;</div><div class="line">第五行定义了一个成员变量i=<span class="number">5</span>,执行第一行,页面显示<span class="number">5</span></div><div class="line">第二行,i变为<span class="number">6</span></div><div class="line">第三行,定义一个局部变量i=<span class="number">10</span></div><div class="line">第四行,页面显示i=<span class="number">6</span>,因为输出的是<span class="keyword">this</span>.i,显示成员变量<span class="number">6</span></div><div class="line">第六行,局部变量i变为<span class="number">11</span></div><div class="line">第七行,页面显示<span class="number">11</span></div></pre></td></tr></table></figure></p>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>不可以嵌套注释<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">1.jsp注释:</div><div class="line">    &lt;%-- jsp注释 --%&gt;</div><div class="line">2.java注释:</div><div class="line">    &lt;%-- </div><div class="line">        // java注释</div><div class="line">     --%&gt;</div><div class="line">3.html注释:</div><div class="line">    &lt;!-- html注释 --&gt;</div></pre></td></tr></table></figure></p>
<h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h3 id="page"><a href="#page" class="headerlink" title="page"></a>page</h3><p>作用: 配置JSP信息</p>
<h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page pageEncoding=&quot;UTF-8&quot; contentType=&quot;text/html; charset=UTF-8&quot; %&gt;</div><div class="line">编码属性:</div><div class="line">    pageEncoding=&quot;UTF-8&quot;                    --&gt; 当前文件的编码(源代码的编码);</div><div class="line">    contentType=&quot;text/html; charset=UTF-8&quot;  --&gt; 设置响应头的编码;</div></pre></td></tr></table></figure>
<h4 id="输出缓存"><a href="#输出缓存" class="headerlink" title="输出缓存"></a>输出缓存</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page autoFlush=&quot;true&quot; buffer=&quot;8kb&quot;%&gt;</div><div class="line">缓存属性:</div><div class="line">    autoFlush=&quot;true&quot;                        --&gt; 自动刷新;</div><div class="line">    buffer=&quot;8kb&quot;                            --&gt; 缓存大小;</div></pre></td></tr></table></figure>
<h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;%@page errorPage=&quot;/error.jsp&quot; isErrorPage=&quot;false&quot; %&gt;</div><div class="line">异常属性:</div><div class="line">    errorPage=&quot;/error.jsp&quot;                  --&gt; 错误源,指定处理异常页面;</div><div class="line">    isErrorPage=&quot;false&quot;                     --&gt; 设置是否是处理异常页面;</div><div class="line"></div><div class="line">另一种方式:tomcat处理异常机制(web.xml):</div><div class="line">    &lt;error-page&gt;</div><div class="line">        &lt;error-code&gt;状态码(404,500,...)&lt;/error-code&gt;</div><div class="line">        &lt;location&gt;/路径&lt;/location&gt;</div><div class="line">    &lt;/error-page&gt;</div><div class="line"></div><div class="line">    &lt;error-page&gt;</div><div class="line">        &lt;exception-type&gt;异常类型&lt;/exception-type&gt;</div><div class="line">        &lt;location&gt;/路径&lt;/location&gt;</div><div class="line">    &lt;/error-page&gt;</div></pre></td></tr></table></figure>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language=&quot;java&quot; session=&quot;true&quot; %&gt;</div><div class="line">属性:</div><div class="line">language=&quot;java&quot;                 --&gt; 设置支持语种;</div><div class="line">session=&quot;true&quot;                  --&gt; 设置Session是否可用;</div><div class="line">&lt;%@page import=&quot;java.util.Map&quot;%&gt;</div><div class="line">属性:</div><div class="line">import=&quot;java.util.Map&quot;          --&gt; 导包;</div></pre></td></tr></table></figure>
<h3 id="include"><a href="#include" class="headerlink" title="include"></a>include</h3><p>作用: 引入资源;</p>
<p>静态包含:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;%@ include file=&quot;被包含的文件地址&quot; %&gt;</div><div class="line">    将两个jsp页面合并成一个Servlet,展示到浏览器;</div><div class="line">注意:静态包含两个页面整合在一起,变量声明的问题.两个页面定义变量不能同名</div></pre></td></tr></table></figure></p>
<p>动态包含:动态包含是JSP的动作标签<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;jsp:include page=&quot;被包含的文件地址&quot;&gt;&lt;/jsp:include&gt;</div><div class="line">    将两个jsp页面生成两个Servlet,最总合并成一个Servlet,展示到浏览器;</div></pre></td></tr></table></figure></p>
<h3 id="tablib"><a href="#tablib" class="headerlink" title="tablib"></a>tablib</h3><p>作用: 导入标签库;</p>
<h2 id="九大内置对象"><a href="#九大内置对象" class="headerlink" title="九大内置对象"></a>九大内置对象</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">page            --&gt; this</div><div class="line">config          --&gt; ServletConfig</div><div class="line">application     --&gt; ServletContext</div><div class="line">request         --&gt; HttpServletRequest</div><div class="line">response        --&gt; HttpServletResponse</div><div class="line">session         --&gt; HttpSession</div><div class="line">out             --&gt; JspWriter</div><div class="line">exception       --&gt; Throwable;</div><div class="line">pageContext     --&gt; jsp上下文对象;</div></pre></td></tr></table></figure>
<h3 id="out"><a href="#out" class="headerlink" title="out"></a>out</h3><p>页面输出<br>print(“内容”);        –&gt; 向页面输出数据;<br>flush();              –&gt; 刷新;<br>注意:<br>    1.Servlet缓存区 优先于 jsp缓存区;<br>    2.字节流与字符流不能同时使用;<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;% </div><div class="line">	out.print(<span class="string">"a"</span>);</div><div class="line">	response.getWriter().write(<span class="string">"b"</span>);</div><div class="line">	out.print(<span class="string">"c"</span>);</div><div class="line">%&gt;</div><div class="line">上面代码,页面显示b ac,因为response对象属于Servlet,b存在与Servlet缓存中,</div><div class="line">而out是JSP对象,a和c存在于JSP缓存中,要向页面上显示时,统一合并到Servlet中显示,</div><div class="line">JSP缓存中内容,进入到Servlet缓存,就存在了b之后.最后显示了bac</div><div class="line">&lt;br&gt;</div><div class="line">&lt;% </div><div class="line">	out.print(<span class="string">"a"</span>);</div><div class="line">	out.flush();</div><div class="line">	response.getWriter().write(<span class="string">"b"</span>);</div><div class="line">	out.print(<span class="string">"c"</span>);</div><div class="line">%&gt;</div><div class="line">上面代码,页面显示abc,因为a存入JSP缓存后,直接刷新,刷新后a进入Servlet缓存,</div><div class="line">然后b又存入Servlet缓存,c进入JSP缓存,最后页面要显示时,c进入Servlet缓存,</div><div class="line">显示abc</div></pre></td></tr></table></figure></p>
<h3 id="pageContext"><a href="#pageContext" class="headerlink" title="pageContext"></a>pageContext</h3><p>当前页面的上下文根对象,管理servlet 或者 管理jsp<br>作用:<br>1.可以引用其他八个内置对象<br>    getXxx();<br>2.简化四个域操作(存储/删除数据)<br> (1)默认操作page域:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pageContext.setAttribute(String key,Object obje);</div><div class="line">pageContext.getAttribute(String key);</div></pre></td></tr></table></figure></p>
<p> (2)操作指定域:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">   pageContext.setAttribute(String key,Object obje,<span class="keyword">int</span> scope);</div><div class="line">   pageContext.getAttribute(String key,<span class="keyword">int</span> scope);</div><div class="line">   pageContext.removeAttribute(String key,<span class="keyword">int</span> scope);</div><div class="line">注意: </div><div class="line">	pageContext.removeAttribute(String key):一次删除四大域中指定名称的数据</div></pre></td></tr></table></figure></p>
<p>简化四个域对象的操作,实际上是统一API<br>    setAttribute<br>    getAttribute<br>    removeAttribute<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">向域中存储数据:</div><div class="line">&lt;% pageContext.setAttribute(<span class="string">"name"</span>, <span class="string">"page_geekhoon"</span>, PageContext.PAGE_SCOPE); %&gt; </div><div class="line">&lt;% pageContext.setAttribute(<span class="string">"name"</span>, <span class="string">"request_geekhoon"</span>, PageContext.REQUEST_SCOPE); %&gt;</div><div class="line">&lt;% pageContext.setAttribute(<span class="string">"name"</span>, <span class="string">"session_geekhoon"</span>, PageContext.SESSION_SCOPE); %&gt;</div><div class="line">&lt;% pageContext.setAttribute(<span class="string">"name"</span>, <span class="string">"appliction_geekhoon"</span>, PageContext.APPLICATION_SCOPE); %&gt;</div><div class="line">获取数据:</div><div class="line">&lt;%=pageContext.getAttribute(<span class="string">"name"</span>, PageContext.PAGE_SCOPE) %&gt;</div><div class="line">&lt;%=pageContext.getAttribute(<span class="string">"name"</span>, PageContext.REQUEST_SCOPE) %&gt; </div><div class="line">&lt;%=pageContext.getAttribute(<span class="string">"name"</span>, PageContext.SESSION_SCOPE) %&gt; </div><div class="line">&lt;%=pageContext.getAttribute(<span class="string">"name"</span>, PageContext.APPLICATION_SCOPE) %&gt;</div><div class="line">移除数据:</div><div class="line">&lt;% pageContext.removeAttribute(<span class="string">"name"</span>, PageContext.PAGE_SCOPE); %&gt;</div><div class="line">&lt;% pageContext.removeAttribute(<span class="string">"name"</span>, PageContext.REQUEST_SCOPE); %&gt;</div><div class="line">&lt;% pageContext.removeAttribute(<span class="string">"name"</span>, PageContext.SESSION_SCOPE); %&gt;</div><div class="line">&lt;% pageContext.removeAttribute(<span class="string">"name"</span>, PageContext.APPLICATION_SCOPE); %&gt;</div><div class="line">移除所有数据:</div><div class="line">&lt;% pageContext.removeAttribute(<span class="string">"name"</span>) %&gt;</div></pre></td></tr></table></figure></p>
<p>3.依次从四个域中查找数据<br>    pageContext.findAttribute(String key);<br>    按照从小到大的顺序,依次(page,request,session,application)查找四大域对象数据;</p>
<h2 id="四大域"><a href="#四大域" class="headerlink" title="四大域"></a>四大域</h2><p>域对象:在一定范围内共享数据<br>Servlet的三大域: request session servletContext<br>JSP的四大域: page  request session application<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">page(<span class="keyword">this</span>):                     --&gt; 当前页面共享数据;</div><div class="line">request(HttpServletRequest):    --&gt; 一次请求共享数据;</div><div class="line">session(HttpSession):           --&gt; 一次会话共享数据;</div><div class="line">application(ServletContext)     --&gt; 多个会话共享数据,当前web应用;</div><div class="line">方法:</div><div class="line">    setAttribute(String key,Object obje);</div><div class="line">    getAttribute(String key);</div><div class="line">    removeAttribute(String key);</div></pre></td></tr></table></figure></p>
<p>page代表的是当前的servlet 或者 jsp的页面</p>
<h2 id="EL"><a href="#EL" class="headerlink" title="EL"></a>EL</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>Expression Language,表达式语言.用于访问域中的数据,简化域操作.EL和JSTL完全取代了JSP脚本<br>目的:<br>    用来替换JSP脚本获得域中数据的api</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1.基本语法"></a>1.基本语法</h4><p>   ${对象.key}或${对象[‘key’]};</p>
<h4 id="2-内置对象-11个"><a href="#2-内置对象-11个" class="headerlink" title="2.内置对象(11个)"></a>2.内置对象(11个)</h4><p>EL的11个内置对象:就是字符串,每一个字符串代表特定意义<br>一.与JSP域相关的4个:<br>    1.pageScope<br>    2.requestScope<br>    3.sessionScope<br>    4.applicationScope<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">pageScope           page</div><div class="line">    使用:</div><div class="line">        $&#123;pageScope.key&#125;        &lt;--&gt; pageContext.getAttribute(&quot;key&quot;);</div><div class="line"></div><div class="line">requestScope        request</div><div class="line">    使用:</div><div class="line">        $&#123;requestScope.key&#125;     &lt;--&gt; request.getAttribute(&quot;key&quot;);</div><div class="line"></div><div class="line">sessionScope        session</div><div class="line">    使用:</div><div class="line">        $&#123;sessionScope.key&#125;     &lt;--&gt; session.getAttribute(&quot;key&quot;);</div><div class="line"></div><div class="line">applicationScope    application</div><div class="line">    使用:</div><div class="line">        $&#123;applicationScope.key&#125; &lt;--&gt; application.getAttribute(&quot;key&quot;);</div><div class="line"></div><div class="line">$&#123;key&#125;: 按照从小到大的顺序依次从四个域中取数据(只取一个)</div></pre></td></tr></table></figure></p>
<p>二.请求参数<br>    5.param    获取一个参数<br>    6.paramValues 获取一组参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$&#123;param.参数名&#125;         &lt;--&gt; HttpRequest.getParameter(&quot;参数名&quot;);</div><div class="line">如果获得数组,只能获得数组成员的第一个,否则可以直接显示参数对应的值</div><div class="line"></div><div class="line">$&#123;paramValues.参数名&#125;   &lt;--&gt; HttpRequest.getParameterValues(&quot;参数名&quot;);</div><div class="line">获得是数组地址</div></pre></td></tr></table></figure></p>
<p>三.请求头相关<br>    7.header 获取一个请求头<br>    8.headerValues 获取一组请求头<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$&#123;header.Xxx&#125;       &lt;--&gt; HttpRequest.getHeader(&quot;Xxx&quot;);</div><div class="line">$&#123;header[&apos;Xxx&apos;]&#125; :属性包含&quot;-&quot;时,要用这种方式</div><div class="line">如果获得数组,只能获得数组成员的第一个,否则可以直接显示键对应的值</div><div class="line"></div><div class="line">$&#123;headerValues.Xxx&#125; &lt;--&gt; HttpRequest.getHeaders(&quot;Xxx&quot;);</div><div class="line">$&#123;headerValues[&apos;Xxx&apos;]&#125;</div><div class="line">获得是数组地址</div><div class="line"></div><div class="line">注意:</div><div class="line">\$&#123; header.Accept-Encoding &#125;:前面加上反斜杠(转义),页面直接原样显示:$&#123; header.Accept-Encoding &#125;,</div><div class="line">不加\会报错,因为属性包含&quot;-&quot;</div><div class="line">$&#123; header[&apos;Accept-Encoding&apos;] &#125;: 可以显示数组元素了</div></pre></td></tr></table></figure></p>
<p>四.全局初始化参数<br>    9.intiParam           ServletContext.getInitParam(“Xxx”);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$&#123;initParam.key&#125;    &lt;--&gt; ServletContext.getInitParameter(&quot;key&quot;);</div></pre></td></tr></table></figure></p>
<p>五.cookie<br>    10.cookie<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$&#123;cookie.key&#125;       &lt;--&gt; Cookie.getValue();</div></pre></td></tr></table></figure></p>
<p>六.jsp上下文<br>    11.pageContext<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$&#123;pageContext.key&#125;  &lt;--&gt; pageContext.findAttribute(&quot;key&quot;);</div></pre></td></tr></table></figure></p>
<h4 id="3-获取数据-数据必须在域中"><a href="#3-获取数据-数据必须在域中" class="headerlink" title="3.获取数据(数据必须在域中)"></a>3.获取数据(数据必须在域中)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">a) 字符串:</div><div class="line">    $&#123;key&#125;                  &lt;--&gt; pageContext.findAttribute(&quot;key&quot;);</div><div class="line"></div><div class="line">b) 数组:</div><div class="line">    $&#123;array[index]&#125;</div><div class="line"></div><div class="line">c) List:</div><div class="line">    $&#123;list[index]&#125;</div><div class="line"></div><div class="line">d) Map&lt;String, String&gt;:</div><div class="line">    $&#123;map.key&#125;</div><div class="line"></div><div class="line">e) Map&lt;String, JavaBean&gt;:</div><div class="line">    $&#123;map.key.JavaBean属性名&#125;</div></pre></td></tr></table></figure>
<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">a) 算数运算符:</div><div class="line">    +</div><div class="line">    -</div><div class="line">    *</div><div class="line">    /或div</div><div class="line">    %或mod</div><div class="line"></div><div class="line">b) 比较运算符:</div><div class="line">    &gt;或gt</div><div class="line">    &gt;=或ge</div><div class="line">    &lt;或lt</div><div class="line">    &lt;=或le</div><div class="line">    ==或eq</div><div class="line">    !=或ne</div><div class="line"></div><div class="line">c) 逻辑运算符:</div><div class="line">    &amp;&amp;或and</div><div class="line">    ||或or</div><div class="line">    !或not</div><div class="line"></div><div class="line">d) 三元运算符:</div><div class="line">    表达式 eq 表达式 ? 表达式1 : 表达式2;</div><div class="line"></div><div class="line">e) 是否为空:</div><div class="line">    empty 变量</div></pre></td></tr></table></figure>
<h2 id="JSTL标签库"><a href="#JSTL标签库" class="headerlink" title="JSTL标签库"></a>JSTL标签库</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p>概念: 标准标签库(1.预定义了很多标签;2.标签的规范;)<br>作用: 降低了jsp页面的复杂度,增强了代码的重用性;<br>组成: 由5个不同的标签库组成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Core</div><div class="line">I18N 国际化</div><div class="line">SQL</div><div class="line">XML</div><div class="line">Function</div></pre></td></tr></table></figure></p>
<h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">1.导入jar包(jstl-接口,standard-实现);</div><div class="line">2.在jsp页面中引入标签库;</div><div class="line">    &lt;%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %&gt;</div><div class="line">3.&lt;c:if test=""&gt;&lt;/c:if&gt;:</div><div class="line">    语法:</div><div class="line">        &lt;c:if test="条件"&gt;&lt;/c:if&gt;</div><div class="line"></div><div class="line">    例:</div><div class="line">        &lt;%</div><div class="line">            User user = new User("longlong");</div><div class="line">            pageContext.setAttribute("loginUser",user);</div><div class="line">        %&gt;</div><div class="line">        &lt;c:if test="$&#123;not empty loginUser&#125;"&gt;</div><div class="line">            欢迎您,$&#123;loginUser.username&#125;阁下!</div><div class="line">        &lt;/c:if&gt;</div><div class="line">        &lt;c:if test="$&#123;empty loginUser&#125;"&gt;</div><div class="line">            &lt;a href="index.jsp"&gt;请跳转登录...&lt;/a&gt;</div><div class="line">        &lt;/c:if&gt;</div><div class="line"></div><div class="line">4.&lt;c:forEach items="" var=""&gt;&lt;/c:forEach&gt;</div><div class="line">    语法:</div><div class="line">        &lt;c:forEach items="需要被遍历的对象" var="每次遍历的容器元素(临时存放在page域中的对象)"&gt;&lt;/c:forEach&gt;</div><div class="line"></div><div class="line">    例:</div><div class="line">        &lt;%</div><div class="line">            List&lt;User&gt; userList = new ArrayList&lt;User&gt;();</div><div class="line">            User user01 = new User("baobao01");</div><div class="line">            User user02 = new User("baobao02");</div><div class="line">            User user03 = new User("baobao03");</div><div class="line">            userList.add(user01);</div><div class="line">            userList.add(user02);</div><div class="line">            userList.add(user03);</div><div class="line">            pageContext.setAttribute("userList",userList);</div><div class="line">        %&gt;</div><div class="line">        &lt;c:forEach items="$&#123;userList&#125;" var="user"&gt;</div><div class="line">            $&#123;user.username&#125;</div><div class="line">        &lt;/c:forEach&gt;</div><div class="line"></div><div class="line">    普通循环:</div><div class="line">        &lt;c:forEach begin="开始角标" end="结束" step="步长" var="变量" varStatus="遍历对象的当前状态:count(计数,当前是第几个元素)/index(脚标)"&gt;&lt;/c:forEach&gt;</div><div class="line"></div><div class="line">    例:</div><div class="line">        &lt;table style="border-left: 1.5px solid red;border-bottom: 1.5px solid red;" varStatus="count"&gt;</div><div class="line">            &lt;c:forEach begin="1" end="9" step="1" var="i"&gt;</div><div class="line">                &lt;tr&gt;    </div><div class="line">                    &lt;td&gt;$&#123;count&#125;&lt;/td&gt;</div><div class="line">                    &lt;c:forEach begin="1" end="$&#123;i&#125;" step="1" var="j"&gt;</div><div class="line">                        &lt;td style="border-bottom: 2px solid blue; font-weight: bolder;"&gt;&amp;nbsp;$&#123;i&#125; * $&#123;j&#125; = $&#123;i * j&#125;&amp;nbsp;&lt;/td&gt;</div><div class="line">                    &lt;/c:forEach&gt;</div><div class="line">                &lt;/tr&gt;</div><div class="line">            &lt;/c:forEach&gt;</div><div class="line">        &lt;/table&gt;</div></pre></td></tr></table></figure>
<h2 id="JSP模式"><a href="#JSP模式" class="headerlink" title="JSP模式"></a>JSP模式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">MVC思想: 业务逻辑与显示页面相分离</div><div class="line">    M:  Model(模型:1.封装数据 2.处理数据;);                                   --&gt; javaBean,Service层,Dao层;</div><div class="line">    V:  View(视图:1.解析模式,展示数据);                                       --&gt; jsp;</div><div class="line">    C:  Controller(控制器:1.获得用户请求数据 2.调用模型 3.选择视图响应结果);       --&gt; Servlet;</div><div class="line"></div><div class="line">三层架构:</div><div class="line">    web(表示层):</div><div class="line">        1.接收请求参数;</div><div class="line">        2.调用service层,封装数据,处理数据;</div><div class="line">        3.完成响应;</div><div class="line"></div><div class="line">    service(业务逻辑层):</div><div class="line">        1.处理业务;</div><div class="line"></div><div class="line">    dao(数据库访问层):</div><div class="line">        1.访问数据库;</div><div class="line"></div><div class="line">    jsp(视图);</div><div class="line"></div><div class="line">    包结构命名(简单):</div><div class="line">        cn.itheima              公司域名倒写;</div><div class="line">        cn.itheima.web.servlet  web层实现;</div><div class="line">        cn.itheima.service      service层实现;</div><div class="line">        cn.itheima.dao          dao层实现;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;JSP(Java Server Pages)是建立在Servlet规范之上的动态网页开发技术(实质是一个Servlet)&lt;br&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="https://geekhoon.github.io/categories/JavaWeb/"/>
    
    
      <category term="前端开发" scheme="https://geekhoon.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="Tomcat" scheme="https://geekhoon.github.io/tags/Tomcat/"/>
    
      <category term="HTTP" scheme="https://geekhoon.github.io/tags/HTTP/"/>
    
      <category term="JSP" scheme="https://geekhoon.github.io/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>Cookie&amp;Session</title>
    <link href="https://geekhoon.github.io/2017/04/07/JavaWeb-10-Cookie-Session/"/>
    <id>https://geekhoon.github.io/2017/04/07/JavaWeb-10-Cookie-Session/</id>
    <published>2017-04-07T08:13:10.000Z</published>
    <updated>2017-04-09T00:41:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><p>用户打开浏览器访问某网站,做出一系列的请求及响应,直至用户退出浏览器的整个过程,视为一次”会话”<br><a id="more"></a></p>
<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>是客服端的会话技术, 存取数据的对象</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>1.会话级别:<br>   Cookie默认是会话级别的,即会话结束,Cookie失效,通常会话结束即浏览器关闭<br>2.持久级别:<br>   可以通过setMaxAge(int code)(单位秒)方法设置Cookie的生命;<br>   当code &gt; 0时,代表Cookie有效时间是code秒<br>   当code = 0时,代表删除Cookie,Cookie失效;<br>   当code &lt; 0时,代表默认状态,即会话级别<br>注意:<br>(1)不设置setMaxAge,Cookie默认是存储在浏览器内存,会话结束即关闭浏览器时,Cookie就会消亡<br>(2)设置setMaxAge,在设定时间内关闭浏览器,浏览器会将Cookie序列化存储到磁盘,在过期时间前再次打开浏览器,浏览器存储的还是当前Cookie</p>
<h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Cookie(String name,String value);           --&gt; 创建Cookie;</div><div class="line">setMaxAge(<span class="keyword">int</span> code)                             --&gt; 设置Cookie的生命;</div><div class="line">HttpServletResponse.addCookie(Cookie cookie);   --&gt; 向客户端设置Cookie;</div><div class="line">HttpServletReqeust.getCookies();                --&gt; 获取请求头中的所有Cookie;</div><div class="line">Cookie.getName();                               --&gt; 获取Cookie名称;</div><div class="line">Cookie.setPath(String uri);                     --&gt; 设置Cookie的允许访问路径;</div><div class="line">Cookie.setValue(String newValue);               --&gt; 重置Cookie值;</div><div class="line">Cookie.getValue();                              --&gt; 获取Cookie值;</div></pre></td></tr></table></figure>
<h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">(<span class="number">1</span>)服务器创建一个Cookie </div><div class="line">	Cookie c = <span class="keyword">new</span> Cookie(键,值);</div><div class="line">(<span class="number">2</span>)服务器发送Cookie到浏览器</div><div class="line">	response.addCookie(c);</div><div class="line">	在响应头中设置Cookie: set-Cookie: <span class="string">"键=值"</span></div><div class="line">(<span class="number">3</span>)浏览器解析响应头,取出Cookie信息,并存储</div><div class="line">(<span class="number">4</span>)接下来,再请求服务器时,请求头携带Cookie信息到服务器,格式Cookie:<span class="string">"键=值"</span></div><div class="line">(<span class="number">5</span>)服务器获取并处理Cookie</div><div class="line">	Cookies[] cs = request.getCookies();<span class="comment">//第一次访问,每次Cookie,cs为null</span></div><div class="line">	<span class="keyword">if</span>(cs != <span class="keyword">null</span>)&#123;</div><div class="line">		<span class="keyword">for</span>(Cookie c : cs)</div><div class="line">		&#123;</div><div class="line">			<span class="comment">//获取Cookie信息</span></div><div class="line">			c.getName() ---获取键</div><div class="line">			c.getValue() ---获取值</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h4 id="Cookie重名问题"><a href="#Cookie重名问题" class="headerlink" title="Cookie重名问题"></a>Cookie重名问题</h4><p>需求: 浏览器可以存储同名Cookie<br>实现:<br>   1.为同名Cookie设置不同Path标记<br>   2.所属站点不同(站点就是访问的域名)<br>   以上条件满足一个即可<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">默认:<span class="comment">//Cookie中只存储了A=2</span></div><div class="line">Cookie c1 = <span class="keyword">new</span> Cookie(<span class="string">"A"</span>,<span class="string">"1"</span>);</div><div class="line">Cookie c2 = <span class="keyword">new</span> Cookie(<span class="string">"A"</span>,<span class="string">"2"</span>);</div><div class="line">response.addCookie(c1);</div><div class="line">response.addCookie(c2);</div><div class="line"></div><div class="line">设置路径:</div><div class="line">Cookie c1 = <span class="keyword">new</span> Cookie(<span class="string">"A"</span>,<span class="string">"1"</span>);</div><div class="line">Cookie c2 = <span class="keyword">new</span> Cookie(<span class="string">"A"</span>,<span class="string">"2"</span>);</div><div class="line">c1.setPath(<span class="string">"项目名/test1"</span>);</div><div class="line">c2.setPath(<span class="string">"项目名/test2"</span>);</div><div class="line">response.addCookie(c1);</div><div class="line">response.addCookie(c2);</div></pre></td></tr></table></figure></p>
<p>Path值设置规则:<br>(1)设置Cookie允许访问的路径,设置的路径以及子路径都可以允许访问<br>   setPath(“/a/b/c”) 只有完全匹配该路径的Servlet或当前路径的子级Servlet才可以获取Cookie<br>   /a/b/c/hehe   true<br>   /a/b/c/d/hha  true<br>   /a/c/heh      false<br>(2)setPath(“/“):当前Tomcat下的所有项目都可以访问该Cookie</p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>1.Cookie存储在浏览器中<br>2.每个浏览器都有自己存储Cookie的策略,不同浏览器中Cookie互不影响<br>3.当前Cookie设置时,如果键名相同,后发送的Cookie,会覆盖之前发送的Cookie<br>4.浏览器关闭后重启,认为是第一次访问,因为关闭浏览器时,会话结束,浏览器保存的Cookie消亡了<br>  解决:浏览器关闭时.序列化Cookie,重启服务器时,读取Cookie<br>  实现:为Cookie设置一个有效时间(setMaxAge),在时间内关闭浏览器,浏览器会将Cookie序列化存储到磁盘</p>
<h3 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h3><p>1.Cookie除了name value maxage path 还有一些可选属性,可能有bug,不建议使用<br>2.理论上,浏览器端保存时,为一台服务器最多提供的空间是支持20个Cookie;<br>  理论上,浏览器最多可以存储300个Cookie<br>3.Cookie存储的信息量最好控制在4Kb之内,实际上只存少量数据<br>4.Cookie可以唯一的标志客户端,常用于管理Session(重要)</p>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>访问一个页面,如果是第一次访问,输出文本:这是第一次访问<br>如果不是第一次访问,输出上次的访问时间</p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.geekhoon.demo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Servlet implementation class Welcome</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Welcome</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line"></div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">		</div><div class="line">		response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</div><div class="line">		PrintWriter out = response.getWriter();</div><div class="line">		</div><div class="line">		<span class="comment">//创建Cookie对象</span></div><div class="line">		Cookie c = <span class="keyword">new</span> Cookie(<span class="string">"time"</span>,System.currentTimeMillis()+<span class="string">""</span>);</div><div class="line">		</div><div class="line">		<span class="comment">//c.setMaxAge(60);</span></div><div class="line">		</div><div class="line">		<span class="comment">//服务器获取浏览器传来的Cookie</span></div><div class="line">		Cookie[] cs = request.getCookies();</div><div class="line">		</div><div class="line">		<span class="comment">//不为null,说明不是第一次访问</span></div><div class="line">		<span class="keyword">if</span> (cs != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">for</span> (Cookie cookie : cs) &#123;</div><div class="line">				<span class="comment">//取出所有Cookie后,看有没有一个Cookie是记录上次访问时间的,即键是time的</span></div><div class="line">				<span class="keyword">if</span> (<span class="string">"time"</span>.equals(cookie.getName())) &#123;</div><div class="line">					out.write(<span class="string">"上次访问时间: "</span>+cookie.getValue());</div><div class="line">					<span class="comment">//将Cookie发送到浏览器,覆盖上一次time里的值</span></div><div class="line">					response.addCookie(c);</div><div class="line">					<span class="keyword">return</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;	</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="comment">//为null,说明是第一次访问</span></div><div class="line">			out.write(<span class="string">"这是第一次访问"</span>);</div><div class="line">			<span class="comment">//将Cookie发送到浏览器</span></div><div class="line">			response.addCookie(c);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		doGet(request, response);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>是服务器端的会话技术, 存取数据的对象</p>
<h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p>创建:<br>   服务器启动,浏览器访问服务器,第一次调用HttpServletRequest.getSession(),Session生命开始;<br>使用:<br>   以后再调用 request.getSession() —– 不会再创建，而是查找现成的<br>销毁:<br>   a) 超时,默认生命为30分钟(会话结束,Session不会消亡,只是浏览器中Cookie的JSessionID失效,再次会话,找不到该Session.Session会在默认30分钟后消亡);<br>   b) 调用invalidate(),结束Session;<br>   c) 非正常关闭服务器;<br>注意:<br>    Session是在服务器内保存的,暴力关闭,内存中中数据(包括Session)直接被释放,而正常关闭时,把内存中的Session系列化到磁盘上,下次开启(要保证当前会话不关闭,即浏览器没关的情况下),从磁盘读取到内存,Session没有消亡</p>
<h4 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">HttpServletRequest.getSession();                    --&gt; 获取Session;</div><div class="line">HttpSession.setAttribute(String name , Object obj); --&gt; 设置数据;</div><div class="line">HttpSession.getAttribute(String name);              --&gt; 获取数据值;</div><div class="line">HttpSession.removeAttribute(String name);           --&gt; 删除数据;</div></pre></td></tr></table></figure>
<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>1.可以实现不同Servlet之间的共享<br>2.一个浏览器一次会话中多次访问一个Servlet,只会创建一个Session对象<br>  多个浏览器访问同一个Servlet，每个浏览器都会创建一个对应的Session对象<br>3.一个浏览器不同的会话,每次会话都会创建一个Session对象<br>解释:JSESSIONID是tomcat生成的,使用的是默认的生命周期,会话结束时,cookie消亡,再次会话时,之前的Session还在,只不过之前的JSESSIONID不存在了,找不到对应的Session了</p>
<h4 id="流程-1"><a href="#流程-1" class="headerlink" title="流程"></a>流程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">(<span class="number">1</span>)第一次访问服务器的一个Servlet,服务器创建一个HttpSession</div><div class="line">HttpSession s = request.getSession();</div><div class="line">(<span class="number">2</span>)往Session中存储数据</div><div class="line">s.setAttribute(<span class="string">"键"</span>,值);  --- 值是Object类型</div><div class="line">(<span class="number">3</span>)服务器创建一个Cookie并发送到浏览器  (给银行卡)</div><div class="line">JSESSIONID = <span class="string">"字符序列"</span>  ---- 细节隐藏</div><div class="line">(<span class="number">4</span>)浏览器存储Cookie</div><div class="line">(<span class="number">5</span>)再次访问服务器,浏览器携带Cookie到服务器</div><div class="line">(<span class="number">6</span>)服务器获取浏览器的Session对象 -----语法一样,根据Cookie的字符序列,查找Session对象</div><div class="line">HttpSession s = request.getSession();</div><div class="line">(<span class="number">7</span>)使用Session</div><div class="line">	Object value = s.getAttribute(<span class="string">"键"</span>);</div></pre></td></tr></table></figure>
<p>情景:<br>1.小明同学(浏览器)到银行(服务器)的开户窗口(KaiHu_Servlet)办理一张银行卡(Cookie),开户后,银行保存了该卡对应的档案(Session),银行给了小明这张银行卡;<br>2.下一次,小明需要取钱的时候,小明拿着那张银行卡来到银行的取钱窗口(QuQian_Servlet),取钱窗口工作人员根据银行卡查找到对应档案,取走钱<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KaiHu</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">		HttpSession s = request.getSession();</div><div class="line">		s.setAttribute(<span class="string">"money"</span>, <span class="number">1000</span>);</div><div class="line">		System.out.println(s.getAttribute(<span class="string">"money"</span>));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">		doGet(request, response);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuQian</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line">       </div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">		HttpSession s = request.getSession();</div><div class="line">		Object money = s.getAttribute(<span class="string">"money"</span>);</div><div class="line">		System.out.println(money);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">		doGet(request, response);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面代码牵涉一个问题:一个Servlet中可以创建多个Session对象吗?<br>就好比一个取钱窗口中可以存多份档案吗?回答这个问题需要一个前提:就是用户.如果只有一个用户,只能保存一个银行卡档案,不管用户来几次,拿的都是同一张银行卡,访问都是同一份档案,取得都是你本人账户下的钱;但是如果是多个用户,就可以有多个的银行卡,分别可以取各自银行账户里的钱<br>正经的解释:<br>一个浏览器一次会话中多次访问一个Servlet,只会创建一个Session对象<br>多个浏览器访问同一个Servlet，每个浏览器都会创建一个对应的Session对象</p>
<h4 id="Session与Cookie关系"><a href="#Session与Cookie关系" class="headerlink" title="Session与Cookie关系"></a>Session与Cookie关系</h4><p>Session和Cookie之间是通过ID关联的,每一个Sesssion对象都有一个ID (getID()),这个ID值和Cookie中JSESSIONID的值一样<br>Cookie存储在浏览器,Session存储在服务器<br>Cookie有大小和个数限制,Session没有大小和个数限制</p>
<h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>.创建动态Web项目;</div><div class="line"><span class="number">2</span>.导入准备好的页面资源,同时对页面做修改;</div><div class="line"><span class="number">3</span>.创建CodeServlet:</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">            <span class="comment">// 1 高宽，数据</span></div><div class="line">            <span class="keyword">int</span> height = <span class="number">30</span>;</div><div class="line">            <span class="keyword">int</span> width = <span class="number">60</span>;</div><div class="line">            String data = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"</span>;</div><div class="line">            Random random = <span class="keyword">new</span> Random();</div><div class="line"></div><div class="line">            <span class="comment">// 2 核心类</span></div><div class="line">            BufferedImage image = <span class="keyword">new</span> BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);</div><div class="line"></div><div class="line">            <span class="comment">// 3 获得画板</span></div><div class="line">            Graphics g = image.getGraphics();</div><div class="line"></div><div class="line">            <span class="comment">// 4 绘制矩形(默认黑色)</span></div><div class="line">            g.setColor(Color.BLACK);</div><div class="line">            g.fillRect(<span class="number">0</span>, <span class="number">0</span>, width, height);</div><div class="line"></div><div class="line">            <span class="comment">// 5 白色矩形</span></div><div class="line">            g.setColor(Color.WHITE);</div><div class="line">            g.fillRect(<span class="number">1</span>, <span class="number">1</span>, width - <span class="number">2</span>, height - <span class="number">2</span>);</div><div class="line"></div><div class="line">            <span class="comment">// 设置字体</span></div><div class="line">            g.setFont(<span class="keyword">new</span> Font(<span class="string">"宋体"</span>, Font.BOLD, <span class="number">20</span>));</div><div class="line"></div><div class="line">            String code = <span class="string">""</span>;</div><div class="line"></div><div class="line">            <span class="comment">// 6 随机4个字符</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</div><div class="line">                <span class="comment">// 随机颜色</span></div><div class="line">                g.setColor(<span class="keyword">new</span> Color(random.nextInt(<span class="number">255</span>), random.nextInt(<span class="number">255</span>), random.nextInt(<span class="number">255</span>)));</div><div class="line">                <span class="comment">// 截取一个字符</span></div><div class="line">                <span class="keyword">int</span> index = random.nextInt(data.length());</div><div class="line">                String str = data.substring(index, index + <span class="number">1</span>);</div><div class="line">                <span class="comment">// 将字符写入到图片</span></div><div class="line">                g.drawString(str, (i + <span class="number">1</span>) * (width / <span class="number">6</span>), <span class="number">20</span>);</div><div class="line"></div><div class="line">                code += str;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            HttpSession session = request.getSession();</div><div class="line">            session.setAttribute(<span class="string">"code"</span>, code);</div><div class="line"></div><div class="line">            <span class="comment">// 将图片响应给浏览器</span></div><div class="line">            ImageIO.write(image, <span class="string">"jpg"</span>, response.getOutputStream());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">            doGet(request, response);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="number">4</span>.创建UserLoginServlet:</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserLoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">			<span class="comment">//1、读取客户录入的验证码</span></div><div class="line">            String code = request.getParameter(<span class="string">"code"</span>);</div><div class="line">			<span class="comment">//2、比较Code生成的验证码和录入的是否一样</span></div><div class="line">            HttpSession session = request.getSession();</div><div class="line"></div><div class="line">            response.setContentType(<span class="string">"text/html; charset=UTF-8"</span>);</div><div class="line">            response.setCharacterEncoding(<span class="string">"UTF-8"</span>);</div><div class="line">            <span class="keyword">if</span> (session.getAttribute(<span class="string">"code"</span>).equalsIgnoreCase(code)) &#123;</div><div class="line">                response.getWriter().write(<span class="string">"验证码正确"</span>);</div><div class="line"><span class="comment">//从Session 删除验证码,否则退回注册页面时,页面上验证码的值与图片还是对应的,点击注册还是验证码正确</span></div><div class="line">				session.removeAttribute(<span class="string">"code"</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                response.getWriter().write(<span class="string">"验证码错误"</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">            doGet(request, response);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="三大域"><a href="#三大域" class="headerlink" title="三大域"></a>三大域</h2><p>域对象: 在一定范围内共享数据<br>共有API:<br>    setAttribute<br>    getAttribute<br>    removeAttribute</p>
<h3 id="request"><a href="#request" class="headerlink" title="request"></a>request</h3><p>ServletRequest</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;会话&quot;&gt;&lt;a href=&quot;#会话&quot; class=&quot;headerlink&quot; title=&quot;会话&quot;&gt;&lt;/a&gt;会话&lt;/h2&gt;&lt;p&gt;用户打开浏览器访问某网站,做出一系列的请求及响应,直至用户退出浏览器的整个过程,视为一次”会话”&lt;br&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="https://geekhoon.github.io/categories/JavaWeb/"/>
    
    
      <category term="前端开发" scheme="https://geekhoon.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="Tomcat" scheme="https://geekhoon.github.io/tags/Tomcat/"/>
    
      <category term="HTTP" scheme="https://geekhoon.github.io/tags/HTTP/"/>
    
      <category term="Cookie&amp;Session" scheme="https://geekhoon.github.io/tags/Cookie-Session/"/>
    
  </entry>
  
  <entry>
    <title>HttpServletRequest</title>
    <link href="https://geekhoon.github.io/2017/04/06/JavaWeb-09-HttpServletRequest/"/>
    <id>https://geekhoon.github.io/2017/04/06/JavaWeb-09-HttpServletRequest/</id>
    <published>2017-04-06T09:17:50.000Z</published>
    <updated>2017-04-13T07:38:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>HttpServletRequest对象是封装请求消息的对象,用于操作请求消息,是Tomcat创建和管理的<br><a id="more"></a></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>操作请求行:<br>    getMethod();        –&gt; 获取请求方式;<br>    getContextPath();    –&gt; 获取项目名;<br>    getRemoteAddr();    –&gt; 获取客户端的ip地址;<br>    getServletPath();    –&gt; 获取url-pattern;</p>
<p>操作请求参数:<br>    getParameter(String name);    –&gt; 通过参数名获取第一个参数值;<br>    getParameterValues(String name);    –&gt; 通过参数名获取一组参数值;<br>    getParameterMap();                    –&gt; 获取所有参数(key:参数名;value:参数值);</p>
<p>解决请求中文乱码问题:<br>    Post方式:<br>            setCharacterEncoding(“字符集”);<br>    Get方式:<br>            new String(str.getBytes(“ISO8859-1”),”UTF-8”);</p>
<p>传递数据:<br>    setAttribute(String name , Object obj);    –&gt; 存数据;<br>    getAttribute(String name);                –&gt; 获取数据;<br>    removeAttribute(String name);            –&gt; 移除数据;<br>    getAttributeNames();                    –&gt; 获取所有数据名;</p>
<h2 id="请求处理"><a href="#请求处理" class="headerlink" title="请求处理"></a>请求处理</h2><h3 id="请求重发"><a href="#请求重发" class="headerlink" title="请求重发"></a>请求重发</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">HttpRequest(请求转发):</div><div class="line">    getRequestDispatcher(String <span class="string">"Servlet的路径"</span>).forward(HttpServletRequest request,HttpServletResponse response);</div></pre></td></tr></table></figure>
<h3 id="请求重定向"><a href="#请求重定向" class="headerlink" title="请求重定向"></a>请求重定向</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">HttpResponse(请求重定向):</div><div class="line">    sendRedirect(String <span class="string">"资源路径"</span>);</div></pre></td></tr></table></figure>
<h3 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h3><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>1.<br>请求转发: 发生在服务器,只能转发服务器内部资源<br>重定向: 发生在客户端,可以重定向到任意资源<br>2.<br>请求转发: 最后执行的Servlet的路径在浏览器地址栏显示,地址栏地址不变<br>重定向: 最后访问的Servlet的路径不在地址栏显示,地址栏地址会发生变化<br>3.<br>请求转发: 只有一次请求,一次响应<br>重定向: 重定向次数+1次请求   重定向次数+1次响应<br>4.<br>请求转发: 路径不需要加项目名: /Servlet名<br>重定向: 路径需要加项目名: /项目名/Servlet名<br>5.<br>请求转发: 当前要转发的Servlet不能写出数据,写出也不会传递到客户端,转发之前,开启了流,流之前如果没有设置编码集还会产生乱码<br>重定向: 可以写出数据,但是意义不大,由于浏览器执行速度快,当前数据基本无法显示(这是合法操作)</p>
<h2 id="路径问题-—–"><a href="#路径问题-—–" class="headerlink" title="路径问题 ## —–"></a>路径问题 ## —–</h2><p> A、表单中使用 action  ——-  有项目名<br> B、超链接中使用了 ———— 有项目名<br> C、ServletContext.getResourceAsStream(“资源路径”); —— 没有项目名<br> D、请求转发  —————– 没有项目名<br> E、重定向 ——————- 有项目名</p>
<p> 记住：<br>  给浏览器用的都有项目名<br>  给服务器用的都没有项目名</p>
<h2 id="BeanUtils-——–反射"><a href="#BeanUtils-——–反射" class="headerlink" title="BeanUtils ## ——–反射"></a>BeanUtils ## ——–反射</h2><p>BeanUtils是将数据封装成JavaBean对象</p>
<h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">BeanUtils.populate(Object bean,Map&lt;String,String[] properties);</div><div class="line"></div><div class="line">ConvertUtils:</div><div class="line">    是什么:</div><div class="line">        格式转换器;</div><div class="line"></div><div class="line">    作用:</div><div class="line">        转换数据格式;</div><div class="line"></div><div class="line">    使用:(固定格式)</div><div class="line">        <span class="comment">// 1) 创建日期转换器;</span></div><div class="line">        DateConverter dateConverter = <span class="keyword">new</span> DateConverter();</div><div class="line">        <span class="comment">// 2) 设置当前日期转换的字符串格式;</span></div><div class="line">        dateConverter.setPattern(<span class="string">"yyyy-MM-dd"</span>);</div><div class="line">        <span class="comment">// 3) 注册日期转换器;</span></div><div class="line">        ConvertUtils.register(dateConverter, Date.class);</div></pre></td></tr></table></figure>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanUtils</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">populate</span><span class="params">(Object object, Map&lt;String, String[]&gt; properties)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// 1) 创建日期转换器;</span></div><div class="line">            DateConverter dateConverter = <span class="keyword">new</span> DateConverter();</div><div class="line">            <span class="comment">// 2) 设置当前日期转换的字符串格式;</span></div><div class="line">            dateConverter.setPatterns(<span class="keyword">new</span> String[] &#123; <span class="string">"yyyy-MM-dd"</span>, <span class="string">"yyyy/MM/dd"</span> &#125;);</div><div class="line">            <span class="comment">// 3) 注册日期转换器;</span></div><div class="line">            ConvertUtils.register(dateConverter, Date.class);</div><div class="line"></div><div class="line">            BeanUtils.populate(object, properties);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">	----------------------------使用反射-------------------------------</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">populate</span><span class="params">(Class&lt;T&gt; clazz, Map&lt;String, String[]&gt; properties)</span> </span>&#123;</div><div class="line">        T bean = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            bean = clazz.newInstance();</div><div class="line"></div><div class="line">            <span class="comment">// 1) 创建日期转换器;</span></div><div class="line">            DateConverter dateConverter = <span class="keyword">new</span> DateConverter();</div><div class="line">            <span class="comment">// 2) 设置当前日期转换的字符串格式;</span></div><div class="line">            dateConverter.setPatterns(<span class="keyword">new</span> String[] &#123; <span class="string">"yyyy-MM-dd"</span>, <span class="string">"yyyy/MM/dd"</span> &#125;);</div><div class="line">            <span class="comment">// 3) 注册日期转换器;</span></div><div class="line">            ConvertUtils.register(dateConverter, Date.class);</div><div class="line"></div><div class="line">            BeanUtils.populate(bean, properties);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> bean;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p> A、提供一个注册页面<br> B、注册页面客户可以录入个人信息（账号 密码 姓名 性别 ….）<br> C、单击注册按钮，跳转到一个Servlet,这个 Servlet要注册个人信息<br> D、根据最后的注册结果给出对应的提示</p>
<h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><h4 id="1-导入jar包及配置文件"><a href="#1-导入jar包及配置文件" class="headerlink" title="1.导入jar包及配置文件"></a>1.导入jar包及配置文件</h4><p>jar包: c3p0,dbutils,mysql,BeanUtils<br>配置文件: c3p0-config.xml</p>
<h4 id="2-创建数据库-表"><a href="#2-创建数据库-表" class="headerlink" title="2.创建数据库,表"></a>2.创建数据库,表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">database</span> my;</div><div class="line"><span class="keyword">use</span> my;</div><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</div><div class="line"> uid <span class="built_in">varchar</span>(<span class="number">32</span>) primary <span class="keyword">key</span>,</div><div class="line"> username <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">unique</span>,</div><div class="line"> <span class="keyword">password</span> <span class="built_in">varchar</span>(<span class="number">100</span>),</div><div class="line"> email <span class="built_in">varchar</span>(<span class="number">100</span>),</div><div class="line"> <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">100</span>),</div><div class="line"> sex <span class="built_in">varchar</span>(<span class="number">10</span>)</div><div class="line">);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span> (<span class="string">'00a'</span>,<span class="string">'admin'</span>,<span class="string">'123'</span>,<span class="string">'admin@163.com'</span>,<span class="string">'管理员'</span>,<span class="string">'man'</span>);</div></pre></td></tr></table></figure>
<h4 id="3-注册界面"><a href="#3-注册界面" class="headerlink" title="3.注册界面"></a>3.注册界面</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/day15/Servlet"</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"username"</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-6"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"inputPassword3"</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-6"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"inputPassword3"</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"confirmpwd"</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>确认密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-6"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"confirmpwd"</span> <span class="attr">placeholder</span>=<span class="string">"请输入确认密码"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"inputEmail3"</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-6"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"inputEmail3"</span> <span class="attr">placeholder</span>=<span class="string">"Email"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"usercaption"</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-6"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"usercaption"</span> <span class="attr">placeholder</span>=<span class="string">"请输入姓名"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group opt"</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"inlineRadio1"</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">label</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-6"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"radio-inline"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">id</span>=<span class="string">"inlineRadio1"</span> <span class="attr">value</span>=<span class="string">"boy"</span>&gt;</span> 男</div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"radio-inline"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">id</span>=<span class="string">"inlineRadio2"</span> <span class="attr">value</span>=<span class="string">"girl"</span>&gt;</span> 女</div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>		</div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-offset-2 col-sm-10"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>  <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">value</span>=<span class="string">"注册"</span> <span class="attr">border</span>=<span class="string">"0"</span></span></div><div class="line">	    <span class="attr">style</span>=<span class="string">"background: url('./images/register.gif') no-repeat scroll 0 0 rgba(0, 0, 0, 0);</span></div><div class="line">	    height:35px;width:100px;color:white;"&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="4-构建代码结构"><a href="#4-构建代码结构" class="headerlink" title="4.构建代码结构"></a>4.构建代码结构</h4><p>com.geekhoon.servlet<br>com.geekhoon.service<br>com.geekhoon.dao<br>com.geekhoon.domain<br>com.geekhoon.utils</p>
<h4 id="5-domain"><a href="#5-domain" class="headerlink" title="5.domain"></a>5.domain</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String uid;</div><div class="line">	<span class="keyword">private</span> String username;</div><div class="line">	<span class="keyword">private</span> String password;</div><div class="line">	<span class="keyword">private</span> String email;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> String sex;</div><div class="line"></div><div class="line">	<span class="comment">//无参构造</span></div><div class="line"></div><div class="line">	<span class="comment">//get&amp;set</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="6-servlet"><a href="#6-servlet" class="headerlink" title="6.servlet"></a>6.servlet</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.geekhoon.servlet;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.geekhoon.domain.User;</div><div class="line"><span class="keyword">import</span> com.geekhoon.service.UserService;</div><div class="line"><span class="keyword">import</span> com.geekhoon.utils.MyBeanUtils;</div><div class="line"><span class="keyword">import</span> com.geekhoon.utils.UUIDUtils;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Servlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">		User u = <span class="keyword">new</span> User();</div><div class="line"></div><div class="line">		MyBeanUtils.populate(u, request.getParameterMap());</div><div class="line">		u.setUid(UUIDUtils.getId());</div><div class="line">		UserService us = <span class="keyword">new</span> UserService();</div><div class="line">		<span class="keyword">boolean</span> flag = us.find(u);</div><div class="line">		String msg = <span class="string">""</span>;</div><div class="line">		<span class="keyword">if</span>(flag)&#123;</div><div class="line">			msg = <span class="string">"成功success"</span>;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			msg = <span class="string">"失败fail"</span>;</div><div class="line">		&#125;</div><div class="line">		request.setAttribute(<span class="string">"msg"</span>, msg);</div><div class="line">		</div><div class="line">		request.getRequestDispatcher(<span class="string">"/ShowMsg"</span>).forward(request, response);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">		doGet(request, response);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.geekhoon.servlet;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShowMsg</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">		response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</div><div class="line">		<span class="comment">//response.setContentType("text/html,charset=utf-8");</span></div><div class="line">		PrintWriter out = response.getWriter();</div><div class="line">		out.write(<span class="string">"&lt;html&gt;"</span>);</div><div class="line">		out.write(<span class="string">"&lt;head&gt;"</span>);</div><div class="line">		out.write(<span class="string">"&lt;title&gt;"</span>);</div><div class="line">		out.write(<span class="string">"提示信息"</span>);</div><div class="line">		out.write(<span class="string">"&lt;/title&gt;"</span>);</div><div class="line">		out.write(<span class="string">"&lt;/head&gt;"</span>);</div><div class="line">		out.write(<span class="string">"&lt;body&gt;"</span>);</div><div class="line">		out.write(request.getAttribute(<span class="string">"msg"</span>).toString());</div><div class="line">		out.write(<span class="string">"&lt;/body&gt;"</span>);</div><div class="line">		out.write(<span class="string">"&lt;/html&gt;"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">		doGet(request, response);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="7-service"><a href="#7-service" class="headerlink" title="7.service"></a>7.service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.geekhoon.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.geekhoon.dao.UserDao;</div><div class="line"><span class="keyword">import</span> com.geekhoon.domain.User;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * Service层价值: 为dao层进行逻辑划分</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">find</span><span class="params">(User u)</span> </span>&#123;</div><div class="line">		</div><div class="line">		UserDao ud = <span class="keyword">new</span> UserDao();</div><div class="line">		<span class="keyword">if</span>(ud.find(u))&#123;<span class="comment">//返回true,说明已存在,返回false</span></div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="keyword">boolean</span> b = ud.save(u);</div><div class="line">			<span class="keyword">return</span> b;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="8-dao"><a href="#8-dao" class="headerlink" title="8.dao"></a>8.dao</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.geekhoon.dao;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.commons.dbutils.QueryRunner;</div><div class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanHandler;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.geekhoon.domain.User;</div><div class="line"><span class="keyword">import</span> com.geekhoon.utils.C3P0Utils;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</div><div class="line">	QueryRunner qr = <span class="keyword">new</span> QueryRunner(C3P0Utils.getDs());</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">find</span><span class="params">(User u)</span> </span>&#123;</div><div class="line">		User data = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			data = qr.query(<span class="string">"SELECT * FROM user WHERE username = ?"</span>, <span class="keyword">new</span> BeanHandler&lt;User&gt;(User.class),</div><div class="line">					u.getUsername());</div><div class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> data != <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">save</span><span class="params">(User u)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> line = <span class="number">0</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			line = qr.update(<span class="string">"INSERT INTO user VALUES (?,?,?,?,?,?)"</span>, <span class="keyword">new</span> Object[] &#123; u.getUid(), u.getUsername(),</div><div class="line">					u.getPassword(), u.getEmail(), u.getName(), u.getSex() &#125;);</div><div class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> line &gt; <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="9-utils"><a href="#9-utils" class="headerlink" title="9.utils"></a>9.utils</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.geekhoon.utils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.sql.Connection;</div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.sql.DataSource;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C3P0Utils</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> DataSource ds = <span class="keyword">new</span> ComboPooledDataSource();</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDs</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> ds;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</div><div class="line">		<span class="keyword">return</span> ds.getConnection();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.geekhoon.utils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanUtils;</div><div class="line"><span class="keyword">import</span> org.apache.commons.beanutils.ConvertUtils;</div><div class="line"><span class="keyword">import</span> org.apache.commons.beanutils.converters.DateConverter;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanUtils</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">populate</span><span class="params">(Object obj,Map map)</span></span>&#123;</div><div class="line">		<span class="comment">//设置并注册一个时间转换器</span></div><div class="line">		DateConverter dc = <span class="keyword">new</span> DateConverter();</div><div class="line">		<span class="comment">//设置当前转换的字符串的格式</span></div><div class="line">		dc.setPattern(<span class="string">"yyyy-MM-dd"</span>);</div><div class="line">		<span class="comment">//注册该转换器</span></div><div class="line">		ConvertUtils.register(dc, Date.class);</div><div class="line">		<span class="comment">//2、使用BeanUtils 为 JavaBean 对象赋值</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			BeanUtils.populate(obj, map);</div><div class="line">		&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.geekhoon.utils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.UUID;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UUIDUtils</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getId</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;HttpServletRequest对象是封装请求消息的对象,用于操作请求消息,是Tomcat创建和管理的&lt;br&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="https://geekhoon.github.io/categories/JavaWeb/"/>
    
    
      <category term="前端开发" scheme="https://geekhoon.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="Tomcat" scheme="https://geekhoon.github.io/tags/Tomcat/"/>
    
      <category term="HTTP" scheme="https://geekhoon.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>ServletContext&amp;HttpServletResponse</title>
    <link href="https://geekhoon.github.io/2017/04/04/JavaWeb-08-ServletContext-HttpServletResponse/"/>
    <id>https://geekhoon.github.io/2017/04/04/JavaWeb-08-ServletContext-HttpServletResponse/</id>
    <published>2017-04-04T09:20:32.000Z</published>
    <updated>2017-04-08T17:03:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>ServletContext是存取数据的域(空间/容器);<br>ServletContext是Web应用的上下文对象,向下可以管理当前Web应用的资源(包括Servlet动态资源及Html等静态资源),向上可以与服务器进行交互;<br>ServletContext被不同的Servlet共享.<br><a id="more"></a>    </p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><strong>1.获取ServletContext对象</strong><br>Tomcat创建的该对象,我们只要在需要的Servlet下(因为是共享,所以在任何Servlet下都可以获取)使用如下语句便可获取:<br>    ServletContext context = this.getServletContext();<br>不同的Servlet获取的ServletContext具有共同的地址值!<br><strong>2.存取数据 — 不同的Servlet之间实现数据共享</strong><br>存储:setAttribute(String 键名,Object obj) – 值是object类型<br>获取:getAttribute(String 键名) – 获取的值是Object类型,如果没有该键,返回null<br>移除:removeAttribute(String name) – 移除指定数据<br><strong>3.获取Web项目资源(文件下载)</strong><br>getResourceAsStream(String path)—将web项目下的资源转成输入流<br>getRealPath(String path)—获取资源路径(绝对路径)<br>注意路径的写法:以”/“开始,代表当前项目在Tomcat webapps下当前项目对应的文件夹<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">获取Web项目资源:</div><div class="line">ServletContext context = this.getServletContext();</div><div class="line">//获取资源对应的输入流</div><div class="line">InputStream in = context.getResourceAsStream("/resource/a.txt");</div><div class="line">//注意路径,第一个"/"代表当前项目下任意目录,即可以代表resource所在的WebContent文件夹</div><div class="line">byte[] buffer = new byte[1024]'</div><div class="line">int length;</div><div class="line">while((length = in.read(buffer)) != -1)&#123;</div><div class="line">	String str = new String(buffer,0,length);</div><div class="line">	System.out.println(str);</div><div class="line">&#125;</div><div class="line">in.close();</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">获取资源路径:(获取的是服务器下的绝对路径,不是工作空间下的路径)</div><div class="line">String realPath = context.getRealPath(<span class="string">"/resource/a.txt"</span>);</div><div class="line">System.out.println(realPath);</div></pre></td></tr></table></figure>
<p><strong>4.操作初始化参数</strong><br>在web.xml中进行配置:比如设置编码集,参数名写encode,值写gbk<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">全局:(在Servlet标签同级设置)</div><div class="line">&lt;context-param&gt;</div><div class="line">    &lt;param-name&gt;参数名&lt;/param-name&gt;</div><div class="line">    &lt;param-value&gt;参数值&lt;/param-value&gt;</div><div class="line">&lt;/context-param&gt;</div><div class="line"></div><div class="line">在Servlet中使用:</div><div class="line">    ServletContext对象.getInitParameter(&quot;参数名&quot;);        获取指定全局初始化参数;</div><div class="line"></div><div class="line"></div><div class="line">局部:(在Servlet标签内部的所有标签最后设置)</div><div class="line">&lt;init-param&gt;</div><div class="line">    &lt;param-name&gt;参数名&lt;/param-name&gt; </div><div class="line">    &lt;param-value&gt;参数值&lt;/param-value&gt;</div><div class="line">&lt;/init-param&gt;</div><div class="line"></div><div class="line">在Servlet中使用:</div><div class="line">    ServletConfig对象.getInitParameter(&quot;参数名&quot;);        获取指定局部初始化参数;</div></pre></td></tr></table></figure></p>
<h3 id="获取输入流的方式"><a href="#获取输入流的方式" class="headerlink" title="获取输入流的方式"></a>获取输入流的方式</h3><p>方式1: 通过类的加载器获取src下的文件<br>InputStream in = 类名.class.getClassloader().getResourceAsStream(“文件名即可”);<br>方式2: 通过ServletContext获取webContent文件夹下的文件<br>InputStream in = this.getServletContext().getResourceAsStream(String)<br>区别:<br>1.文件位置:如果是在src下,使用类加载器;如果在webcontent下,使用ServletContext<br>2.如果是配置信息,则存在src下,如jdbc.properties,c3p0配置文件等;<br>  如果是项目的一些资源,如图片,视频,音频,压缩包等等,放在WebContent下<br>3.项目部署时存储位置的区别:<br>WebContent下的资源存储在项目文件夹下;<br>src下的资源存储在WEB-INF的classes文件夹下<br>拓展:<br>使用ServletContext获取src下资源的输入流:<br>InputStream in = this.getServletContext().getResourceAsStream(“WEB-INF/classes/hehe.properties”);<br>使用前提:必须明确该文件在Tomcat中的文件位置</p>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>A、记录当前网站访问次数<br>B、网站有多个页面,不管访问哪个页面都认为是有效访问<br>C、访问页面时,向客户端输出页面内容,并且输出当前是第多少次访问</p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>1.判断是不是第一次访问,如果是,输出页面信息,附加说明,这是第一次访问,设置键值对count=1<br>2.不是第一次访问,获取键值对的值+1,输出到浏览器,重新设置键值对</p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Servlet1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">		<span class="comment">//1.获取ServletContext对象</span></div><div class="line">		ServletContext context = <span class="keyword">this</span>.getServletContext();</div><div class="line">		<span class="comment">//打印流</span></div><div class="line">		PrintWriter out = response.getWriter();</div><div class="line">		<span class="comment">//2.判断是不是第一次访问</span></div><div class="line">		Object num = context.getAttribute(<span class="string">"count"</span>);</div><div class="line">		<span class="keyword">if</span> (num == <span class="keyword">null</span>) &#123;<span class="comment">//第一次</span></div><div class="line">			out.write(<span class="string">"Page1-----&gt;  time: 1"</span>);</div><div class="line">			context.setAttribute(<span class="string">"count"</span>, <span class="number">1</span>);</div><div class="line">		&#125;<span class="keyword">else</span>&#123;<span class="comment">//不是第一次</span></div><div class="line">			Integer n = (Integer)context.getAttribute(<span class="string">"count"</span>);</div><div class="line">			out.write(<span class="string">"Page1-----&gt;  time: "</span>+ ++n);</div><div class="line">			context.setAttribute(<span class="string">"count"</span>, n);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">		doGet(request, response);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Servlet2</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">		ServletContext context = <span class="keyword">this</span>.getServletContext();</div><div class="line">		PrintWriter out = response.getWriter();</div><div class="line">		Object num = context.getAttribute(<span class="string">"count"</span>);</div><div class="line">		<span class="keyword">if</span> (num == <span class="keyword">null</span>) &#123;<span class="comment">//第一次</span></div><div class="line">			out.write(<span class="string">"Page2-----&gt;  time: 1"</span>);</div><div class="line">			context.setAttribute(<span class="string">"count"</span>, <span class="number">1</span>);</div><div class="line">		&#125;<span class="keyword">else</span>&#123;<span class="comment">//不是第一次</span></div><div class="line">			Integer n = (Integer)context.getAttribute(<span class="string">"count"</span>);</div><div class="line">			out.write(<span class="string">"Page2-----&gt;  time: "</span>+ ++n);</div><div class="line">			context.setAttribute(<span class="string">"count"</span>, n);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">		doGet(request, response);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="HttpServletResponse对象"><a href="#HttpServletResponse对象" class="headerlink" title="HttpServletResponse对象"></a>HttpServletResponse对象</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>封装响应消息的对象.<br>HTTP协议是基于请求响应的,请求被Tomcat封装成一个类HttpServletRequest,响应被Tomcat封装成一个类HttpServletResponse,前者封装了请求数据,后封装了响应数据,二者都是tomcat创建并管理的</p>
<h3 id="使用-向浏览器发送数据"><a href="#使用-向浏览器发送数据" class="headerlink" title="使用(向浏览器发送数据)"></a>使用(向浏览器发送数据)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">因为是Tomcat创建的,所以没有创建的过程,直接使用.</div><div class="line"></div><div class="line">设置响应行状态码:<span class="comment">//要根据具体情况发送合适的状态码</span></div><div class="line">	setStatus(<span class="keyword">int</span> status);				设置状态码;</div><div class="line">	sendError(<span class="number">404</span>,String 错误描述);		报<span class="number">404</span>,描述可以不写</div><div class="line">设置响应头:</div><div class="line">	addHeader(String name,String value) 设置响应头键值对;</div><div class="line">	setHeader(String name,String value)	设置响应头键值对;</div><div class="line">	setContenType(String value)			设置响应数据(MIME)格式;</div><div class="line">	区别:</div><div class="line">		键如果一样,addHeader多个值都会输出,setHeader后设的值会覆盖前面设的值</div><div class="line">	注意:</div><div class="line">		自定义的键,浏览器可能识别不了</div><div class="line">设置响应体:</div><div class="line">	<span class="number">1</span>.必须开启一个流(字符打印流,字节流)<span class="function">PrintWriter ServletOutputStream</span></div><div class="line">		<span class="title">getWriter</span><span class="params">()</span>;			--&gt;字符流;<span class="comment">//写文本</span></div><div class="line">		getOurputStream();	    --&gt;字节流;<span class="comment">//写所有类型文件</span></div><div class="line">	<span class="number">2</span>.输出响应内容</div><div class="line">		<span class="comment">//字符流写文本</span></div><div class="line">		PrintWriter out1 = response.getWriter();</div><div class="line">		out1.write(<span class="string">"Hello"</span>);</div><div class="line">		</div><div class="line">		<span class="comment">//字节流 --- 用于写出非文本信息</span></div><div class="line">		ServletOutputStream out2 = response.getOutputStream();</div><div class="line">		out2.write(<span class="string">"Hello World"</span>.getBytes());</div><div class="line">	注意:</div><div class="line">		同一个response,字节流和字符流不能同时开启,否则会抛出异常,浏览器报<span class="number">500</span></div><div class="line">		</div><div class="line">文件下载相关设置:</div><div class="line">	Content-Disposition: attachment; filename=	--&gt;设置接收程序处理数据的格式;</div><div class="line">	Content-Type: application/x-msdownload		--&gt;设置实体内容的MIME类型;</div></pre></td></tr></table></figure>
<h2 id="乱码"><a href="#乱码" class="headerlink" title="乱码"></a>乱码</h2><p>IO中转换流<br>请求响应中乱码</p>
<h3 id="码表"><a href="#码表" class="headerlink" title="码表"></a>码表</h3><p>比如一个汉字”中”,这是一个字符,字符可以理解为是一张小图片;<br>“中”对应的字节,假设是-42,-48,字节可以理解为一组数字.</p>
<h4 id="交互方式"><a href="#交互方式" class="headerlink" title="交互方式"></a>交互方式</h4><p>标准1: 字节<br>标准2: 图片</p>
<h3 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h3><p>涉及到双方交互(双方编码集不同,且交互的是字节,就会产生乱码;如果交互的是小图片,接收方是UTF-8,不会乱码,否则也会乱码)<br>比如:<br>情况1:(正常)<br>   甲方使用GBK,存储字符”中”<br>   乙方使用UTF-8,存储甲方的字符”中”<br>   甲方把字符图片传给乙方,乙方拿到图片,根据utf-8查找对应的字节,进行存储.因为utf-8可以找到”中”对应的字节,所以不会乱码<br>情况2:(乱码)<br>   甲方使用GBK,存储字符”中”<br>   乙方使用ISO-8859-1(西欧编码集),存储甲方的字符”中”<br>   甲方把字符图片传给乙方,乙方拿到图片,根据ISO-8859-1查找不到”中”对应的字节,所以产生乱码 </p>
<h3 id="请求与响应中乱码问题"><a href="#请求与响应中乱码问题" class="headerlink" title="请求与响应中乱码问题"></a>请求与响应中乱码问题</h3><p>浏览器默认的编码集是GBK,但是打开的是响应页面时,即服务器发送来的页面时,编码集是UTF-8,因为html中默认设置了响应编码集</p>
<p><meta charset="UTF-8"><br>浏览器(UTF-8)与服务器tomcat(ISO-8859-1)间,交互方式是字节<br>服务器与程序(eclipse)间,交互方式是小图片(字符)</p>
<h4 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h4><p><strong>1.解决请求体(Post方式)中内容的乱码问题:</strong><br>request.setCharacterEncoding(“UTF-8”): 将服务器tomcat的编码集改成utf-8<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">解决POST方式:浏览器的编码集是UTF-<span class="number">8</span>,为避免乱码,将服务器的编码集也设置成UTF-<span class="number">8</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">	request.setCharacterEncoding(<span class="string">"UTF-8"</span>);<span class="comment">//1</span></div><div class="line">	PrintWriter out = response.getWriter();</div><div class="line">	String username = request.getParameter(<span class="string">"username"</span>);</div><div class="line">	out.write(username);<span class="comment">//页面上显示?   因为1只能处理Post请求时乱码问题</span></div><div class="line">	System.out.println(<span class="string">"tomcat中: "</span>+username);<span class="comment">//控制台打印 tomcat中: 中</span></div><div class="line">	<span class="comment">//如果不加request.setCharacterEncoding("UTF-8"),打印西欧乱码</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>2.解决Get方式乱码问题:</strong><br>request.setCharacterEncoding(“UTF-8”)并不能解决GET请求时乱码问题,因为GET请求数据并不在请求体中,而是在请求行中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">String username = request.getParameter(<span class="string">"username"</span>);</div><div class="line">System.out.println(<span class="string">"tomcat中: "</span>+username);<span class="comment">//打印乱码</span></div><div class="line"><span class="keyword">byte</span>[] buffer = username.getbytes(<span class="string">"ISO-8859-1"</span>);</div><div class="line">String newWord = <span class="keyword">new</span> String(buffer,<span class="string">"UTF-8"</span>);</div><div class="line">System.out.println(<span class="string">"tomcat中: "</span>+newWord);<span class="comment">//打印tomcat中: 中</span></div></pre></td></tr></table></figure></p>
<p><img src="http://oj3s07yy0.bkt.clouddn.com/blog/20170409/010006246.png" alt="mark"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ServletContext&quot;&gt;&lt;a href=&quot;#ServletContext&quot; class=&quot;headerlink&quot; title=&quot;ServletContext&quot;&gt;&lt;/a&gt;ServletContext&lt;/h2&gt;&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;ServletContext是存取数据的域(空间/容器);&lt;br&gt;ServletContext是Web应用的上下文对象,向下可以管理当前Web应用的资源(包括Servlet动态资源及Html等静态资源),向上可以与服务器进行交互;&lt;br&gt;ServletContext被不同的Servlet共享.&lt;br&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="https://geekhoon.github.io/categories/JavaWeb/"/>
    
    
      <category term="前端开发" scheme="https://geekhoon.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="Tomcat" scheme="https://geekhoon.github.io/tags/Tomcat/"/>
    
      <category term="HTTP" scheme="https://geekhoon.github.io/tags/HTTP/"/>
    
      <category term="乱码" scheme="https://geekhoon.github.io/tags/%E4%B9%B1%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Servlet</title>
    <link href="https://geekhoon.github.io/2017/04/02/JavaWeb-07-Servlet/"/>
    <id>https://geekhoon.github.io/2017/04/02/JavaWeb-07-Servlet/</id>
    <published>2017-04-02T09:09:36.000Z</published>
    <updated>2017-04-09T00:35:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>1.概念</strong><br>Servlet是运行在服务器端的Java小程序,是Sun公司提供的一套规范,用来处理客户端请求的动态资源.<br>Servlet是JavaWeb三大组件之一(Servlet,Filter,Listener),最为重要.<br>Web资源分为静态资源与动态资源<br>静态资源: HTML,文件,CSS,图片…<br>动态资源: 由程序生成的,每次访问内容可能不一样,如Servlet,JSP<br><a id="more"></a><br><strong>2.作用</strong><br>处理从客户端发送的请求,并对该请求做出响应<br>任务:<br>  (1)获取请求参数<br>  (2)处理请求<br>  (3)响应(重定向,请求转发)</p>
<h2 id="Servlet实现方式"><a href="#Servlet实现方式" class="headerlink" title="Servlet实现方式"></a>Servlet实现方式</h2><h3 id="版本1"><a href="#版本1" class="headerlink" title="版本1"></a>版本1</h3><p><strong>1.实现类</strong>: 实现Servlet接口,重写抽象方法(主要是service方法)<br><strong>2.配置文件(</strong>WEB_INF/web.xml): URL与类产生映射关系<br><strong>3.访问</strong>: 浏览器输入与自己配置对应的URL,执行效果:调用自定义类的service方法,Tomcat自己创建了Servlet对象,并调用service方法,此过程隐藏了</p>
<h3 id="版本2"><a href="#版本2" class="headerlink" title="版本2"></a>版本2</h3><p><strong>1.编写类</strong>: 继承GenericServlet类,重写service方法<br>注意:<br>  (1)本质上与直接重写Servlet接口一样<br>  (2)采用当前方式只关心service方法<br>  (3)唯一优点: 代码简单<br>步骤2和3与版本1一样.</p>
<h3 id="版本3"><a href="#版本3" class="headerlink" title="版本3"></a>版本3</h3><p><strong>1.编写类</strong>: 继承javax.servlet.http.HttpServlet类,重写doGet()和doPost(),如果是GET请求调用doGet(),POST请求调用doPost()<br><strong>2.配置文件</strong>: web.xml</p>
<h4 id="HttpServlet源码分析"><a href="#HttpServlet源码分析" class="headerlink" title="HttpServlet源码分析"></a>HttpServlet源码分析</h4><p>doGet 和 doPost 怎么执行的？<br>A、本质上 HttpServlet 实现了 Servlet 接口也有 service 方法<br>B、执行时要找service 方法<br>C、service 方法会判断当前的请求方式，根据请求方式调用 doGet 或 doPost<br>使用Eclipse自动生成Servlet</p>
<h2 id="适配器设计模式"><a href="#适配器设计模式" class="headerlink" title="适配器设计模式"></a>适配器设计模式</h2><p>1.编写一个类实现一个A接口,按照Java语法,接口所有的方法都要重写,但是按照当前的业务逻辑,如果只需要重写几个方法的话,全部重写了必然导致代码严重冗余<br>2.优化方案:编写一个B类实现该接口,但都是空实现<br>3.写一个C类继承B中的空实现类,需要重写哪个方法就重写哪个,C类中只保存需要的方法,代码简洁</p>
<h2 id="Servlet编写具体实现"><a href="#Servlet编写具体实现" class="headerlink" title="Servlet编写具体实现"></a>Servlet编写具体实现</h2><p>需求:客户端录入帐号密码,如果用户名是geekhoon,密码是123456,浏览器显示success,否则fail<br>步骤:<br>1.编写html表单,提交到一个Servlet<br>2.Servlet获取提交的数据<br>  提交的数据,封装在request中,调用getParamter(“key”)获取对应值<br>  String[] values = request.getParameterValues(“key”) —- 获取一键多值<br>3.数据判断<br>4.response 获取数据流,往外写数据<br> PrintWriter out = response.getWriter();//使用IO流—打印流<br>注意: doGet和doPost中的re    quest和response是怎么来的?<br>Tomcat把请求数据封装,创建一个HTTPRequest对象,存储库户录入的键值对,调用doGet和doPost时,传入该对象</p>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>day13_MyServlet<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.geekhoon.MyServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/MyServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="login-html"><a href="#login-html" class="headerlink" title="login.html"></a>login.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/day13_MyServlet/MyServlet"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">		帐号:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span> = <span class="string">"username"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">		密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span> = <span class="string">"password"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span> =<span class="string">"提交"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="MyServlet-java"><a href="#MyServlet-java" class="headerlink" title="MyServlet.java"></a>MyServlet.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.geekhoon;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">		String username = request.getParameter(<span class="string">"username"</span>);</div><div class="line">		String password = request.getParameter(<span class="string">"password"</span>);</div><div class="line">		<span class="keyword">if</span>(<span class="string">"geekhoon"</span>.equals(username)&amp;&amp;<span class="string">"123456"</span>.equals(password))&#123;</div><div class="line">			response.getWriter().write(<span class="string">"success !!!"</span>);</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			response.getWriter().write(<span class="string">"fail    !!!"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">		doGet(request, response);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h2><p>出生: 服务器启动,用户第一次访问Servlet,Servlet被初始化(init出生);<br>死亡: 服务器被正常关闭(destory)或停止;</p>
<p>init    –&gt; 初始化数据;<br>service –&gt; 处理请求;<br>destory –&gt; 释放资源;</p>
<h3 id="设置Servlet初始化时机"><a href="#设置Servlet初始化时机" class="headerlink" title="设置Servlet初始化时机"></a>设置Servlet初始化时机</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">在&lt;servlet&gt;中配置:</div><div class="line">&lt;!-- 取值为0或正整数:服务器启动时初始化(数字越小,越优先); --&gt;</div><div class="line">&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</div></pre></td></tr></table></figure>
<h3 id="url-pattern配置"><a href="#url-pattern配置" class="headerlink" title="url-pattern配置"></a>url-pattern配置</h3><p>Servlet映射URL时,URL的取值:<br><strong>1.完全路径匹配</strong><br>  /目录1/目录2/….<br>  地址栏中的路径，必须和配置的完全一样<br><strong>2.目录匹配</strong><br>  /目录1/目录2/…./*<br>  地址栏中路径，必须完全符合目录，但是目录后面的路径编写随意</p>
<p><strong>3.后缀名匹配</strong><br>  <em>.do </em>.test<br>  地址栏中的路径，后缀名必须匹配，后缀名前面随意<br><strong>4.缺省匹配</strong><br>   /<br>   地址栏随便输入路径<br><strong>优先级</strong><br>  1 &gt; 2 &gt; 3 &gt;4<br>原则：越具体优先级越高</p>
<h3 id="访问路径编写"><a href="#访问路径编写" class="headerlink" title="访问路径编写"></a>访问路径编写</h3><pre><code>./      --&gt; 当前路径;
../     --&gt; 上一级目录;
</code></pre><p>1.绝对路径:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://localhost:8080/JavaWeb_day13-Servlet/login.html</div><div class="line">http://localhost:8080/JavaWeb_day13-Servlet/UserServlet</div></pre></td></tr></table></figure></p>
<p>2.相对路径:<br>    浏览器 –&gt; 服务器:<br>        /项目名/资源路径….(需要加项目名);<br>    服务器 –&gt; 服务器:<br>        servlet –&gt; servlet<br>        /…(不需要加工程名);</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1.概念&lt;/strong&gt;&lt;br&gt;Servlet是运行在服务器端的Java小程序,是Sun公司提供的一套规范,用来处理客户端请求的动态资源.&lt;br&gt;Servlet是JavaWeb三大组件之一(Servlet,Filter,Listener),最为重要.&lt;br&gt;Web资源分为静态资源与动态资源&lt;br&gt;静态资源: HTML,文件,CSS,图片…&lt;br&gt;动态资源: 由程序生成的,每次访问内容可能不一样,如Servlet,JSP&lt;br&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="https://geekhoon.github.io/categories/JavaWeb/"/>
    
    
      <category term="前端开发" scheme="https://geekhoon.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="Tomcat" scheme="https://geekhoon.github.io/tags/Tomcat/"/>
    
      <category term="HTTP" scheme="https://geekhoon.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>Http</title>
    <link href="https://geekhoon.github.io/2017/04/01/JavaWeb-06-Http-Tomcat/"/>
    <id>https://geekhoon.github.io/2017/04/01/JavaWeb-06-Http-Tomcat/</id>
    <published>2017-03-31T23:18:14.000Z</published>
    <updated>2017-04-08T05:34:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>HTTP协议 —&gt; 超文本传输协议.<br>分两部分:<br>1.Request请求协议<br>2.Response响应协议<br><a id="more"></a>    </p>
<h3 id="作用及特点"><a href="#作用及特点" class="headerlink" title="作用及特点"></a>作用及特点</h3><p>作用: 规范请求与响应过程中数据交互的规范<br>特点:<br> (1)基于请求/响应模型的协议<br> (2)HTTP协议默认的端口:80</p>
<h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><p>1.0版本: 访问一次资源,就需要创建一个连接<br>1.1版本: 访问多个资源,也只需创建一个连接(效率高).keep-alive</p>
<h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><pre><code>HTTP协议
    |-- HTTP请求协议
        |-- 请求行

        |-- 请求头

        |-- 请求体

    |-- HTTP响应协议        
        |-- 响应行

        |-- 响应头

        |-- 响应体
</code></pre><h3 id="HTTP请求协议图解"><a href="#HTTP请求协议图解" class="headerlink" title="HTTP请求协议图解"></a>HTTP请求协议图解</h3><h4 id="普通请求"><a href="#普通请求" class="headerlink" title="普通请求"></a>普通请求</h4><p><img src="http://oj3s07yy0.bkt.clouddn.com/blog/20170402/122753927.png" alt="mark"></p>
<h4 id="表单请求"><a href="#表单请求" class="headerlink" title="表单请求"></a>表单请求</h4><p><img src="http://oj3s07yy0.bkt.clouddn.com/blog/20170402/160517355.png" alt="mark"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">请求头：</div><div class="line">accecpt ---- 当前浏览器可以解析的数据类型</div><div class="line">	text/html ---- html文本文件</div><div class="line">	application/xhtml+xml ---- xml文件</div><div class="line">	*/* ---------- 任意文件</div><div class="line">	</div><div class="line">User-agent ---- 本地浏览器以及操作系统的相关信息(给服务器使用)</div><div class="line">Accept-Encoding --- 可以解析的压缩格式</div><div class="line">Connection ----- keep-alive(连接未被终止)</div><div class="line"></div><div class="line">If-Modified-Since	Wed, 04 Jan 2017 02:26:18 GMT</div><div class="line">If-None-Match	W/&quot;179-1483496778700&quot;</div><div class="line"></div><div class="line">referer ----- 当前页面是从哪个页面跳转来的</div><div class="line">	防盗链 ---- 图片 新闻 防盗</div><div class="line">	网站统计 --- 统计广告投放效果</div></pre></td></tr></table></figure></p>
<h3 id="Post请求注意"><a href="#Post请求注意" class="headerlink" title="Post请求注意"></a>Post请求注意</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">POST请求时，有时需要上传图片或文件等字节内容，但是当前默认实现是上传文件名，怎么操作？</div><div class="line"></div><div class="line">form表单属性中添加属性: enctype=&quot;multipart/form-data&quot; </div><div class="line">	  </div><div class="line">enctype=&quot;application/x-www-form-urlencoded&quot;</div><div class="line">Post 表单的默认实现，特点：上传文件名，并且上传的数据要编码</div><div class="line">				  key=value&amp;key=value</div><div class="line"></div><div class="line">enctype=text/plain(不常用)</div><div class="line">   特点：没有编码，上传的是文件名</div><div class="line">   			 key=value</div><div class="line">   			 key=value</div><div class="line">   			 </div><div class="line">enctype=&quot;multipart/form-data&quot; ------ 多部件表单数据上传，如果表单有文件上传，那么必须使用该值</div><div class="line"> name ---- 键</div><div class="line"> file-name ---- 上传的文件名</div><div class="line"> content-type --- 上传的文件类型</div><div class="line">     一些二进制数据 ----- 文件内容</div></pre></td></tr></table></figure>
<h3 id="HTTP响应协议图解"><a href="#HTTP响应协议图解" class="headerlink" title="HTTP响应协议图解"></a>HTTP响应协议图解</h3><p><img src="http://oj3s07yy0.bkt.clouddn.com/blog/20170402/160857530.png" alt="mark"><br>     ETag<br>     Last-Modified :二者都是标记，适用于缓存的<br>     Content-type: text/html<br>     Content-length:内容的字节数<br>     Date:响应时间<br>     refresh:设置刷新 跟一个秒值，隔这个秒数之后，会重新请求网站，自动刷新</p>
<h4 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h4><p>1XX     –&gt;请求收到了，但是不给响应，原则上严禁出现;<br>200        –&gt;请求成功;<br>302        –&gt;请求重定向,重新去访问一个新URL;<br>304        –&gt;请求资源没有改变,访问本地缓存;<br>404        –&gt;请求资源不存在.通常是用户路径编写错误,也可能是服务器资源已删除;<br>500        –&gt;服务器内部错误.通常程序抛出异常;</p>
<h2 id="Web开发概述"><a href="#Web开发概述" class="headerlink" title="Web开发概述"></a>Web开发概述</h2><h3 id="Web通信"><a href="#Web通信" class="headerlink" title="Web通信"></a>Web通信</h3><p>采用B/S通信模式,通过HTTP协议进行通信,浏览器编写url向服务器发送request请求,服务器端处理后,向浏览器返回response响应,将服务器端资源发送给浏览器,完成通信.<br><img src="http://oj3s07yy0.bkt.clouddn.com/blog/20170402/162022962.png" alt="mark"></p>
<h3 id="软件架构"><a href="#软件架构" class="headerlink" title="软件架构"></a>软件架构</h3><p><strong>C/S架构</strong><br>1.模型: Client/Server,使用时需要在本地安装程序<br>2.案例: QQ,酷狗音乐,迅雷…<br>3.优点:<br> (1)动画效果更好(如游戏);<br> (2)服务器端计算压力小,客户端分担了一部分;<br> (3)数据交互更安全<br> (4)客户端可以找服务器,服务器也可以找客户端<br>4.缺点:<br> (1)富客户端(需要下载,占磁盘空间,且耗时)<br> (2)升级麻烦(客户端要和服务器同步升级)<br> (3)安装依赖其他环境<br><strong>B/S架构</strong><br>1.模型: Browser/Server,需要通过浏览器访问服务器<br>2.案例: 淘宝,京东电商网站,12306…<br>3.优点:<br> (1)节约磁盘空间<br> (2)升级简单(无缝升级)<br> (3)只需要安装浏览器<br>4.缺点:<br> (1)动画效果差<br> (2)服务器端计算压力大,并发访问量大时,可能崩溃<br> (3)数据交互规则是暴露的,不安全<br> (4)通常访问方式:客户端找服务器,服务器给出回应,但是服务器不能直接找客户端</p>
<h3 id="Web资源介绍"><a href="#Web资源介绍" class="headerlink" title="Web资源介绍"></a>Web资源介绍</h3><p>静态资源: web页面中浏览的数据是不变的,如html,css,js,图片,多媒体等<br>动态资源: web页面中浏览的数据是程序产生的,比如JSP/Servlet,ASP,PHP</p>
<h3 id="Web服务器"><a href="#Web服务器" class="headerlink" title="Web服务器"></a>Web服务器</h3><p>1.Tomcat: 免费的小型服务器软件,包含集群技术(多台计算机都安装Tomcat,串联成一个整体)<br>2.Weblogic: 大型的服务器软件,被oracle收购了<br>3.WebSphere: IBM公司的大型服务器软件<br>4.JBoss</p>
<h3 id="URL请求路径"><a href="#URL请求路径" class="headerlink" title="URL请求路径"></a>URL请求路径</h3><p>格式如下:<br>    协议://域名:端口号/资源位置?参数=值</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HTTP协议&quot;&gt;&lt;a href=&quot;#HTTP协议&quot; class=&quot;headerlink&quot; title=&quot;HTTP协议&quot;&gt;&lt;/a&gt;HTTP协议&lt;/h2&gt;&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;HTTP协议 —&amp;gt; 超文本传输协议.&lt;br&gt;分两部分:&lt;br&gt;1.Request请求协议&lt;br&gt;2.Response响应协议&lt;br&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="https://geekhoon.github.io/categories/JavaWeb/"/>
    
    
      <category term="前端开发" scheme="https://geekhoon.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="Tomcat" scheme="https://geekhoon.github.io/tags/Tomcat/"/>
    
      <category term="HTTP" scheme="https://geekhoon.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>XML</title>
    <link href="https://geekhoon.github.io/2017/03/31/JavaWeb-05-XML/"/>
    <id>https://geekhoon.github.io/2017/03/31/JavaWeb-05-XML/</id>
    <published>2017-03-31T00:31:37.000Z</published>
    <updated>2017-04-02T08:34:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>1.概念</strong><br>XML(Extensible Markup Language),是可扩展的标记语言.<br>标记—–由标签组成<br>可扩展—标签可以自定义<br><a id="more"></a><br><strong>2.与HTMl的区分</strong><br>HTML – 存储页面内容(写页面)<br>XML — 作为配置文件,作为数据传输的载体</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p><strong>1.后缀名</strong>是.xml,使用浏览器可以查看<br><strong>2.头部</strong>是xml的声明,声明必须位于第一行第一列<br>  声明的属性:version(版本:1.0),encoding(编码集)<br><strong>3.元素(标签)</strong><br>严格区分大小写<br>不能使用空格和冒号,冒号某些情况下可用<br>标签名不建议使用XML,xml,Xml等等开头<br>其余语法规则和HTML一样<br><strong>4.属性</strong><br>除了自定义的,其余和HTML规则一样<br><strong>5.注释</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 注释 --&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>6.转义字符</strong><br>一些特殊符号不能直接使用必须使用转义字符<br>空格需要使用全角输入法录入空格</p>
<pre><code>- 小于号: &amp;lt;
- 大于号: &amp;gt;
- 双引号: &amp;quot;
- 单引号: &amp;apos;
- 与符号: &amp;amp;
</code></pre><p>转义字符少用,因为大量使用会影响XML的解析效率,且易读性差<br><strong>7.转义字符使用的替换方案</strong><br>语法:&lt;![CDATA[存储任意内容]]&gt;,可以保证内容原样输出<br>解析时,只获取[]中的内容</p>
<h2 id="XML的解析"><a href="#XML的解析" class="headerlink" title="XML的解析"></a>XML的解析</h2><p>解析就是获得XML中标签的属性或内容<br>解析方案:(使用第三方实现)</p>
<h3 id="解析算法"><a href="#解析算法" class="headerlink" title="解析算法"></a>解析算法</h3><p>1.DOM解析方式: 将标签全部加载进内存,形成Dom树<br>2.SAX解析方式: 一行一行读取,当前行前面的数据已经销毁了<br>比较:<br>(1)内存角度,SAX解析方式占的内存更小<br>(2)功能角度,DOM方式可以根据当前标签进行上下推导,功能更强大<br>使用: XML比较小时使用DOM,比较大时使用SAX解析<br>基于上述两种解析实现,有不同的第三方封装:<br>(1)JAXP — JDK内置的解析实现,不常用<br>(2)JDOM — 只用到类,没使用接口,灵活性差<br>(3)DOM4J – 相对应JDOM使用了接口,扩展性更好<br>(4)JSOUP – 专门解析HTML,HTML可以理解为特殊的XML</p>
<h3 id="解析优化"><a href="#解析优化" class="headerlink" title="解析优化"></a>解析优化</h3><p>如果标签纵深比较多,那么要获取该标签对象,得逐级获取,代码实现比较麻烦,dom4j解析层级结构复杂的标签时,进行了优化：<br>优化方案是使用选择器(与 CSS 中，JQuery 中的选择器类似)</p>
<h2 id="DOM4J使用"><a href="#DOM4J使用" class="headerlink" title="DOM4J使用"></a>DOM4J使用</h2><p>1.导jar包</p>
<pre><code>- dom4j-1.6.1.jar
- jaxen-1.1-beta-6.jar
</code></pre><p>2.步骤:<br>(1)创建一个文件输入流<br>(2)创建DOM4J的解析器,读流<br>SAXReader r = new SAXReader();<br>(3)解析器读流,生成DOM树<br>Document doc = r.read(in);<br>(4)解析DOM树 — 获取配置信息</p>
<pre><code>- 获取根元素对应的对象: Element root = doc.getRootElement()
- 操作元素相关API
    - attributeValue(&quot;属性名&quot;); ---- 返回属性值
    - elements(&quot;标签名&quot;) ----------- 获取所有指定名称的子级标签,可以不指定名(获取所有子级标签)
    - element(&quot;标签名&quot;) ------------ 获取第一个有指定名称的标签,可以不指定名称(获取所有子级标签)
    - getText() ------------------- 获取标签的文本内容体
- 优化:如果标签有2级,获取子级标签的文本内容
    - 方案1: 先获取子级标签对象,调用 getText() --- 获取文本
    - 方案2: 父级标签.elementText(&quot;子级标签名&quot;) --- 简化代码 
</code></pre><h3 id="DOM4J常规使用案例"><a href="#DOM4J常规使用案例" class="headerlink" title="DOM4J常规使用案例"></a>DOM4J常规使用案例</h3><h4 id="配置文件animals-xml写法"><a href="#配置文件animals-xml写法" class="headerlink" title="配置文件animals.xml写法"></a>配置文件animals.xml写法</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">animals</span> <span class="attr">version</span>=<span class="string">"1.0"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">animal</span> <span class="attr">id</span>=<span class="string">"1.1"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>猫<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">age</span>&gt;</span>2<span class="tag">&lt;/<span class="name">age</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">animal</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">animal</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>狗<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">age</span>&gt;</span>3<span class="tag">&lt;/<span class="name">age</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">animal</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">animals</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DOM4JDemo</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="comment">//1.关联文件,创建一个文件输入流</span></div><div class="line">		InputStream in = DOM4JDemo.class.getClassLoader().getResourceAsStream(<span class="string">"animals.xml"</span>);</div><div class="line">		<span class="comment">//2.创建dom4j的解析器</span></div><div class="line">		SAXReader r = <span class="keyword">new</span> SAXReader();</div><div class="line">		<span class="comment">//读流,创建一个dom树</span></div><div class="line">		Document doc = r.read(in);</div><div class="line">		<span class="comment">//关流</span></div><div class="line">		in.close();</div><div class="line">		<span class="comment">//3.解析Dom树,获取配置信息</span></div><div class="line">		<span class="comment">//3.1获取根元素对应的对象</span></div><div class="line">		Element root = doc.getRootElement();</div><div class="line">		<span class="comment">//获取属性</span></div><div class="line">		String value = root.attributeValue(<span class="string">"version"</span>);</div><div class="line">		System.out.println(value);<span class="comment">//1.0</span></div><div class="line">		<span class="comment">//3.2内容体</span></div><div class="line">		<span class="comment">//获取所有名字为animal的子级标签</span></div><div class="line">		List es = root.elements(<span class="string">"animal"</span>);</div><div class="line">		System.out.println(es.size());<span class="comment">//2</span></div><div class="line">		<span class="comment">//获取第一个animal子级标签</span></div><div class="line">		Element first = root.element(<span class="string">"animal"</span>);</div><div class="line"></div><div class="line">		<span class="comment">//获取first的id属性</span></div><div class="line">		String value2 = first.attributeValue(<span class="string">"id"</span>);</div><div class="line">		System.out.println(<span class="string">"id:  "</span>+value2);</div><div class="line"></div><div class="line">		<span class="comment">//获取name这个子级标签</span></div><div class="line">		Element name = first.element(<span class="string">"name"</span>);</div><div class="line"></div><div class="line">		<span class="comment">//获取name文本内容</span></div><div class="line">		String text = name.getText();</div><div class="line">		System.out.println(<span class="string">"文本:"</span>+text);</div><div class="line">		</div><div class="line">		<span class="comment">//优化:(代码简单)</span></div><div class="line">		System.out.println(first.elementText(<span class="string">"name"</span>));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="模拟servlet"><a href="#模拟servlet" class="headerlink" title="模拟servlet"></a>模拟servlet</h2><p>Servlet是在服务器上运行的小程序.创建JavaEEServlet和AndroidServlet,假设它们是服务器上的两个小程序,导入官方web.xml配置文件,进行对应更改.<br>需求：<br>1.控制台录入访问路径<br>2.编写相关的实现程序（Servlet）<br>3.录入路径后，会执行相应的程序</p>
<h3 id="Servlet小程序"><a href="#Servlet小程序" class="headerlink" title="Servlet小程序"></a>Servlet小程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaEEServlet</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"JavaEE Servlet 创建了...."</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"JavaEE servlet 生成EE课程的 HTML 代码，发送回客户端"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"JavaEE Servlet 销毁....."</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AndroidServlet</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"Android Servlet 创建了...."</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"Android servlet 生成安卓课程的 HTML 代码，发送回客户端"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"Android Servlet 销毁....."</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="web-xml配置文件"><a href="#web-xml配置文件" class="headerlink" title="web.xml配置文件"></a>web.xml配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ee<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.geekhoon.demo.JavaEEServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ee<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/JavaEE<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>an<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.geekhoon.demo.AndroidServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>an<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/Android<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="测试类-1"><a href="#测试类-1" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Use</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		System.out.println(<span class="string">"请输入一个路径:"</span>);</div><div class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">		String url = sc.next();</div><div class="line">-----------------------------------------------------		</div><div class="line">DOM4J解析web.xml	</div><div class="line">		<span class="comment">//1.创建文件输入流</span></div><div class="line">		InputStream in = Use.class.getClassLoader().getResourceAsStream(<span class="string">"web.xml"</span>);</div><div class="line">		<span class="comment">//2.创建解析器</span></div><div class="line">		SAXReader r = <span class="keyword">new</span> SAXReader();</div><div class="line">		<span class="comment">//3.读流,生成dom树</span></div><div class="line">		Document doc = r.read(in);</div><div class="line">		in.close();</div><div class="line">		<span class="comment">//4.解析dom树</span></div><div class="line">		Element root = doc.getRootElement();</div><div class="line">		<span class="comment">//创建map集合存name和class</span></div><div class="line">		Map&lt;String,String&gt; nameClass = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</div><div class="line">		List&lt;Element&gt; es = root.elements(<span class="string">"servlet"</span>);</div><div class="line">-----------------------------------------------------</div><div class="line">使用XPath优化:使用选择器</div><div class="line">		<span class="comment">//List&lt;Element&gt; es = root.selectNodes("//servlet");</span></div><div class="line">		<span class="keyword">for</span> (Element e : es) &#123;</div><div class="line">			String name = e.elementText(<span class="string">"servlet-name"</span>);</div><div class="line">			String clazz = e.elementText(<span class="string">"servlet-class"</span>);</div><div class="line">			nameClass.put(name, clazz);</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//创建map集合存name和url</span></div><div class="line">		Map&lt;String,String&gt; nameUrl = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</div><div class="line">		List&lt;Element&gt; es2 = root.elements(<span class="string">"servlet-mapping"</span>);</div><div class="line">-----------------------------------------------------</div><div class="line">使用XPath优化:使用选择器</div><div class="line">		<span class="comment">//List&lt;Element&gt; es2 = root.selectNodes("//servlet-mapping");</span></div><div class="line">		<span class="keyword">for</span> (Element e2 : es2) &#123;</div><div class="line">			String name = e2.elementText(<span class="string">"servlet-name"</span>);</div><div class="line">			String urlpattern = e2.elementText(<span class="string">"url-pattern"</span>);</div><div class="line">			nameUrl.put(name, urlpattern);</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//整合上面两个数组,获得全类名及url</span></div><div class="line">		Map&lt;String,String&gt; urlClass = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</div><div class="line">		Set&lt;String&gt; keys = nameUrl.keySet();</div><div class="line">		<span class="keyword">for</span> (String key : keys) &#123;</div><div class="line">			String clazz = nameClass.get(key);</div><div class="line">			String urlpattern = nameUrl.get(key);</div><div class="line">			urlClass.put(urlpattern, clazz);</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//根据用户输入的url,查询对应的value</span></div><div class="line">		String className = urlClass.get(url);</div><div class="line">		<span class="comment">//System.out.println(className);</span></div><div class="line">		<span class="keyword">if</span>(className != <span class="keyword">null</span>)&#123;</div><div class="line">			<span class="comment">//反射,获得字节码对象</span></div><div class="line">			Class clazz = Class.forName(className);</div><div class="line">			<span class="comment">//获取构造方法</span></div><div class="line">			Constructor con = clazz.getConstructor();</div><div class="line">			<span class="comment">//创建对象</span></div><div class="line">			Object obj = con.newInstance();</div><div class="line">			<span class="comment">//获取方法</span></div><div class="line">			Method init = clazz.getMethod(<span class="string">"init"</span>);</div><div class="line">			Method service = clazz.getMethod(<span class="string">"service"</span>);</div><div class="line">			Method destory = clazz.getMethod(<span class="string">"destory"</span>);</div><div class="line">			<span class="comment">//执行方法</span></div><div class="line">			init.invoke(obj);</div><div class="line">			service.invoke(obj);</div><div class="line">			destory.invoke(obj);</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			System.out.println(<span class="string">"路径不存在"</span>);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>约束就是规范xml书写的规则,限制XML可以使用的标签的名称,属性及内容体</p>
<h3 id="DTD约束"><a href="#DTD约束" class="headerlink" title="DTD约束"></a>DTD约束</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">文档声明:</div><div class="line">	内部:</div><div class="line">		<span class="meta">&lt;!DOCTYPE 根元素[...]&gt;</span></div><div class="line"></div><div class="line">	外部:</div><div class="line">		本地:</div><div class="line">			<span class="meta">&lt;!DOCTYPE 根元素 SYSTEM "路径"&gt;</span></div><div class="line"></div><div class="line">		外网:</div><div class="line">			<span class="meta">&lt;!DOCTYPE 根元素 PUBLIC "DTD名称" "DTD路径"&gt;</span></div><div class="line"></div><div class="line">元素声明:</div><div class="line">	<span class="tag">&lt;<span class="name">!ELEMENT</span> 元素名 (元素描述)&gt;</span></div><div class="line">	元素描述:</div><div class="line">		+(1或多) ?(0或1) *(任意) #PCDATA(文本)...</div><div class="line"></div><div class="line">属性声明:</div><div class="line">	<span class="tag">&lt;<span class="name">!ATTLIST</span> 元素名 属性名 属性类型 约束&gt;</span></div><div class="line">	属性类型:</div><div class="line">		ID	唯一</div><div class="line">		CDATA	文本</div><div class="line">		(e1,e2,...)	枚举 ,多选一</div><div class="line">	约束:</div><div class="line">		#REQUIRED	必须</div><div class="line">		#IMPLIED	可选</div></pre></td></tr></table></figure>
<h3 id="Schema约束"><a href="#Schema约束" class="headerlink" title="Schema约束"></a>Schema约束</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">使用:</div><div class="line">	&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line">	<span class="comment">&lt;!-- </span></div><div class="line">		xmlns:默认名称空间;</div><div class="line">		xmlns:xsi:显示名称空间;</div><div class="line">		xsi:schemaLocation:设置名称空间对应的地址</div><div class="line">			语法:</div><div class="line">				名称空间 (空格) 位置</div><div class="line">	 --&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">users</span> <span class="attr">xmlns</span>=<span class="string">"geekhoon/schemaRules"</span></span></div><div class="line">		   <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">		   <span class="attr">xsi:schemaLocation</span>=<span class="string">"geekhoon/schemaRules cn/itcast/day11/schema/persons.xsd"</span>&gt;</div><div class="line"></div><div class="line">	<span class="tag">&lt;/<span class="name">users</span>&gt;</span></div><div class="line"></div><div class="line">自定义:</div><div class="line">	&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line">	<span class="comment">&lt;!-- </span></div><div class="line">		xmlns:默认名称空间;</div><div class="line">		targetNamespace:当前Schema的名称,可自定义;</div><div class="line">		xmlns:tns:显示名称空间;</div><div class="line">		elementFormDefault:使用默认值;</div><div class="line">	 --&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">schema</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span> </span></div><div class="line">		    <span class="attr">targetNamespace</span>=<span class="string">"geekhoon/schemaRules"</span></div><div class="line">		    <span class="attr">xmlns:tns</span>=<span class="string">"geekhoon/schemaRules"</span></div><div class="line">		    <span class="attr">elementFormDefault</span>=<span class="string">"qualified"</span>&gt;</div><div class="line">		<span class="comment">&lt;!-- 定义根标签name:定义根标签的名称;--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">"users"</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!-- 声明当前标签是一个复杂的标签(有属性,有子标签视为根标签) --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">complexType</span>&gt;</span></div><div class="line">				<span class="comment">&lt;!-- 限制子标签出现的个数,minOccurs:最少,maxOccurs:最多;maxOccurs="unbounded"可以任意 --&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">sequence</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">complexType</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">sequence</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span> <span class="attr">maxOccurs</span>=<span class="string">"1"</span>&gt;</span></div><div class="line">								<span class="comment">&lt;!-- 声明标签,name:标签名,type:数据类型 --&gt;</span></div><div class="line">								<span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">type</span>=<span class="string">"string"</span>&gt;</span><span class="tag">&lt;/<span class="name">element</span>&gt;</span></div><div class="line">								<span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"string"</span>&gt;</span><span class="tag">&lt;/<span class="name">element</span>&gt;</span></div><div class="line">							<span class="tag">&lt;/<span class="name">sequence</span>&gt;</span></div><div class="line">							<span class="comment">&lt;!-- 声明属性,name:属性名,type:属性类型,use:约束;use="required"必须写 --&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">attribute</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">type</span>=<span class="string">"ID"</span> <span class="attr">use</span>=<span class="string">"required"</span>&gt;</span><span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></div><div class="line">						<span class="tag">&lt;/<span class="name">complexType</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">element</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">sequence</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">complexType</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">element</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">schema</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1.概念&lt;/strong&gt;&lt;br&gt;XML(Extensible Markup Language),是可扩展的标记语言.&lt;br&gt;标记—–由标签组成&lt;br&gt;可扩展—标签可以自定义&lt;br&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="https://geekhoon.github.io/categories/JavaWeb/"/>
    
    
      <category term="前端开发" scheme="https://geekhoon.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>DBUtils</title>
    <link href="https://geekhoon.github.io/2017/03/30/22-DBUtils/"/>
    <id>https://geekhoon.github.io/2017/03/30/22-DBUtils/</id>
    <published>2017-03-30T12:37:56.000Z</published>
    <updated>2017-04-02T08:49:08.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>1.是JDBC的简化开发工具包,简化数据库相关操作<br>2.需要导入jar包: commons-dbutils-1.6.jar<br><a id="more"></a>    </p>
<h3 id="QueryRunner实现增删改"><a href="#QueryRunner实现增删改" class="headerlink" title="QueryRunner实现增删改"></a>QueryRunner实现增删改</h3><p>方法:<br>    update(Connection conn,String sql,Object…params): 执行增删改<br>    其中Object…params: 可变参数,Object类型,当SQL语句中出现?占位符时使用<br>DBUTils中补齐SQL语句的参数使用了可变参数,可以传递一个具体的数组,也可以直接传递数组元素,如果是后者,编译后直接将这些元素再组织成一个数组</p>
<h4 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="comment">//获取数据库连接</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Connection con = JDBCUtilsConfig.getConnection();</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">		insert();</div><div class="line">		<span class="comment">//update();</span></div><div class="line">		<span class="comment">//delete();</span></div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">		<span class="comment">//创建QueryRunner类对象</span></div><div class="line">		QueryRunner qr = <span class="keyword">new</span> QueryRunner();</div><div class="line">		String sql = <span class="string">"INSERT INTO sort (sname,sprice,sdesc) VALUES (?,?,?)"</span>;</div><div class="line">		<span class="comment">//将三个占位符的实际参数, 写在数组中</span></div><div class="line">		Object[] params = &#123;<span class="string">"体育用品"</span>,<span class="number">289.32</span>,<span class="string">"购买体育用品"</span>&#125;;</div><div class="line">		<span class="comment">//调用QueryRunner类的方法update执行sql语句</span></div><div class="line">		<span class="keyword">int</span> row = qr.update(con, sql, params);</div><div class="line">		System.out.println(row);</div><div class="line">		<span class="comment">//调用DBUtils释放资源</span></div><div class="line">		DbUtils.closeQuietly(con);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">	<span class="comment">//创建QueryRunner类对象</span></div><div class="line">	QueryRunner qr = <span class="keyword">new</span> QueryRunner();</div><div class="line">	String sql = <span class="string">"UPDATE sort SET sname = ?,sprice = ?,sdesc = ? WHERE sid = ?"</span>;</div><div class="line">	<span class="comment">//定于Object数组,存取实际参数</span></div><div class="line">	Object[] params = &#123;<span class="string">"花卉"</span>,<span class="number">100.88</span>,<span class="string">"情人节玫瑰"</span>,<span class="number">4</span>&#125;;</div><div class="line">	<span class="keyword">int</span> row = qr.update(con, sql, params);</div><div class="line">	System.out.println(row);</div><div class="line">	<span class="comment">//调用DBUtils释放资源</span></div><div class="line">	DbUtils.closeQuietly(con);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</div><div class="line">	<span class="comment">//创建QueryRunner对象</span></div><div class="line">	QueryRunner qr = <span class="keyword">new</span> QueryRunner();</div><div class="line">	String sql = <span class="string">"DELETE FROM sort WHERE sid = ?"</span>;</div><div class="line">	<span class="keyword">int</span> row = qr.update(con, sql, <span class="number">9</span>);</div><div class="line">	System.out.println(row);</div><div class="line">	DbUtils.closeQuietly(con);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="QueryRunner实现查询"><a href="#QueryRunner实现查询" class="headerlink" title="QueryRunner实现查询"></a>QueryRunner实现查询</h3><p>用来完成表数据的查询操作方法:<br>    query(Connection conn, String sql, ResultSetHandler<t> rsh, Object… params):<br>ResultSetHandler<t> rsh: 结果集的处理方式,传递的是ResultSetHandler接口的实现类<br>注意: query()的返回值是泛型类型T</t></t></p>
<h4 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h4><p><strong>1.概念</strong><br>一个普通Java类,在开发中常用封装数据,一般数据库的一张表对应一个Java类,类名对应表名,类中的字段对应表中的字段<br><strong>2.创建JavaBean时,必须得遵循一定的规范</strong><br> A、必须有包,所有数据表对应的类存放同一文件夹下<br> B、声明类时必须实现序列化接口,实现serializable(但是好多JavaBean实现没有遵守此规范)<br> C、属性私有，提供公共的set/get方法,让属性的数据赋值更为安全<br> D、必须提供无参构造<br>  场景1：如果当前类没有自定义构造方法，这是系统默认提供<br>  场景2：如果自定义了一个有参构造，这时，我们必须自己提供一个无参构造</p>
<h4 id="ResultSetHandler结果集处理类"><a href="#ResultSetHandler结果集处理类" class="headerlink" title="ResultSetHandler结果集处理类"></a>ResultSetHandler结果集处理类</h4><p>8种结果集的处理方式:<br>1.ArrayHandler——- 将第一条结果的每一个字段都当成数组的一个元素,组织成一个数组,即结果的字段个数就是数组长度<br>2.ArrayListHandler— 将每一条结果组织成一个数组，再将数组存储进集合<br>3.BeanHandler——– 将查询结果的第一条记录组织成一个 JavaBean 对象<br>4.BeanListHandler—- 将每一条记录组织成一个 JavaBean 对象，然后将对象存入集合<br>5.ColumnListHandler– 将结果集中某一列的数据存放到List中(List<object>)<br>6.ScalarHandler—— 获取单个结果，一般结合聚合函数使用<br>7.MapHandler——— 将第一条记录组织成一个 map 集合，键是字段名，值是字段对应的值<br>8.MapListHandler—– 将每一条记录组织成一个 map 集合，这些map 集合再存入 List</object></p>
<h4 id="ArrayHandler与ArrayListHandler查询"><a href="#ArrayHandler与ArrayListHandler查询" class="headerlink" title="ArrayHandler与ArrayListHandler查询"></a>ArrayHandler与ArrayListHandler查询</h4><p>1.ArrayHandler: 将结果集的第一行存储到对象数组中Object[]<br>不管查询到几行,只存储第一行<br>数组长度不等于0,代表查询到内容了<br>2.ArrayListHandler: 将结果集的每一行封装到对象数组中,出现很多对象数组,将对象数组存储到list集合<br>返回值: 存储很多对象数组的List集合<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="comment">//获取数据库连接</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Connection con = JDBCUtilsConfig.getConnection();</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">		arrayHandler();</div><div class="line">		<span class="comment">//arrayListHandler();</span></div><div class="line">		<span class="comment">//调用DBUtils释放资源</span></div><div class="line">		DbUtils.closeQuietly(con);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">ArrayHandler:</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">arrayHandler</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">	QueryRunner qr = <span class="keyword">new</span> QueryRunner();</div><div class="line">	String sql = <span class="string">"SELECT * FROM sort"</span>;</div><div class="line"><span class="comment">//query方法传递的参数有:</span></div><div class="line"><span class="comment">//连接对象,sql语句,结果集处理方式的实现类,有占位符的话还有加上实际参数</span></div><div class="line">	Object[] result = qr.query(con, sql, <span class="keyword">new</span> ArrayHandler());</div><div class="line">	<span class="keyword">if</span> (result.length != <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">for</span> (Object obj : result) &#123;</div><div class="line">			System.out.print(obj+<span class="string">"\t"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		System.out.println(<span class="string">"没有查询到数据"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ArrayListHandler:</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">arrayListHandler</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">	QueryRunner qr = <span class="keyword">new</span> QueryRunner();</div><div class="line">	String sql = <span class="string">"SELECT * FROM sort"</span>;</div><div class="line"><span class="comment">//query方法传递的参数有:</span></div><div class="line"><span class="comment">//连接对象,sql语句,结果集处理方式的实现类,有占位符的话还有加上实际参数</span></div><div class="line">	List&lt;Object[]&gt; result = qr.query(con, sql, <span class="keyword">new</span> ArrayListHandler());</div><div class="line">	<span class="keyword">if</span> (result.size() != <span class="number">0</span>) &#123;</div><div class="line">	<span class="comment">//遍历集合</span></div><div class="line">		<span class="keyword">for</span> (Object[] objs : result) &#123;</div><div class="line">			<span class="comment">//遍历对象数组</span></div><div class="line">			<span class="keyword">for</span> (Object obj : objs) &#123;</div><div class="line">				System.out.print(obj+<span class="string">"\t"</span>);</div><div class="line">			&#125;</div><div class="line">			System.out.println();</div><div class="line">		&#125;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		System.out.println(<span class="string">"没有查询到数据"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="BeanHandler与BeanListHandler查询"><a href="#BeanHandler与BeanListHandler查询" class="headerlink" title="BeanHandler与BeanListHandler查询"></a>BeanHandler与BeanListHandler查询</h4><p>1.BeanHandler: 将结果集的第一行数据,封装成JavaBean对象<br>注意: 将数据封装到JavaBean对象, Sort类必须有空参构造<br>2.BeanListHandler: 将结果集的每一行数据,封装成JavaBean对象<br>多个JavaBean对象,封装到List集合<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">BeanHandler:</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">beanHandler</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">	QueryRunner qr = <span class="keyword">new</span> QueryRunner();</div><div class="line">	String sql = <span class="string">"SELECT * FROM sort"</span>;</div><div class="line">	<span class="comment">//调用方法,传递结果实现类BeanHandler</span></div><div class="line">	<span class="comment">//BeanHandler(Class&lt;T&gt; type)</span></div><div class="line">	Sort s = qr.query(con, sql, <span class="keyword">new</span> BeanHandler&lt;Sort&gt;(Sort.class));</div><div class="line">	System.out.println(s);</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line">BeanListHandler:</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">beanListHandler</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">	QueryRunner qr = <span class="keyword">new</span> QueryRunner();</div><div class="line">	String sql = <span class="string">"SELECT * FROM sort"</span>;</div><div class="line">	<span class="comment">//调用方法传递结果集的实现类BeanListHandler</span></div><div class="line">	List&lt;Sort&gt; list = qr.query(con, sql, <span class="keyword">new</span> BeanListHandler&lt;Sort&gt;(Sort.class));</div><div class="line">	<span class="keyword">for</span> (Sort s : list) &#123;</div><div class="line">		System.out.println(s);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="ColumnListHandler与ScalarHandler查询"><a href="#ColumnListHandler与ScalarHandler查询" class="headerlink" title="ColumnListHandler与ScalarHandler查询"></a>ColumnListHandler与ScalarHandler查询</h4><p>1.ColumnListHandler: 将结果集指定列的数据存储到List集合<br>List<object>: 集合泛型是Object<br>2.ScalarHandler: 适用于查询后只有一个结果(聚合函数的结果)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">ColumnListHandler:</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">columnListHandler</span><span class="params">()</span><span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">	QueryRunner qr = <span class="keyword">new</span> QueryRunner();</div><div class="line">	String sql = <span class="string">"SELECT * FROM sort"</span>;</div><div class="line">	<span class="comment">//调用方法query,传递结果集实现类ColumnListHandler</span></div><div class="line">	<span class="comment">//实现类构造方法中,使用字符串的列名</span></div><div class="line">	List&lt;Object&gt; list = qr.query(con, sql, <span class="keyword">new</span> ColumnListHandler&lt;Object&gt;(<span class="string">"sname"</span>));</div><div class="line">	<span class="keyword">for</span> (Object obj : list) &#123;</div><div class="line">		System.out.println(obj);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ScalarHandler:</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">scalarHandler</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">	QueryRunner qr = <span class="keyword">new</span> QueryRunner();</div><div class="line">	String sql = <span class="string">"SELECT COUNT(*) FROM sort"</span>;</div><div class="line">	<span class="comment">//qr.query(con, sql, new ScalarHandler&lt;Object&gt;());</span></div><div class="line">	<span class="comment">//如果已知结果为int, 泛型直接写成long, 不知道的话使用Object</span></div><div class="line">	Long count = qr.query(con, sql, <span class="keyword">new</span> ScalarHandler&lt;Long&gt;());</div><div class="line">	System.out.println(count);</div><div class="line">&#125;</div></pre></td></tr></table></figure></object></p>
<h4 id="MapHandler与MapListHandler查询"><a href="#MapHandler与MapListHandler查询" class="headerlink" title="MapHandler与MapListHandler查询"></a>MapHandler与MapListHandler查询</h4><p>1.MapHandler: 将结果集的第一行数据,封装到map集合<br>键: 查询的列名<br>值: 对应列的数据<br>2.MapListHandler: 将结果集每一行存储到Map集合,键:列名,值:数据<br>Map集合过多,存储到List集合<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">MapHandler:</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mapHandler</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">	QueryRunner qr = <span class="keyword">new</span> QueryRunner();</div><div class="line">	String sql = <span class="string">"SELECT * FROM sort"</span>;</div><div class="line">	<span class="comment">//返回值是一个Map集合</span></div><div class="line">	Map&lt;String, Object&gt; map = qr.query(con, sql, <span class="keyword">new</span> MapHandler());</div><div class="line">	<span class="keyword">for</span> (String key : map.keySet()) &#123;</div><div class="line">		System.out.println(key+<span class="string">" "</span>+map.get(key));</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">MapListHandler:</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mapListHandler</span><span class="params">()</span><span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">	QueryRunner qr = <span class="keyword">new</span> QueryRunner();</div><div class="line">	String sql = <span class="string">"SELECT *  FROM sort"</span>;</div><div class="line">	<span class="comment">//返回值是List集合, 存储的是Map集合</span></div><div class="line">	List&lt;Map&lt;String, Object&gt;&gt; list = qr.query(con, sql, <span class="keyword">new</span> MapListHandler());</div><div class="line">	<span class="keyword">for</span> (Map&lt;String, Object&gt; map : list) &#123;</div><div class="line">		<span class="keyword">for</span> (String key : map.keySet()) &#123;</div><div class="line">			System.out.print(<span class="string">"\t"</span>+key+<span class="string">"\t"</span>+map.get(key)+<span class="string">"\t"</span>);</div><div class="line">		&#125;</div><div class="line">		System.out.println();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><p>对连接池对象进行测试:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>.工具类返回的是一个DataSource接口的数据源</div><div class="line"><span class="number">2</span>.QueryRunner类的构造方法中可以直接接收DataSource接口的实现类</div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.commons.dbutils.QueryRunner;</div><div class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.ArrayListHandler;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</div><div class="line">	<span class="comment">//QueryRunner类对象,写在类成员位置</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> QueryRunner qr = <span class="keyword">new</span> QueryRunner(JDBCUtils.getDataSource());</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">//insert();</span></div><div class="line">		select();</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//定义方法,实现数据的查询</span></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span> </span>&#123;</div><div class="line">		String sql = <span class="string">"SELECT * FROM sort"</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			List&lt;Object[]&gt; list = qr.query(sql, <span class="keyword">new</span> ArrayListHandler());</div><div class="line">			<span class="keyword">for</span> (Object[] objs : list) &#123;</div><div class="line">				<span class="keyword">for</span> (Object obj : objs) &#123;</div><div class="line">					System.out.print(obj+<span class="string">"\t"</span>);</div><div class="line">				&#125;</div><div class="line">				System.out.println();</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"查询数据失败"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//定义方法,实现数据的添加</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</div><div class="line">		String sql = <span class="string">"INSERT INTO sort (sname,sprice,sdesc) VALUES (?,?,?)"</span>;</div><div class="line">		Object[] params = &#123;<span class="string">"水果"</span>,<span class="number">100.00</span>,<span class="string">"香蕉	"</span>&#125;;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">int</span> row = qr.update(sql, params);</div><div class="line">			System.out.println(row);</div><div class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"添加数据失败"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><pre><code>1.在本地创建数据库和表
 数据库名称:demo
 表名:user
 表中的字段名称及类型:
    字段名称        类型        要求
    id                int            主键,自增
    username        字符串(20)
    password        字符串(20)
2.新建java工程或者web工程
3.导入jar包和提供好的工具类
4.完善c3p0.properties文件
5.编写相应的实体类(User)
6.通过单元测试使用DBUtils完成用户的添加操作
7.通过单元测试使用DBUtils完成用户的查询操作
</code></pre><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>1.jar包</p>
<pre><code>- mysql-connector-java-5.1.39-bin.jar
- commons-dbutils-1.4.jar
- c3p0-0.9.1.2.jar
</code></pre><p>2.工具类</p>
<pre><code>- DataSourceUtils.java    
</code></pre><p>3.配置文件</p>
<pre><code>- c3p0-config.xml
</code></pre><h4 id="c3p0配置文件"><a href="#c3p0配置文件" class="headerlink" title="c3p0配置文件"></a>c3p0配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">default-config</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 基本配置 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span>&gt;</span>jdbc:mysql://localhost:3306/demo<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">default-config</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="DataSourceUtils工具类"><a href="#DataSourceUtils工具类" class="headerlink" title="DataSourceUtils工具类"></a>DataSourceUtils工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.sql.Connection;</div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.sql.DataSource;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceUtils</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> DataSource ds=<span class="keyword">new</span> ComboPooledDataSource();</div><div class="line">	</div><div class="line">	<span class="comment">//获取连接池</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> ds;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//获取连接</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</div><div class="line">		<span class="keyword">return</span> ds.getConnection();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="User实体类"><a href="#User实体类" class="headerlink" title="User实体类"></a>User实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">	<span class="keyword">private</span> String username;</div><div class="line">	<span class="keyword">private</span> String password;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> username;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.username = username;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> password;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.password = password;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"User [id="</span> + id + <span class="string">", username="</span> + username + <span class="string">", password="</span> + password + <span class="string">"]"</span>;</div><div class="line">	&#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="测试类-1"><a href="#测试类-1" class="headerlink" title="测试类"></a>测试类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.sql.DataSource;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.commons.dbutils.QueryRunner;</div><div class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanListHandler;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> </span>&#123;</div><div class="line">	DataSource ds = DataSourceUtils.getDataSource();</div><div class="line">	<span class="comment">//单元测试</span></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		QueryRunner qr = <span class="keyword">new</span> QueryRunner(ds);</div><div class="line">		String sql = <span class="string">"INSERT INTO user (username,password) VALUES (?,?)"</span>;</div><div class="line">		<span class="keyword">int</span> row =qr.update(sql,<span class="string">"王五"</span>, <span class="string">"jsdhjd"</span>);</div><div class="line">		<span class="keyword">if</span> (row &gt; <span class="number">0</span>) &#123;</div><div class="line">			System.out.println(<span class="string">"添加成功"</span>);</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			System.out.println(<span class="string">"添加失败"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//单元测试</span></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		</div><div class="line">		QueryRunner qr = <span class="keyword">new</span> QueryRunner(ds);</div><div class="line">		String sql = <span class="string">"SELECT * FROM user"</span>;</div><div class="line">		List&lt;User&gt; list = qr.query(sql,<span class="keyword">new</span> BeanListHandler&lt;User&gt;(User.class));</div><div class="line">		<span class="keyword">for</span> (User user : list) &#123;</div><div class="line">			System.out.println(user);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="几个易混淆概念"><a href="#几个易混淆概念" class="headerlink" title="几个易混淆概念"></a>几个易混淆概念</h3><p>1.JDBC:Java提供的访问数据库规范<br>2.JDBCUtils:JDBC工具类,用于获得连接对象或连接池对象<br>3.JDBC连接池:作用在程序与数据库连接的中间环节,侧重于连接(Connection)的创建与管理实现资源复用,提高执行效率<br>4.DBCP:一种实现JDBC连接池的第三方形式<br>5.DBUtils:作用与程序端,侧重于SQL语句操作的优化封装功能实现,简化代码书写<br>备注:<br>(1)JDBCUtils和DBUtils,前者获取连接对象或连接池对象,后者可以对数据库中数据进行增删改查<br>(2)DBUtils不是只在有连接池的情况下才能使用,只要是有数据库连接对象,就可以使用</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;1.是JDBC的简化开发工具包,简化数据库相关操作&lt;br&gt;2.需要导入jar包: commons-dbutils-1.6.jar&lt;br&gt;
    
    </summary>
    
      <category term="JAVA进阶" scheme="https://geekhoon.github.io/categories/JAVA%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="数据库" scheme="https://geekhoon.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>JDBC连接池</title>
    <link href="https://geekhoon.github.io/2017/03/30/21-%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    <id>https://geekhoon.github.io/2017/03/30/21-连接池/</id>
    <published>2017-03-30T12:34:03.000Z</published>
    <updated>2017-03-30T16:47:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>连接池是存放连接的容器,如果频繁地获得连接和释放资源,非常消耗资源,通过连接池,共享连接,可以解决此类问题.当需要数据库连接时,通过池来获取Connection对象,用完后,调用Connection的close()回收对象,对象回到连接池中,并没有真正关闭.<br><a id="more"></a><br><strong>优点:</strong><br>1.实现了资源复用<br>2.效率更高</p>
<h3 id="连接池实现方式"><a href="#连接池实现方式" class="headerlink" title="连接池实现方式"></a>连接池实现方式</h3><p>1.DBCP(第三方实现)<br>2.C3P0(第三方实现)<br>3.自定义连接池</p>
<h3 id="DataSource接口"><a href="#DataSource接口" class="headerlink" title="DataSource接口"></a>DataSource接口</h3><p>Java为数据库连接提供了公共的接口,数据库厂商需要让自己的连接池实现这个接口</p>
<h3 id="BasicDataSource类"><a href="#BasicDataSource类" class="headerlink" title="BasicDataSource类"></a>BasicDataSource类</h3><p>数据源的规范接口javax.sql.DataSource的实现类<br>在org.apache.commons.dbcp中<br>方法: </p>
<pre><code>- setXXX(参数): setDriverClassName,setUrl,setUsername,setPassword
- getConnection(): 获取数据库连接
</code></pre><p><strong>常见配置项</strong><br>1.必须项<br>2.基本项:</p>
<pre><code>- maxActive: 最大连接数量
- minidle: 最小空闲连接
- maxidle: 最大空闲连接
- initialSize: 初始化连接
</code></pre><h2 id="DBCP实现连接池"><a href="#DBCP实现连接池" class="headerlink" title="DBCP实现连接池"></a>DBCP实现连接池</h2><p><strong>1.导jar包</strong></p>
<pre><code>- mysql-connector-java-5.1.37-bin.jar
- commons-dbcp-1.4.jar
- commons-pool-1.5.6.jar
</code></pre><p><strong>2.使用DBCP创建数据库连接池对象</strong></p>
<pre><code>- 创建语法:
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DataSource ds = BasicDataSourceFactory.createDatasource(<span class="string">"存储连接信息的 properties 集合"</span>);</div></pre></td></tr></table></figure>
<p><strong>3.使用DataSource,可以调用连接池对象的getConnection()获得Connection对象</strong><br>区别:con.close()时,之前是直接释放连接,但是现在是存储回连接池（详情看自定义连接池实现）</p>
<h3 id="配置文件代码实现"><a href="#配置文件代码实现" class="headerlink" title="配置文件代码实现"></a>配置文件代码实现</h3><p>dbcpconfig.properties放于src目录下<br>注意:工具类—方式2中只要4个必须配置项与配置文件匹配就可以,但是方式3和方式4中,因为是createDataSource(pro集合),直接进行加载,需要保证配置文件中4个必须项名字必须为driverClassName,url,username,password<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">#连接设置</div><div class="line">driverClassName=com.mysql.jdbc.Driver</div><div class="line">url=jdbc:mysql://localhost:3306/mybase</div><div class="line">username=root</div><div class="line">password=root</div><div class="line"></div><div class="line">#&lt;!-- 初始化连接 --&gt;</div><div class="line">initialSize=10</div><div class="line"></div><div class="line">#最大连接数量</div><div class="line">maxActive=50</div><div class="line"></div><div class="line">#&lt;!-- 最大空闲连接 --&gt;</div><div class="line">maxIdle=20</div><div class="line"></div><div class="line">#&lt;!-- 最小空闲连接 --&gt;</div><div class="line">minIdle=5</div><div class="line"></div><div class="line">#&lt;!-- 超时等待时间以毫秒为单位 6000毫秒/1000等于60秒 --&gt;</div><div class="line">maxWait=60000</div><div class="line"></div><div class="line"></div><div class="line">#JDBC驱动建立连接时附带的连接属性属性的格式必须为这样：[属性名=property;] </div><div class="line">#注意："user" 与 "password" 两个属性会被明确地传递，因此这里不需要包含他们。</div><div class="line">connectionProperties=useUnicode=true;characterEncoding=gbk</div><div class="line"></div><div class="line">#指定由连接池所创建的连接的自动提交（auto-commit）状态。</div><div class="line">defaultAutoCommit=true</div><div class="line"></div><div class="line">#driver default 指定由连接池所创建的连接的事务级别（TransactionIsolation）。</div><div class="line">#可用值为下列之一：（详情可见javadoc。）NONE,READ_UNCOMMITTED, READ_COMMITTED, REPEATABLE_READ, SERIALIZABLE</div><div class="line">defaultTransactionIsolation=READ_UNCOMMITTED</div></pre></td></tr></table></figure></p>
<h3 id="JDBCUtils工具类代码实现"><a href="#JDBCUtils工具类代码实现" class="headerlink" title="JDBCUtils工具类代码实现"></a>JDBCUtils工具类代码实现</h3><p>工具类—方式1: 使用DataSource的setXXX方法进行赋值<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</div><div class="line">	<span class="comment">//创建BasicDataSource类对象</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> BasicDataSource datasource = <span class="keyword">new</span> BasicDataSource();</div><div class="line">	</div><div class="line">	<span class="comment">//静态代码块,对BasicDataSource对象进行配置</span></div><div class="line">	<span class="keyword">static</span>&#123;</div><div class="line">		<span class="comment">//必须项</span></div><div class="line">		datasource.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</div><div class="line">		datasource.setUrl(<span class="string">"jdbc:mysql://localhost:3306/mybase"</span>);</div><div class="line">		datasource.setUsername(<span class="string">"root"</span>);</div><div class="line">		datasource.setPassword(<span class="string">"root"</span>);</div><div class="line">		<span class="comment">//自定义基本项,可选配置</span></div><div class="line">		datasource.setInitialSize(<span class="number">10</span>);<span class="comment">//初始化的连接数</span></div><div class="line">		datasource.setMaxActive(<span class="number">8</span>);<span class="comment">//最大连接数量</span></div><div class="line">		datasource.setMaxIdle(<span class="number">5</span>);<span class="comment">//最大空闲数</span></div><div class="line">		datasource.setMinIdle(<span class="number">1</span>);<span class="comment">//最小空闲数</span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//定义静态方法,返回BasicDataSource类的对象</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> datasource;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>工具类—方式2: 读取配置文件,使用DataSource的setXXX方法进行赋值<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtilsConfig</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> BasicDataSource dataSource = <span class="keyword">new</span> BasicDataSource();</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String driverClass;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String url;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String username;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String password;</div><div class="line">	</div><div class="line">	<span class="keyword">static</span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			readConfig();</div><div class="line">			dataSource.setDriverClassName(driverClass);</div><div class="line">			dataSource.setUrl(url);</div><div class="line">			dataSource.setUsername(username);</div><div class="line">			dataSource.setPassword(password);</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			<span class="comment">//e.printStackTrace();</span></div><div class="line">			System.out.println(e);</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"数据库连接失败"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readConfig</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		InputStream in = JDBCUtilsConfig.class.getClassLoader().getResourceAsStream(<span class="string">"database.properties"</span>);</div><div class="line">		Properties pro = <span class="keyword">new</span> Properties();</div><div class="line">		pro.load(in);</div><div class="line">		</div><div class="line">		driverClass = pro.getProperty(<span class="string">"driverClass"</span>);</div><div class="line">		url = pro.getProperty(<span class="string">"url"</span>);</div><div class="line">		username = pro.getProperty(<span class="string">"username"</span>);</div><div class="line">		password = pro.getProperty(<span class="string">"password"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> dataSource;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>工具类—方式3: (这种方式只是与方式4进行对比,并不会使用,因为效率极低)<br>读取配置文件,使用BasicDataSourceFactory.createDatasource()方法创建数据库连接池对象,但是每调用一次 getDs 方法,就创建一个新的连接池对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDs</span><span class="params">()</span></span>&#123;</div><div class="line">		DataSource ds = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//创建DBCP的数据库连接池对象</span></div><div class="line">			<span class="comment">//1、获取配置文件对应的输入流</span></div><div class="line">			InputStream in = JDBCUtils.class.getClassLoader().getResourceAsStream(<span class="string">"dbcpconfig.properties"</span>);</div><div class="line">			<span class="comment">//2、将流中数据读入集合</span></div><div class="line">			Properties pro = <span class="keyword">new</span> Properties();</div><div class="line">			pro.load(in);</div><div class="line">			ds = BasicDataSourceFactory.createDataSource(pro);</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> ds;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>工具类—方式4: 读取配置文件,使用BasicDataSourceFactory.createDatasource()方法创建数据库连接池对象,但只创建一个连接池对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> DataSource ds;</div><div class="line">	<span class="comment">//DatatSource 对象只会创建一个</span></div><div class="line">	<span class="keyword">static</span> &#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//创建DBCP的数据库连接池对象</span></div><div class="line">			<span class="comment">//1、获取配置文件对应的输入流</span></div><div class="line">			InputStream in = JDBCUtils.class.getClassLoader().getResourceAsStream(<span class="string">"dbcpconfig.properties"</span>);</div><div class="line">			<span class="comment">//2、将流中数据读入集合</span></div><div class="line">			Properties pro = <span class="keyword">new</span> Properties();</div><div class="line">			pro.load(in);</div><div class="line">			ds = BasicDataSourceFactory.createDataSource(pro);</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDs</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> ds;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="测试类代码实现"><a href="#测试类代码实现" class="headerlink" title="测试类代码实现"></a>测试类代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception  </span>&#123;</div><div class="line">		<span class="comment">//获取连接对象</span></div><div class="line">		Connection con = JDBCUtils.getDs().getConnection();</div><div class="line">		<span class="comment">//获取执行者对象</span></div><div class="line">		PreparedStatement ps = con.prepareStatement(<span class="string">"select * from teacher"</span>);</div><div class="line">		<span class="comment">//执行sql</span></div><div class="line">		ResultSet rs = ps.executeQuery();</div><div class="line">		<span class="comment">//处理结果集</span></div><div class="line">		<span class="keyword">while</span>(rs.next())&#123;</div><div class="line">			System.out.println(rs.getString(<span class="number">1</span>) + <span class="string">"\t"</span> + rs.getString(<span class="number">2</span>));</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//关闭</span></div><div class="line">		rs.close();</div><div class="line">		ps.close();</div><div class="line">		<span class="comment">//和以前不同,连接池中取出的con调用close()没有真正关闭,而是存回连接池</span></div><div class="line">		con.close();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="C3P0实现连接池"><a href="#C3P0实现连接池" class="headerlink" title="C3P0实现连接池"></a>C3P0实现连接池</h2><p><strong>1.导jar包</strong></p>
<pre><code>- 驱动:mysql-connector-java-5.1.39-bin.jar
- c3p0-0.9.2-pre5.jar
- mchange-commons-java-0.2.3.jar
</code></pre><p><strong>2.使用C3P0创建对应的数据库连接池对象</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DataSource ds = <span class="keyword">new</span> ComboPooledDataSource();</div></pre></td></tr></table></figure></p>
<p>注意:<br>1)、虽然有配置文件,但是配置文件并没有自己读取,new对象时,c3p0会自动读取配置文件,此过程隐藏<br>2)、保证配置文件存在的路径在src下,其实复制到bin目录下,读取时是从bin目录下查找的<br>3)、配置文件的文件名必须固定— c3p0-config.xml<br><strong>3.具体的连接对象使用与DBCP、JDBC一样.con.close()不是真的释放,而是存储回连接池</strong><br><strong>4.C3P0配置信息</strong><br>默认配置(default-config)与命名配置(named-config)</p>
<pre><code>- 一般一个程序对应一个数据库，但是可能一个程序对应多个数据库
- 使用 default-config 配置最常用的数据库,使用 named-config 配置其余数据库
- new ComboPooledDataSource() 根据默认配置创建一个连接池
- new ComboPooledDataSource(&quot;name值&quot;) 根据指定的配置创建一个连接池
</code></pre><h3 id="配置文件代码实现-1"><a href="#配置文件代码实现-1" class="headerlink" title="配置文件代码实现"></a>配置文件代码实现</h3><p>c3p0-config.xml放于src目录下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 默认配置，如果没有指定则使用这个配置</span></div><div class="line">		默认配置最常用</div><div class="line">		</div><div class="line">		建议放在最开头。</div><div class="line">		放其他地方也没问题</div><div class="line">	 --&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">default-config</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span>&gt;</span>jdbc:mysql://127.0.0.1:3306/mybase<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"checkoutTimeout"</span>&gt;</span>30000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"idleConnectionTestPeriod"</span>&gt;</span>30<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdleTime"</span>&gt;</span>30<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span>&gt;</span>100<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatements"</span>&gt;</span>200<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">user-overrides</span> <span class="attr">user</span>=<span class="string">"test-user"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatements"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">user-overrides</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">default-config</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 命名的配置</span></div><div class="line">		一般的大型项目中，使用最多是命名配置</div><div class="line">	 --&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">named-config</span> <span class="attr">name</span>=<span class="string">"geekhoon"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 连接数据库的4项基本参数 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span>&gt;</span>jdbc:mysql://127.0.0.1:3306/geekhoon<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 如果池中数据连接不够时一次增长多少个 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireIncrement"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 初始化连接数 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span>&gt;</span>20<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 最小连接受 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 最大连接数 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span>&gt;</span>40<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- -JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatements"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 连接池内单个连接所拥有的最大缓存statements数 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatementsPerConnection"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">named-config</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">named-config</span> <span class="attr">name</span>=<span class="string">"geek"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 连接数据库的4项基本参数 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span>&gt;</span>jdbc:mysql://127.0.0.1:3306/geek<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 如果池中数据连接不够时一次增长多少个 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireIncrement"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 初始化连接数 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span>&gt;</span>20<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 最小连接受 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 最大连接数 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span>&gt;</span>40<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- -JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatements"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 连接池内单个连接所拥有的最大缓存statements数 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatementsPerConnection"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">named-config</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="JDBCUtils工具类代码实现-1"><a href="#JDBCUtils工具类代码实现-1" class="headerlink" title="JDBCUtils工具类代码实现"></a>JDBCUtils工具类代码实现</h3><p>工具类—方式1: 读取默认配置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> DataSource ds = <span class="keyword">new</span> ComboPooledDataSource();</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">ds</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> ds;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>工具类—方式2: 读取命名配置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> DataSource ds = <span class="keyword">new</span> ComboPooledDataSource(<span class="string">"geekhoon"</span>);</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">ds</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> ds;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="测试类代码实现-1"><a href="#测试类代码实现-1" class="headerlink" title="测试类代码实现"></a>测试类代码实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class Test &#123;</div><div class="line">	public static void main(String[] args) throws Exception &#123;</div><div class="line">		Connection con = JDBCUtils.ds().getConnection();</div><div class="line">		PreparedStatement ps = con.prepareStatement(&quot;select * from 表名&quot;);</div><div class="line">		ResultSet rs = ps.executeQuery();</div><div class="line">		while(rs.next())&#123;</div><div class="line">			System.out.println(rs.getString(1) + &quot;\t&quot; + rs.getString(2));</div><div class="line">		&#125;</div><div class="line">		rs.close();</div><div class="line">		ps.close();</div><div class="line">		con.close();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="自定义连接池"><a href="#自定义连接池" class="headerlink" title="自定义连接池"></a>自定义连接池</h2><p>三个步骤:<br>1.定义一个集合,存储若干连接<br>2.提供一个方法,获取相关连接,再将连接移出给调用者<br>3.提供一个方法,使用完连接时,再将连接存回该连接池</p>
<h3 id="自定义连接池写法1"><a href="#自定义连接池写法1" class="headerlink" title="自定义连接池写法1"></a>自定义连接池写法1</h3><p>写法1中,当使用完连接对象存回的时候,需要调用MyPool.close(Connection con);<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPool</span></span>&#123;</div><div class="line">	<span class="comment">//1.定义集合,存储连接</span></div><div class="line">	<span class="comment">//由于增删频繁,因此使用 LinkedList 而不是 ArrayList</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> LinkedList&lt;Connection&gt; pool = <span class="keyword">new</span> LinkedList&lt;Connection&gt;();</div><div class="line">	<span class="comment">//一旦创建,集合预先存储一些连接</span></div><div class="line">	<span class="keyword">static</span> &#123;</div><div class="line">		<span class="comment">//存储三个连接</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</div><div class="line">			pool.add(getCon());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Connection <span class="title">getCon</span><span class="params">()</span></span>&#123;</div><div class="line">		Connection con = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</div><div class="line">			con = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/geekhoon"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> con;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//2.提供一个方法,获取相关连接,再将连接移出给调用者</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConByPool</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="comment">//从集合取出一个连接 ---- 获取并移出</span></div><div class="line">		<span class="comment">/*</span></div><div class="line">		 * remove 和 get 区别：</div><div class="line">		 *  前者是获取并从集合移出</div><div class="line">		 *  后者只是获取,不移除 </div><div class="line">		 * </div><div class="line">		 */</div><div class="line">		<span class="comment">//版本1</span></div><div class="line">		<span class="comment">//return pool.remove();</span></div><div class="line">		<span class="comment">//版本2优化 ---- 判断是不是连接都被占用者，如果是，新建连接</span></div><div class="line">		<span class="keyword">if</span>(!pool.isEmpty())&#123;</div><div class="line">			<span class="keyword">return</span> pool.remove();</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> getCon();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//3.提供一个方法,使用完连接时,再将连接存回该连接池</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection con)</span></span>&#123;</div><div class="line">		pool.add(con);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="测试类代码实现-2"><a href="#测试类代码实现-2" class="headerlink" title="测试类代码实现"></a>测试类代码实现</h4><p>测试类1: 获取连接后,打印连接对象地址,然后存回连接池,由于连接池只有三个连接对象,当获取第四个连接对象时,由于之前的连接对象使用完后,已经存回了,所以con4打印的对象地址和con1的对象地址一样,实现了连接池的功能<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">//获取连接</span></div><div class="line">		Connection con1 = MyPool.getConByPool();</div><div class="line">		System.out.println(con1);</div><div class="line">		MyPool.close(con1);</div><div class="line">		Connection con2 = MyPool.getConByPool();</div><div class="line">		System.out.println(con2);</div><div class="line">		MyPool.close(con2);</div><div class="line">		Connection con3 = MyPool.getConByPool();</div><div class="line">		System.out.println(con3);</div><div class="line">		MyPool.close(con3);</div><div class="line">		</div><div class="line">		Connection con4 = MyPool.getConByPool();</div><div class="line">		System.out.println(con4);</div><div class="line">		MyPool.close(con4);</div><div class="line">		</div><div class="line">		System.out.println(MyPool.pool);<span class="comment">//打印的是3个元素,con4并没有创建新的连接对象</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试类2: 获取连接对象,打印对象地址后,并不存回,当获取第四个连接对象时,池中并没有连接,所以创建了新的连接,所以打印的四个对象地址都不相同,注意代码中1,2,3处打印,1处打印0个元素的集合,2处也打印0个元素的集合,3处打印4个元素的集合<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		Connection con1 = MyPool.getConByPool();</div><div class="line">		System.out.println(con1);</div><div class="line">		Connection con2 = MyPool.getConByPool();</div><div class="line">		System.out.println(con2);</div><div class="line">		Connection con3 = MyPool.getConByPool();</div><div class="line">		System.out.println(con3);</div><div class="line">		<span class="comment">//1	</span></div><div class="line">		System.out.println(MyPool.pool);</div><div class="line"></div><div class="line">		Connection con4 = MyPool.getConByPool();</div><div class="line">		System.out.println(con4);</div><div class="line">		<span class="comment">//2</span></div><div class="line">		System.out.println(MyPool.pool);</div><div class="line">		</div><div class="line">		MyPool.close(con1);</div><div class="line">		MyPool.close(con2);</div><div class="line">		MyPool.close(con3);</div><div class="line">		MyPool.close(con4);</div><div class="line">		<span class="comment">//3</span></div><div class="line">		System.out.println(MyPool.pool);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="自定义连接池写法2"><a href="#自定义连接池写法2" class="headerlink" title="自定义连接池写法2"></a>自定义连接池写法2</h3><p>写法2中,不再使用自定义连接池MyPool的close()进行存回,而是使用Connection接口的close()进行存回,但是我们知道Connection接口的close()只是单纯地释放掉资源,并没有存回操作.所以我们现在的想法是:<strong>重写close()</strong><br>在重写之前,首先我们要知道下面操作返回的是什么?<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Connection con = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/geekhoon"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</div><div class="line">DriverManager.getConnection()返回的是MySQL jar包中Connection接口的实现类对象</div><div class="line">这个实现类重写了Connection接口的方法</div></pre></td></tr></table></figure></p>
<p>第一种想法是:<strong>继承类</strong><br>找到jar包中Connection接口的实现类,重写close(),但有以下几方面问题:<br>1.这个类,在jar包,需要通过反射找到相关类<br>2.更换其他数据库jar包后,还要重新找,重新重写<br>3.Java只支持单继承,如果继承一个类,就不能继承其他类,使用起来有限制<br>第二中想法是:<strong>实现接口</strong><br>实现java.sql.Connection接口,即使更换jar包,连接池依然可用<br><strong>步骤:</strong><br>1.自定义实现类MyConnection实现Connection接口,重写里面的所有方法<br>2.在MyConnection类中传入一个Connection接口对象con,方法中除了自己要重写的方法外,其余的方法都要调用con原来的方法实现,即MySQL jar包下Connection接口的实现类重写的方法<br>3.需要重写的方法,不再调用con原来的方法实现,而是自定义实现<br><strong>MyConnection对象相对于Connection对象,前者包裹了后者,可以调用后者的功能,并且进行了功能增强,称之为装饰设计模式</strong></p>
<h4 id="MyConnection代码实现"><a href="#MyConnection代码实现" class="headerlink" title="MyConnection代码实现"></a>MyConnection代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConnection</span> <span class="keyword">implements</span> <span class="title">Connection</span> </span>&#123;</div><div class="line">	<span class="comment">//创建一个连接对象</span></div><div class="line">	<span class="keyword">private</span> Connection con;</div><div class="line">	<span class="comment">//创建一个集合,存连接对象,这个集合对象pool也就是连接池对象</span></div><div class="line">	<span class="keyword">private</span> LinkedList&lt;Connection&gt; pool;</div><div class="line">	<span class="comment">//定义有参构造</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyConnection</span><span class="params">(Connection con,LinkedList&lt;Connection&gt; pool)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.con = con;</div><div class="line">		<span class="keyword">this</span>.pool = pool;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">		<span class="comment">//con.close(); 这样写的话就是释放资源了</span></div><div class="line">		</div><div class="line">		pool.add(<span class="keyword">this</span>);<span class="comment">//存回缓存池,this代表调用者</span></div><div class="line">	&#125;</div><div class="line">	...还有N多方法不需要增强,但也需要重写,如下,就不一一列举了</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> PreparedStatement <span class="title">prepareStatement</span><span class="params">(String sql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">		<span class="keyword">return</span> con.prepareStatement(sql);<span class="comment">//调用con原来的方法实现</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="MyPool代码实现"><a href="#MyPool代码实现" class="headerlink" title="MyPool代码实现"></a>MyPool代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPool</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> LinkedList&lt;Connection&gt; pool = <span class="keyword">new</span> LinkedList&lt;Connection&gt;();</div><div class="line">	<span class="keyword">static</span> &#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</div><div class="line">			pool.add(getCon());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Connection <span class="title">getCon</span><span class="params">()</span></span>&#123;</div><div class="line">		Connection con = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</div><div class="line">			<span class="comment">//----------------------关键步骤------------------------</span></div><div class="line">			Connection conByJar = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/geekhoon"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</div><div class="line">			<span class="comment">//将Connection接口的实现类对象和连接池pool作为参数,传入有参构造,重写close()</span></div><div class="line">			con = <span class="keyword">new</span> MyConnection(conByJar,pool);<span class="comment">//con的close()就已经重写啦</span></div><div class="line">			<span class="comment">//-----------------------------------------------------</span></div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> con;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConByPool</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">if</span>(!pool.isEmpty())&#123;</div><div class="line">			<span class="keyword">return</span> pool.remove();</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> getCon();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="测试类代码实现-3"><a href="#测试类代码实现-3" class="headerlink" title="测试类代码实现"></a>测试类代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		Connection con1 = MyPool.getConByPool();</div><div class="line">		System.out.println(con1);</div><div class="line">		Connection con2 = MyPool.getConByPool();</div><div class="line">		System.out.println(con2);</div><div class="line">		Connection con3 = MyPool.getConByPool();</div><div class="line">		System.out.println(con3);</div><div class="line"></div><div class="line">		Connection con4 = MyPool.getConByPool();</div><div class="line">		System.out.println(con4);</div><div class="line">		</div><div class="line">		con1.close();</div><div class="line">		con2.close();</div><div class="line">		con3.close();</div><div class="line">		con4.close();</div><div class="line"></div><div class="line">		System.out.println(MyPool.pool);<span class="comment">//打印集合中有4个元素</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;连接池是存放连接的容器,如果频繁地获得连接和释放资源,非常消耗资源,通过连接池,共享连接,可以解决此类问题.当需要数据库连接时,通过池来获取Connection对象,用完后,调用Connection的close()回收对象,对象回到连接池中,并没有真正关闭.&lt;br&gt;
    
    </summary>
    
      <category term="JAVA进阶" scheme="https://geekhoon.github.io/categories/JAVA%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="数据库" scheme="https://geekhoon.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Bootstrap</title>
    <link href="https://geekhoon.github.io/2017/03/26/JavaWeb-04-Bootstrap/"/>
    <id>https://geekhoon.github.io/2017/03/26/JavaWeb-04-Bootstrap/</id>
    <published>2017-03-25T17:52:21.000Z</published>
    <updated>2017-03-28T13:17:48.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><pre><code>1. 是基于HTML,CSS,JS的前端框架(半成品).
   只需要提供固定的HTML结构,添加固定的css样式,就可以完成指定效果的实现
   框架------&gt; 也是一种封装,封装的高级形式
   封装------&gt; 方法---&gt;类(Java中封装特指类)---&gt;jar包---&gt;框架
</code></pre><a id="more"></a>
<pre><code>       1. jar包-----&gt; 封装的是某个功能模块(侧重于功能实现)
       2. 框架------&gt; 封装的是流程(结构性封装)    
2. 在JQuery的基础上实现的,是JQuery的插件
</code></pre><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><pre><code>1. 内置了一些常见的复杂的页面实现(封装了一些常见功能)
2. 可以实现响应式布局(根据响应终端自适应显示)
    根据访问终端屏幕的大小,动态的改变显示样式(只提供一套代码即可)
</code></pre><h4 id="Bootstrap开发环境"><a href="#Bootstrap开发环境" class="headerlink" title="Bootstrap开发环境"></a>Bootstrap开发环境</h4><pre><code>1. 引入JQuery实现,注意版本必须兼容
2. 将dist目录下的css font js文件夹复制到当前项目
注意: 这些文件夹必须平级
</code></pre><h3 id="Bootstrap容器"><a href="#Bootstrap容器" class="headerlink" title="Bootstrap容器"></a>Bootstrap容器</h3><pre><code>编写页面(界面),必然涉及的概念:
1. 容器: 存储页面元素的一个组件
2. 布局: 怎么在容器排放组件
容器:
1. 容器1:
    * 语法: &lt;div class=&quot;container&quot;&gt;&lt;/div&gt;
    * 效果: 大页面下两端有留白
2. 容器2:
    * 语法: &lt;div class=&quot;container-fluid&quot;&gt;&lt;/div&gt;
    * 效果: 两端无留白
拓展:
    我们只声明了class,但效果显现了,这个class怎么运行的?
    在引入的css文件中,编写相关的class样式了
So: class写错,可能识别不了,因为class值都是Bootstrap内置好的,不能随便使用
</code></pre><h3 id="Bootstrap布局"><a href="#Bootstrap布局" class="headerlink" title="Bootstrap布局"></a>Bootstrap布局</h3><pre><code>栅格(表格)系统:
1. 栅格本质是表格 ---- 行与列是两要素
2. 行与列实现
    1. 行 --- &lt;div class=&quot;row&quot;&gt;&lt;/div&gt; --- 可以写多个,代表多行
    2. 列 --- &lt;div class=&quot;col-屏幕代号-比例&quot;&gt;&lt;/div&gt;
       * Bootstrap中一行默认12单元列,编写的列必须声明一个所占的单元列数
注意:
    1. 12列是一个折中方案
    2. 行中分配列:
        * 所有列(比例)相加和为12
        * 小于12,空余部分不做处理
        * 大于12,大于12的部分会自动换行
</code></pre><h4 id="响应式布局机制"><a href="#响应式布局机制" class="headerlink" title="响应式布局机制"></a>响应式布局机制</h4><pre><code>1. Bootstrap将屏幕划分为四大类:
    1. 超小屏幕 &lt;= 768px ---- xs
    2. 小屏幕: 768 - 992 ---- sm
    3. 中等屏幕: 992 - 1200 - md
    4. 大屏幕: &gt;= 1200px ---- lg
2. 响应式布局的代码实现
    要设置某个屏幕下的占比 --- col-屏幕代号-占比
    现象: 
        1. 如果只设置lg,其余屏幕不按照占比分配
        2. 如果只设置xs,其余屏幕按照占比分配
    原则: 
        小屏幕优先,如果屏幕比我大,但是没设置占比,就按照我的占比来
        如果屏幕比我小,但是没设置占比,默认是换行,不受我的占比影响
    补充: 一个class属性可以设置多个值,不同值之间使用空格隔开
3. 拓展需求: 
    某些页面元素可能在某些屏幕下显示,某些屏幕下不显示:
    语法:
        方式1:(设置显示) 添加class visible-屏幕代号
        方式2:(设置隐藏) 添加class hidden-屏幕代号
    效果:
        在指定屏幕下显示(或隐藏),没有指定的不显示(或隐藏),没有小屏优先,必须严格对应
</code></pre><h3 id="基本模板"><a href="#基本模板" class="headerlink" title="基本模板"></a>基本模板</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"../css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/jquery-1.11.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/bootstrap.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;1. 是基于HTML,CSS,JS的前端框架(半成品).
   只需要提供固定的HTML结构,添加固定的css样式,就可以完成指定效果的实现
   框架------&amp;gt; 也是一种封装,封装的高级形式
   封装------&amp;gt; 方法---&amp;gt;类(Java中封装特指类)---&amp;gt;jar包---&amp;gt;框架
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="https://geekhoon.github.io/categories/JavaWeb/"/>
    
    
      <category term="前端开发" scheme="https://geekhoon.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>JQuery</title>
    <link href="https://geekhoon.github.io/2017/03/23/JavaWeb-03-JQuery/"/>
    <id>https://geekhoon.github.io/2017/03/23/JavaWeb-03-JQuery/</id>
    <published>2017-03-22T17:25:56.000Z</published>
    <updated>2017-03-28T13:17:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><pre><code>核心理念: write less,do more 
作用: 动态地修改内存中的html或css代码
1. JQuery是一个JavaScript框架,是对JS的封装,将一些常见的JS操作进行了封装,提高开发效率
    JQuery与JS的区别:类似与commons-io与JDK内置IO的关系
2. 兼容CSS3
3. 相对于JS,能更好地兼容浏览器(并没有完全兼容)
</code></pre><a id="more"></a>
<h3 id="JQuery的使用"><a href="#JQuery的使用" class="headerlink" title="JQuery的使用"></a>JQuery的使用</h3><pre><code>1. JQuery是一个第三方实现,必须下载相关实现库
2. 将实现库导入当前项目,类似于Java导入jar包
3. 当前HTML页面引入JQuery
&lt;script src=&quot;JQuery路径&quot;&gt;&lt;/script&gt;
</code></pre><h3 id="JQuery语法"><a href="#JQuery语法" class="headerlink" title="JQuery语法"></a>JQuery语法</h3><pre><code>记: JQuery是将JS对象的属性操作函数化了
注: JQuery中频繁使用jQuery函数,简化成一个$,二者等价
变量:
    var $变量名 = $(&quot;选择器&quot;);
    变量名前可以加$,代表是JQuery对象,区别于JS对象

    alert($变量名);//打印的是object Object代表是JQuery对象

注释:
    /*注解*/
    //注解
</code></pre><h4 id="获取JQuery对象"><a href="#获取JQuery对象" class="headerlink" title="获取JQuery对象"></a>获取JQuery对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">方式<span class="number">1</span>: 选择器获取</div><div class="line">	<span class="number">1.</span> 标签名(返回的是数组)</div><div class="line">		<span class="keyword">var</span> vs = $(<span class="string">"标签名"</span>); ====等价于==== <span class="built_in">document</span>.getElementByTagName(<span class="string">"标签名"</span>)</div><div class="line">	<span class="number">2.</span> 类名(返回的是数组)</div><div class="line">		<span class="keyword">var</span> vs = $(<span class="string">".类名"</span>); ====等价于==== <span class="built_in">document</span>.getElementByClassName(<span class="string">"类名"</span>)</div><div class="line">	<span class="number">3.</span> id(其实吧,id选择器返回的也是数组,只是数组长度为<span class="number">1</span>罢了)</div><div class="line">		<span class="keyword">var</span> v = $(<span class="string">"#id"</span>); ====等价于==== <span class="built_in">document</span>.getElementById(<span class="string">"id"</span>)</div><div class="line">方式<span class="number">2</span>: </div><div class="line">	<span class="number">1.</span> 获取JS对象</div><div class="line">	<span class="number">2.</span> 转换成JQuery对象</div><div class="line">	   语法: <span class="keyword">var</span> v = $(JS对象);</div><div class="line">	拓展:</div><div class="line">	   JQuery对象转换成JS对象: (不适用于数组)</div><div class="line">	   		语法(两种): </div><div class="line">				<span class="keyword">var</span> v = $(<span class="string">"选择器"</span>)[index];  <span class="comment">//如JQuery对象[0];</span></div><div class="line">				<span class="keyword">var</span> v = $(<span class="string">"选择器"</span>).get(index);</div><div class="line">	备注:</div><div class="line">	   JQuery对象转换成JS对象,数组不适用值得是JS数组,比如下面的例子</div><div class="line">	   但是如果是JQuery数组,是可以转成JS对象的,因为一句很重要的话:</div><div class="line">		JQ数组中每个元素都是JS对象	</div><div class="line">	<span class="comment">//JQuery 对象转 JS 对象注意</span></div><div class="line">		$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>);</div><div class="line">			<span class="comment">//JS数组转成 JQuery对象</span></div><div class="line">			<span class="keyword">var</span> arr2 = $(arr1);</div><div class="line">			<span class="comment">//arr2转为JS对象</span></div><div class="line">			<span class="keyword">var</span> arr3 = arr2[<span class="number">0</span>];</div><div class="line">			alert(arr3); <span class="comment">//打印a,所以说这种数组不适用这种转换方式</span></div><div class="line">		&#125;)</div><div class="line">	<span class="comment">//这种情况并不常见, JS对象转成JQ对象再转成JS....(似乎没什么意义)</span></div></pre></td></tr></table></figure>
<h4 id="操作JQuery对象"><a href="#操作JQuery对象" class="headerlink" title="操作JQuery对象"></a>操作JQuery对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">  * HTML代码/文本/值:</div><div class="line">  		$(<span class="string">"选择器"</span>).html();			--&gt;获取内容体;</div><div class="line">       $(<span class="string">"选择器"</span>).html(<span class="string">"文本/标签"</span>);	--&gt;设置内容体;</div><div class="line">       $(<span class="string">"选择器"</span>).text();		--&gt;获取文本;</div><div class="line">       $(<span class="string">"选择器"</span>).text(<span class="string">"文本"</span>);	--&gt;设置文本;</div><div class="line">       $(<span class="string">"选择器"</span>).val();		--&gt;获取value值;</div><div class="line">       $(<span class="string">"选择器"</span>).val(<span class="string">"新值"</span>);		--&gt;设置value值;</div><div class="line">  * 属性:</div><div class="line">       $(<span class="string">"选择器"</span>).prop(<span class="string">"属性名"</span>);         --&gt;获取属性值;</div><div class="line">       $(<span class="string">"选择器"</span>).prop(<span class="string">"属性名"</span>,<span class="string">"属性值"</span>); --&gt;设置属性;</div><div class="line">  * CSS类:</div><div class="line">       $(<span class="string">"选择器"</span>).css(<span class="string">"属性名"</span>)          --&gt;获取指定css样式;</div><div class="line">       $(<span class="string">"选择器"</span>).css(<span class="string">"属性名"</span>,<span class="string">"属性值"</span>)  --&gt;设置css样式;</div><div class="line">       $(<span class="string">"选择器"</span>).addClass(<span class="string">"class名"</span>);   --&gt;添加新的<span class="string">"样式类"</span>;</div><div class="line">       $(<span class="string">"选择器"</span>).removeClass(<span class="string">"class名"</span>); -&gt;移除指定<span class="string">"样式类"</span>;</div><div class="line">  * 文档操作:</div><div class="line">       内部(子元素):</div><div class="line">           $A.append($B)     --&gt;将$B追加到$A内部后;</div><div class="line">           $A.appendTo($B)   --&gt;将$A追加到$B内部后;($A的$不能去掉,因为appendTo是JQuery方法)</div><div class="line">           $A.prepend($B)    --&gt;将$B添加到$A内部前;</div><div class="line">           $A.prependTo($B)  --&gt;将$A添加到$B内部前;</div><div class="line">       外部(兄弟元素):</div><div class="line">           $A.after($B)        --&gt;将$B添加到$A之后;</div><div class="line">           $A.before($B)       --&gt;将$B添加到$A之前;</div><div class="line">           $A.insertAfter($B)  --&gt;将$A添加到$B之后;</div><div class="line">           $A.insertBefore($B) --&gt;将$A添加到$B之前;</div><div class="line">拓展:</div><div class="line">	prop之前是attr函数,后者由于兼容性问题已废弃</div><div class="line">注意:</div><div class="line"><span class="number">1.</span> prop和.css使用: 设置样式时使用css,因为不是所有的属性都能通过prop改</div><div class="line">	比如,tr中的bgcolor</div><div class="line"><span class="number">2.</span> html()和text()区别:</div><div class="line">	相同点: 二者都可以获取和设置内容体</div><div class="line">	不同点:</div><div class="line">		(<span class="number">1</span>)获取内容体:</div><div class="line">			html() ---&gt; 标签+文本</div><div class="line">			text() ---&gt; 纯文本</div><div class="line">		(<span class="number">2</span>)设置内容体:</div><div class="line">			html(<span class="string">""</span>) -&gt; 如果设置的内容有标签,标签会被浏览器解析</div><div class="line">			text(<span class="string">""</span>) -&gt; 如果设置的内容有标签,标签不会被浏览器解析,被当作普通文本</div><div class="line">	在html中常用html()</div><div class="line">	在xml中常用text()</div><div class="line"><span class="number">3.</span> $A.append($B)举例:</div><div class="line">      $(<span class="string">"#id值"</span>).append(<span class="string">"&lt;option&gt;北京&lt;/option&gt;"</span>);</div><div class="line">      $A.appendTo($B):</div><div class="line">   $(<span class="string">"&lt;option&gt;北京&lt;/option&gt;"</span>).appendTo($(<span class="string">"#id值"</span>));</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">更改样式时,推荐使用css进行更改,因为prop不是什么属性都能更改</div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> v = $(<span class="string">"#t1"</span>);</div><div class="line">		v.prop(<span class="string">"bgcolor"</span>,<span class="string">"red"</span>);<span class="comment">// 这种是改不了的</span></div><div class="line">		v.css(<span class="string">"background-color"</span>,<span class="string">"red"</span>); <span class="comment">//正解</span></div><div class="line">	&#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1px"</span> <span class="attr">cellpadding</span>=<span class="string">"0"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">tr</span> <span class="attr">id</span>=<span class="string">"t1"</span> <span class="attr">bgcolor</span>=<span class="string">"blue"</span> &gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>haha<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">html()和text()使用:</div><div class="line">首先要明白:</div><div class="line">1. 当设置值时,$(选择器).html("")和$(选择器).text("")更改的都是选择器下</div><div class="line">所有内容,而不是text只设置文本值了</div><div class="line">2. 获取值是,html()会获取包括标签在内的所有内容</div><div class="line">   text()只能获取标签内的文本内容</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/jquery-1.11.0.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">			$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="keyword">var</span> v = $(<span class="string">"#d1"</span>);</div><div class="line">				alert(v.html());<span class="comment">//&lt;font color="red"&gt;红&lt;/font&gt;</span></div><div class="line">				alert(v.text());<span class="comment">//红</span></div><div class="line">				v.html(<span class="string">"&lt;font color='blue'&gt;蓝&lt;/font&gt;"</span>);</div><div class="line">				alert(v.html());<span class="comment">//&lt;font color='blue'&gt;蓝&lt;/font&gt;</span></div><div class="line">				alert(v.text());<span class="comment">//蓝</span></div><div class="line">				v.text(<span class="string">"黑"</span>);</div><div class="line">				alert(v.html());<span class="comment">//黑</span></div><div class="line">				alert(v.text());<span class="comment">//黑</span></div><div class="line">				v.text(<span class="string">"&lt;font color='black'&gt;黑&lt;/font&gt;"</span>);</div><div class="line">				<span class="comment">//下面这句,尖括号进行了转义</span></div><div class="line">				alert(v.html());<span class="comment">//&amp;lt;font color='black'&amp;gt;黑&amp;lt;/font&amp;gt;</span></div><div class="line">				alert(v.text());<span class="comment">//&lt;font color='black'&gt;黑&lt;/font&gt;</span></div><div class="line">			&#125;);</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"d1"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span>红<span class="tag">&lt;/<span class="name">font</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">文档操作:</div><div class="line">需求:分别在div前后添加start和end,观察区别</div><div class="line">观察结果得出的结论:</div><div class="line">利用$A.prependTo($B)和$A.appendTo($B)添加时:</div><div class="line">$A必须是JQuery对象,不能直接编写一个标签字符串"<span class="tag">&lt;<span class="name">font</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">font</span>&gt;</span>"</div><div class="line">当然直接编写一个不含标签的字符串,如"abc"就更不行了</div><div class="line">因为prependTo和appendTo函数是JQuery的特有函数,字符串是无法调用的</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/jquery-1.11.0.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">			$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="comment">/*</span></div><div class="line">				 * 添加start</div><div class="line">				 */</div><div class="line">				<span class="comment">//方式1:</span></div><div class="line">				$(<span class="string">"#d1"</span>).prepend(<span class="string">"start1"</span>);<span class="comment">//start1div</span></div><div class="line">				$(<span class="string">"#d1"</span>).prepend(<span class="string">"&lt;font&gt;start2&lt;/font&gt;"</span>);<span class="comment">//start2start1div</span></div><div class="line">				<span class="comment">//方式2:</span></div><div class="line">				$(<span class="string">"start3"</span>).prependTo($(<span class="string">"#d1"</span>));<span class="comment">//并没有任何改变!!!</span></div><div class="line">				$(<span class="string">"&lt;font&gt;start4&lt;/font&gt;"</span>).prependTo($(<span class="string">"#d1"</span>));<span class="comment">//start4start2start1div</span></div><div class="line">				<span class="comment">/*</span></div><div class="line">				 * 添加end</div><div class="line">				 */</div><div class="line">				<span class="comment">//方式1:</span></div><div class="line">				$(<span class="string">"#d1"</span>).append(<span class="string">"end1"</span>);<span class="comment">//divend1</span></div><div class="line">				$(<span class="string">"#d1"</span>).append(<span class="string">"&lt;font&gt;end2&lt;/font&gt;"</span>);<span class="comment">//divend1end2</span></div><div class="line">				<span class="comment">//方式2:</span></div><div class="line">				$(<span class="string">"end3"</span>).appendTo($(<span class="string">"#d1"</span>));<span class="comment">//并没有任何改变!!!</span></div><div class="line">				$(<span class="string">"&lt;font&gt;end4&lt;/font&gt;"</span>).appendTo($(<span class="string">"#d1"</span>));<span class="comment">//divend1end2end4</span></div><div class="line">			&#125;);</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"d1"</span>&gt;</span>div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">JQuery页面加载:</div><div class="line">	方式<span class="number">1</span>:</div><div class="line">	$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">//内容体;</span></div><div class="line">    &#125;)</div><div class="line">	方式<span class="number">2</span>:</div><div class="line">	$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="comment">//内容体;</span></div><div class="line">	&#125;)</div><div class="line">   JS页面加载与JQuery页面加载的比较:</div><div class="line"><span class="number">1.</span> JS页面加载属于属性操作,加载多次,最后面的会覆盖前面的(属性操作的特点)</div><div class="line"><span class="number">2.</span> JQuery页面加载属于函数操作,加载多次,执行多次,因为函数每被调用一次,执行一次</div></pre></td></tr></table></figure>
<h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">   JS中:</div><div class="line">   JS对象.onXXX = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">   JQ中:</div><div class="line">   JQ对象.XXX(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</div><div class="line">* 常用事件:</div><div class="line">       click();        --&gt;点击事件;</div><div class="line">       submit();       --&gt;表单提交事件;</div><div class="line">       focus();        --&gt;聚焦事件;</div><div class="line">       blur();         --&gt;失焦事件;</div><div class="line">       mouseover();    --&gt;鼠标移入事件;</div><div class="line">       mouseout();     --&gt;鼠标移出事件;</div><div class="line">       change();       --&gt;元素值改变事件;</div></pre></td></tr></table></figure>
<h4 id="自实现循环"><a href="#自实现循环" class="headerlink" title="自实现循环"></a>自实现循环</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">取出数组的每一个元素，分别调用<span class="function"><span class="keyword">function</span>，调用时传入索引以及当前元素</span></div><div class="line">方式1:</div><div class="line">	<span class="title">$</span>.<span class="title">each</span>(<span class="params">jQuery数组, function(index,obj</span>)&#123;</div><div class="line">	    <span class="comment">//内容体;</span></div><div class="line">	&#125;)</div><div class="line">方式<span class="number">2</span>:</div><div class="line">	jQuery数组.each(<span class="function"><span class="keyword">function</span>(<span class="params">index,obj</span>)</span>&#123;</div><div class="line">	    <span class="comment">//内容体;</span></div><div class="line">	&#125;)</div><div class="line">举例:</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></div><div class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>];</div><div class="line"><span class="comment">//转换成 JQuery数组</span></div><div class="line"><span class="keyword">var</span> arr2 = $(arr);</div><div class="line"><span class="comment">//循环 --- 取出每一个元素</span></div><div class="line"><span class="comment">//方式1:</span></div><div class="line">$.each(arr2, <span class="function"><span class="keyword">function</span>(<span class="params">p1,p2</span>) </span>&#123;</div><div class="line">	alert(p1 + <span class="string">"  ---- "</span> + p2);</div><div class="line">&#125;);</div><div class="line"><span class="comment">//方式2:</span></div><div class="line">arr2.each(<span class="function"><span class="keyword">function</span>(<span class="params">p1,p2</span>)</span>&#123;</div><div class="line">	alert(p1 + <span class="string">"  ---- "</span> + p2);</div><div class="line">&#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="优化写法"><a href="#优化写法" class="headerlink" title="优化写法"></a>优化写法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">有些循环不需要索引，此时可以在函数中不传参数，直接使用 <span class="keyword">this</span> 代表当前元素</div><div class="line">&lt;script&gt;</div><div class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>];</div><div class="line">	<span class="comment">//转换成 JQuery数组</span></div><div class="line">	<span class="keyword">var</span> arr2 = $(arr);</div><div class="line">	<span class="comment">//循环 --- 取出每一个元素</span></div><div class="line">	<span class="comment">/*arr2.each(function()&#123;</span></div><div class="line">		alert(this);</div><div class="line">	&#125;);*/</div><div class="line">	</div><div class="line">	$.each(arr2, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		alert(<span class="keyword">this</span>);</div><div class="line">	&#125;);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><h4 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  格式:</div><div class="line"><span class="number">1.</span> $(<span class="string">"标签名"</span>) --------&gt; 元素选择器;</div><div class="line">   <span class="number">2.</span> $(<span class="string">"#ID值"</span>) ---------&gt; id选择器;</div><div class="line">   <span class="number">3.</span> $(<span class="string">".class值"</span>) ------&gt; <span class="class"><span class="keyword">class</span>类选择器</span>;</div><div class="line">   <span class="number">4.</span> $(<span class="string">"*"</span>) -------------&gt; 匹配所有;</div></pre></td></tr></table></figure>
<h4 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  格式:</div><div class="line"><span class="number">1.</span> $(<span class="string">"选择器1 选择器2"</span>) --------&gt; 获取<span class="number">1</span>标签下的所有子级和孙子级<span class="number">2</span>标签</div><div class="line"><span class="number">2.</span> $(<span class="string">"选择器1&gt;选择器2"</span>) ------&gt; 获取<span class="number">1</span>标签下的所有子级(不包含孙子级)<span class="number">2</span>标签</div><div class="line"><span class="number">3.</span> $(<span class="string">"选择器1+选择器2"</span>) ------&gt; 获取<span class="number">1</span>标签的同级向下第一个兄弟级<span class="number">2</span>标签</div><div class="line"><span class="number">4.</span> $(<span class="string">"选择器1~选择器2"</span>) ------&gt; 获取<span class="number">1</span>标签的同级向下所有兄弟级<span class="number">2</span>标签</div></pre></td></tr></table></figure>
<h4 id="基本过滤选择器-待整理"><a href="#基本过滤选择器-待整理" class="headerlink" title="基本过滤选择器(待整理)"></a>基本过滤选择器(待整理)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">  格式: (带空格代表子级孙子级,不带空格代表同级)</div><div class="line"><span class="number">1.</span> $(<span class="string">"选择器:first"</span>);  --------&gt; 获取匹配的第一个(同级);</div><div class="line"><span class="number">2.</span> $(<span class="string">"选择器:last"</span>);   --------&gt; 获取匹配的最后一个(同级);</div><div class="line"><span class="number">3.</span> $(<span class="string">"过滤器1 :first"</span>) --------&gt; 获取过滤器<span class="number">1</span>下的第一个子级元素</div><div class="line"><span class="number">4.</span> $(<span class="string">"过滤器1 :last"</span>)  --------&gt; 获取过滤器<span class="number">1</span>下的最后一个子级元素</div><div class="line"><span class="number">5.</span> $(<span class="string">"过滤器1 标签2:even(偶数)/odd(奇数)"</span>) -&gt; 获取过滤器<span class="number">1</span>下所以标签<span class="number">2</span>,取出标签<span class="number">2</span>的奇数或偶数标签<span class="number">2</span></div><div class="line"> 索引从<span class="number">0</span>开始</div><div class="line"><span class="number">6.</span> $(<span class="string">"选择器:not(选择器)"</span>);	--&gt; 去除与给定选择器匹配的;</div><div class="line"><span class="number">7.</span> $(<span class="string">"选择器:eq(index)"</span>);	--&gt; 获取匹配的脚标为指定的;</div><div class="line"><span class="number">8.</span> $(<span class="string">"选择器:gt(index)"</span>);	--&gt; 获取匹配的脚标大于指定的;</div><div class="line"><span class="number">9.</span> $(<span class="string">"选择器:lt(index)"</span>);	--&gt; 获取匹配的脚标小于指定的;</div></pre></td></tr></table></figure>
<h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">  格式: </div><div class="line"><span class="number">1.</span> $(<span class="string">"选择器[属性名]"</span>) --------&gt; 获取所有属性名属性的标签	</div><div class="line"><span class="number">2.</span> $(<span class="string">"选择器[属性名 = '值']"</span>) --------&gt; 获取所有属性名等于某值的标签</div><div class="line"><span class="number">3.</span> $(<span class="string">"选择器[属性名 != '值']"</span>) -------&gt; 获取所有属性名不等于某值的标签</div><div class="line"><span class="number">4.</span> $(<span class="string">"选择器[属性名 ^= '值']"</span>) -------&gt; 获取属性值以指定值开头的;</div><div class="line"><span class="number">5.</span> $(<span class="string">"选择器[属性名 $= '值']"</span>) -------&gt; 获取属性值以指定值结尾的;</div><div class="line"><span class="number">6.</span> $(<span class="string">"选择器[属性名 *= '值']"</span>) -------&gt; 获取属性值包含指定值的;</div><div class="line"><span class="number">7.</span> $(<span class="string">"选择器[属性名1 = '值'][属性名2 = '值']"</span>) --------&gt; 复合条件</div></pre></td></tr></table></figure>
<h4 id="表单属性选择器-重点"><a href="#表单属性选择器-重点" class="headerlink" title="表单属性选择器(重点)"></a>表单属性选择器(重点)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">  格式: </div><div class="line"><span class="number">1.</span> $(<span class="string">"input:enabled"</span>) --------&gt; 获取所有可用的input标签的表单输入项</div><div class="line"><span class="number">2.</span> $(<span class="string">"input:disabled"</span>) -------&gt; 获取所有不可用的input标签的表单输入项</div><div class="line"><span class="number">3.</span> $(<span class="string">"input:checked"</span>) --------&gt; 获取所有被选定的复选框</div><div class="line"><span class="number">4.</span> $(<span class="string">"#selected的id值 option:selected"</span>) ---&gt; 获取所有下拉列表中被选定的项</div><div class="line">  拓展:</div><div class="line"> 实现相同的效果,不一定使用一样的选择器</div></pre></td></tr></table></figure>
<h3 id="JQuery内置的显示与隐藏"><a href="#JQuery内置的显示与隐藏" class="headerlink" title="JQuery内置的显示与隐藏"></a>JQuery内置的显示与隐藏</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">* 基本实现:</div><div class="line">	<span class="number">1.</span> 显示</div><div class="line">		<span class="number">1.</span> show(): 直接显示</div><div class="line">		<span class="number">2.</span> show(毫秒值): 在指定时间内慢慢显示</div><div class="line">		<span class="number">3.</span> show(毫秒值,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;): 显示完毕后,调用函数</div><div class="line">	<span class="number">2.</span> 隐藏 </div><div class="line">		<span class="number">1.</span> hide(): 直接隐藏</div><div class="line">		<span class="number">2.</span> hide(毫秒值): 在指定时间内慢慢隐藏</div><div class="line">		<span class="number">3.</span> hide(毫秒值,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;): 隐藏完毕后,调用函数</div><div class="line">	<span class="number">3.</span> 切换</div><div class="line">		<span class="number">1.</span> toggle(): 根据当前显示/隐藏状况,进行切换</div><div class="line">		<span class="number">2.</span> toggle(毫秒值)</div><div class="line">* 滑动实现</div><div class="line">	<span class="number">1.</span> 显示</div><div class="line">		<span class="number">1.</span> slideDown()</div><div class="line">		<span class="number">2.</span> slideDown(毫秒值)</div><div class="line">	<span class="number">2.</span> 隐藏</div><div class="line">		<span class="number">1.</span> slideUp()</div><div class="line">		<span class="number">2.</span> slideUp(毫秒值)</div><div class="line">* 淡入淡出</div><div class="line">	<span class="number">1.</span> 显示</div><div class="line">		<span class="number">1.</span> fadeIn()</div><div class="line">		<span class="number">2.</span> fadeIn(毫秒值)</div><div class="line">	<span class="number">2.</span> 隐藏</div><div class="line">		<span class="number">1.</span> fadeOut()</div><div class="line">		<span class="number">2.</span> fadeOut(毫秒值)</div><div class="line">	<span class="number">3.</span> 切换</div><div class="line">		<span class="number">1.</span> fadeToggle()</div><div class="line">		<span class="number">2.</span> fadeToggle(毫秒值)</div></pre></td></tr></table></figure>
<h3 id="validate"><a href="#validate" class="headerlink" title="validate"></a>validate</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><pre><code>1. 一个校验框架,对表单校验的一个封装,是一个第三方实现,并且是JQuery的一个插件
    使用前提:
        1. 导入JQuery
        2. 导入validation相关实现
2. 下载validation相关实现
3. 环境搭建
    1. 引入jquery.validate.js文件
    2. 在当前html中导入该文件
4. 表单校验两要素:
    1. 校验规则rules
    2. 提示信息messages
validation使用: 
    1. 参考validation资料中的demo文件夹
</code></pre><h4 id="validation语法"><a href="#validation语法" class="headerlink" title="validation语法"></a>validation语法</h4><pre><code>jquery表单对象.validate({
        // 规则
        rules:{
            字段名(name值):{
                校验器:取值,
                校验器:取值
            },
            字段名(name值):{
                校验器:取值,
                校验器:取值
            }
        },
        // 提示信息
        messages:{
            字段名(name值):{
                校验器:&apos;提示信息(自定义)&apos;,
                校验器:&apos;提示信息(自定义)&apos;
            },
            字段名(name值):{
                校验器:&apos;提示信息(自定义)&apos;,
                校验器:&apos;提示信息(自定义)&apos;
            }
        }
    })

    &lt;!-- 指定提示信息显示位置
        class=&apos;error&apos;   固定;
        for=&apos;&apos;          绑定字段名(name值);
     --&gt;
    &lt;label for=&quot;gender&quot; class=&quot;error&quot;&gt;&lt;/label&gt;
</code></pre><h4 id="校验规则"><a href="#校验规则" class="headerlink" title="校验规则"></a>校验规则</h4><pre><code>这些校验规则是 validation 内置好的，我们按照语法规范调用这些校验类型即可
 *   A、required ---- 必填 ----- true | false
 *   B、rangelength - 长度 ----- [最小长度,最大长度]
 *   C、eamil ------- 邮箱 ----- true |　false
 *   D、date -------- 日期 ----- true | false
 *              日期以后一般使用下拉列表选择
 *   E、number ------ 数字 ----- true | false
 *   F、min(max) ---- 最小(大)值- 具体数字
 *   G、range ------- 数字取值 --- [最小值,最大值]
 *   H、euqalTo ----- 内容是否一样- JQuery选择器
</code></pre><h4 id="错误提示信息"><a href="#错误提示信息" class="headerlink" title="错误提示信息"></a>错误提示信息</h4><pre><code>1. 错误提示好多都是通用的,validation中已经内置了一些现成的错误提示
2. 如果不想自己编写错误提示的话,可以使用默认的,直接不编写 messages 部分
3. 但是不建议使用默认的,因为自定义的描述性更强
</code></pre><h4 id="自定义校验器"><a href="#自定义校验器" class="headerlink" title="自定义校验器"></a>自定义校验器</h4><pre><code>$.validator.addMethod(name, method, messages);
   name:校验器名称;
   method:校验处理函数
       function(value, element, params){
           value:被校验的表单项的value值;
           element:被校验的表单项对象;
           params:规则参数;

           方法体: 校验实现,返货true代表通过,false代表不符合规则
       }
   messages:错误提示信息;    
</code></pre><h4 id="改变提示信息的样式"><a href="#改变提示信息的样式" class="headerlink" title="改变提示信息的样式"></a>改变提示信息的样式</h4><pre><code>查原码可知,validate会将错误信息放在一个label中,样式为&quot;error&quot;,故这里定义一个同名的样式类:
    &lt;style type=&quot;text/css&quot;&gt;
        .error {
            color: red;
        }
    &lt;/style&gt;
</code></pre><h4 id="国际化-语言包"><a href="#国际化-语言包" class="headerlink" title="国际化(语言包)"></a>国际化(语言包)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(i18n)程序不变,在不同地区显示其本地的语言;</div><div class="line">* 国际化怎么实现？</div><div class="line">	1. 程序主体</div><div class="line">	2. 程序集成语言包</div><div class="line">* validation 中的国际化</div><div class="line">	* dist 内置不同的语言包,当前项目引入该语言包</div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/messages_zh.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="定时广告"><a href="#定时广告" class="headerlink" title="定时广告"></a>定时广告</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/jquery-1.11.0.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> gg = $(<span class="string">"#gg"</span>);</div><div class="line">		<span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="comment">//gg.css("display","block");</span></div><div class="line">			gg.slideDown(<span class="number">2000</span>);</div><div class="line">			<span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="comment">//gg.css("display","none");</span></div><div class="line">				gg.slideUp(<span class="number">2000</span>);</div><div class="line">			&#125;,<span class="number">3000</span>);</div><div class="line">			</div><div class="line">		&#125;,<span class="number">1000</span>);</div><div class="line">	&#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"gg"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../img/image/3.jpg"</span> <span class="attr">width</span>=<span class="string">"100%"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="隔行换色"><a href="#隔行换色" class="headerlink" title="隔行换色"></a>隔行换色</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">	.jishu &#123;</div><div class="line">		background-color: #13777E;</div><div class="line">	&#125;</div><div class="line">	.oushu &#123;</div><div class="line">		background-color: red;</div><div class="line">	&#125;</div><div class="line">	.pink&#123;</div><div class="line">		background-color: pink;</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/jquery-1.11.0.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="comment">//var trs = $("tr[id != 'header']");</span></div><div class="line">		<span class="keyword">var</span> jishu = $(<span class="string">"tr[id != 'header']:odd"</span>);</div><div class="line">		<span class="comment">//alert(jishu.length);</span></div><div class="line">		jishu.prop(<span class="string">"class"</span>,<span class="string">"jishu"</span>);</div><div class="line">		<span class="keyword">var</span> oushu = $(<span class="string">"tr[id != 'header']:even"</span>);</div><div class="line">		oushu.prop(<span class="string">"class"</span>,<span class="string">"oushu"</span>);</div><div class="line">		</div><div class="line">		<span class="keyword">var</span> temp;</div><div class="line">		$(<span class="string">"tr[id != 'header']"</span>).mouseover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			temp = $(<span class="keyword">this</span>).prop(<span class="string">"class"</span>);</div><div class="line">			$(<span class="keyword">this</span>).prop(<span class="string">"class"</span>,<span class="string">"pink"</span>);</div><div class="line">		&#125;);</div><div class="line">		$(<span class="string">"tr[id != 'header']"</span>).mouseout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			$(<span class="keyword">this</span>).prop(<span class="string">"class"</span>,temp);</div><div class="line">		&#125;);</div><div class="line">	&#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">cellpadding</span>=<span class="string">"0"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"80%"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">tr</span> <span class="attr">id</span>=<span class="string">"header"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">th</span>&gt;</span>商品名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">th</span>&gt;</span>商品描述<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"itemSelect"</span> /&gt;</span>		</div><div class="line">		<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>手机数码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>手机数码商品信息<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">tr</span> &gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"itemSelect"</span> /&gt;</span>		</div><div class="line">		<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>电脑办公<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>电脑办公商品信息<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"itemSelect"</span> /&gt;</span>		</div><div class="line">		<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>鞋靴箱包<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>鞋靴箱包商品信息<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"itemSelect"</span> /&gt;</span>		</div><div class="line">		<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>家居饰品<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>家居饰品商品信息<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="复选框全选-反选"><a href="#复选框全选-反选" class="headerlink" title="复选框全选/反选"></a>复选框全选/反选</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">反选时,常规思路是</div><div class="line">	1. 取当前checkbox数组的选定状态</div><div class="line">		var b = $(".itemSelect").prop("checked");</div><div class="line">	2. 设置反值</div><div class="line">		$(".itemSelect").prop("checked",!b);</div><div class="line">但这样是错误的.当前结果是所有复选框取第一个复选框的反值,因为:</div><div class="line"> 	1. 获取数组的属性值时，没有循环，获取的是第一个元素的值</div><div class="line">	2. 设置时，每一个元素根据第一个元素的值取反</div><div class="line"></div><div class="line">我们需要知道的是:</div><div class="line">数组.prop("属性","值") 设置时,底层封装了一个循环,遍历数组的每一个元素分别设置prop的值</div><div class="line">但是呢? </div><div class="line">并不是所有的属性底层都封装了一个循环,隔行换色案例中的class封装了,本例中的checked就没有封装循环.</div><div class="line"></div><div class="line">所以解决方案是: 自实现循环</div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		$(<span class="string">"#all"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			$(<span class="string">".itemSelect"</span>).prop(<span class="string">"checked"</span>,<span class="literal">true</span>);</div><div class="line">		&#125;);</div><div class="line">		$(<span class="string">"#none"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			$(<span class="string">".itemSelect"</span>).prop(<span class="string">"checked"</span>,<span class="literal">false</span>);</div><div class="line">		&#125;);</div><div class="line">		$(<span class="string">"#fan"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="comment">/*	</span></div><div class="line">			错误写法:</div><div class="line">			var b = $(".itemSelect").prop("checked");</div><div class="line">			$(".itemSelect").prop("checked",!b);</div><div class="line">		*/</div><div class="line">		<span class="comment">/*	</span></div><div class="line">			自定义循环写法1:</div><div class="line">			//1、获取所有的复选框</div><div class="line">			$(".itemSelect").each(function()&#123;</div><div class="line">				//获取当前复选框的状态</div><div class="line">				var b = $(this).prop("checked");</div><div class="line">				//取反值</div><div class="line">				$(this).prop("checked",!b);</div><div class="line">			&#125;);</div><div class="line">		*/</div><div class="line">			自定义循环写法<span class="number">2</span>:</div><div class="line">			$.each($(<span class="string">".itemSelect"</span>), <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				<span class="keyword">var</span> b = $(<span class="keyword">this</span>).prop(<span class="string">"checked"</span>);</div><div class="line">				$(<span class="keyword">this</span>).prop(<span class="string">"checked"</span>,!b);</div><div class="line">			&#125;);</div><div class="line">		&#125;);</div><div class="line">	&#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="表单校验"><a href="#表单校验" class="headerlink" title="表单校验"></a>表单校验</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div></pre></td><td class="code"><pre><div class="line">	表单校验需求:</div><div class="line">		错误提示信息为红色</div><div class="line">		错误提示显示在输入项下面</div><div class="line">		自定义校验类型,用户名不能包含敏感词汇</div><div class="line">	* 首先要知道validation是如何显示错误提示的</div><div class="line">		1. 在输入项后面内置了一个标签,显示提示信息</div><div class="line">			<span class="tag">&lt;<span class="name">label</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"error"</span> <span class="attr">for</span>=<span class="string">"name值"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">		2. 修改为红色,可以设置 CSS 属性</div><div class="line">			所有的错误提示有相同的标签和相同的class---error</div><div class="line">		3. 可以自定义错误出现的位置</div><div class="line">			默认位置 ---- 紧跟当前 input</div><div class="line">			<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"error"</span> <span class="attr">for</span>=<span class="string">"name值"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span> 或</div><div class="line">			<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"error"</span> <span class="attr">for</span>=<span class="string">"id值"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			注意上面这两种形式:如果<span class="tag">&lt;<span class="name">input</span>&gt;</span>标签内设置id了,只能使用for="id值"</div><div class="line">			如果只设置了name值,可以使用for="name值"</div><div class="line">			自定义的label标签，位置可以随意存储</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">			/*label &#123;</div><div class="line">				color: red;</div><div class="line">			&#125;*/</div><div class="line">			.error &#123;</div><div class="line">				color: red;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/jquery-1.11.0.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/jquery.validate.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		$.validator.addMethod("my",function(v)&#123;</div><div class="line">				/*</div><div class="line">				 * 如果包含 具体的数字 &gt;= 0  false ----- 非法</div><div class="line">				 * 如果不包含 -1		 ------ true ----- 合法</div><div class="line">				 * </div><div class="line">				 */</div><div class="line">				return v.indexOf("falungong") == -1;</div><div class="line">			&#125;,"不能包含政治敏感词");</div><div class="line">			$(function()&#123;</div><div class="line">				$("#f1").validate(&#123;</div><div class="line">					rules:&#123;</div><div class="line">						username:&#123;</div><div class="line">							required:true,</div><div class="line">							rangelength:[6,10],</div><div class="line">							my:true</div><div class="line">						&#125;,</div><div class="line">						email:&#123;</div><div class="line">							required:true,</div><div class="line">							email:true</div><div class="line">						&#125;,</div><div class="line">						birthday:&#123;</div><div class="line">							date:true</div><div class="line">						&#125;,</div><div class="line">						sal:&#123;</div><div class="line">							number:true,</div><div class="line">							min:1600</div><div class="line">						&#125;,</div><div class="line">						workForday:&#123;</div><div class="line">							range:[6,16]</div><div class="line">						&#125;,</div><div class="line">						pwd:&#123;</div><div class="line">							required:true</div><div class="line">						&#125;,</div><div class="line">						repwd:&#123;</div><div class="line">							required:true,</div><div class="line">							equalTo:"input[name='pwd']"</div><div class="line">						&#125;</div><div class="line">					&#125;,</div><div class="line">					//提示信息部分</div><div class="line">					messages:&#123;</div><div class="line">						username:&#123;</div><div class="line">							required:"账号必须填写",</div><div class="line">							rangelength:"长度必须在6-10个字符之间"</div><div class="line">						&#125;,</div><div class="line">						email:&#123;</div><div class="line">							required:"邮箱必填",</div><div class="line">							email:"邮箱不符合规则"</div><div class="line">						&#125;,</div><div class="line">						birthday:&#123;</div><div class="line">							date:"日期格式不对"</div><div class="line">						&#125;,</div><div class="line">						sal:&#123;</div><div class="line">							number:"必须是数字",</div><div class="line">							min:"至少1600块"</div><div class="line">						&#125;,</div><div class="line">						workForday:&#123;</div><div class="line">							range:"一天工作时长必须在6-16个小时之间"</div><div class="line">						&#125;,</div><div class="line">						pwd:&#123;</div><div class="line">							required:"密码必填"</div><div class="line">						&#125;,</div><div class="line">						repwd:&#123;</div><div class="line">							required:"必须填写确认密码",</div><div class="line">							equalTo:"两次密码不一致"</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">				&#125;);</div><div class="line">			&#125;);</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"f1"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">cellpadding</span>=<span class="string">"0"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"cornflowerblue"</span> <span class="attr">size</span>=<span class="string">"5"</span>&gt;</span>测试表单<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名（必填字段，长度范围6~10）<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>  /&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">id</span>=<span class="string">"unmsg"</span> <span class="attr">class</span>=<span class="string">"error"</span> <span class="attr">for</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>Email（符合邮件格式）<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"email"</span> /&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>出生日期（日期格式）<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"birthday"</span> /&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>薪资（数字）<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"sal"</span> /&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>一天工作时长（值范围6~16）<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"workForday"</span> /&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>密码（必须填写）<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"pwd"</span> /&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>确认密码（必须填写，且与密码值要相同）<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"repwd"</span> /&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span> /&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="省市联动"><a href="#省市联动" class="headerlink" title="省市联动"></a>省市联动</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/jquery-1.11.0.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="comment">// 定义二维数组,存储城市信息</span></div><div class="line">			<span class="keyword">var</span> cities = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">			cities[<span class="number">0</span>] = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"海淀"</span>,<span class="string">"昌平"</span>);</div><div class="line">			cities[<span class="number">1</span>] = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"长春市"</span>,<span class="string">"吉林市"</span>,<span class="string">"松原市"</span>,<span class="string">"延边市"</span>);</div><div class="line">			cities[<span class="number">2</span>] = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"济南市"</span>,<span class="string">"青岛市"</span>,<span class="string">"烟台市"</span>,<span class="string">"潍坊市"</span>,<span class="string">"淄博市"</span>);</div><div class="line">			cities[<span class="number">3</span>] = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"石家庄市"</span>,<span class="string">"唐山市"</span>,<span class="string">"邯郸市"</span>,<span class="string">"廊坊市"</span>);</div><div class="line">			cities[<span class="number">4</span>] = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"南京市"</span>,<span class="string">"苏州市"</span>,<span class="string">"扬州市"</span>,<span class="string">"无锡市"</span>);</div><div class="line"></div><div class="line">			<span class="comment">//方式1:</span></div><div class="line">			<span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params">node</span>)</span>&#123;</div><div class="line">				<span class="comment">//node拿到的是当前选中的option对象</span></div><div class="line">				<span class="keyword">var</span> cs = cities[$(node).val()]</div><div class="line">				<span class="keyword">var</span> $s2 = $(<span class="string">"#city"</span>);</div><div class="line">				$s2.html(<span class="string">"&lt;option value=''&gt;----请-选-择-市----&lt;/option&gt;"</span>);</div><div class="line">				$.each(cs,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">					<span class="keyword">var</span> opt = <span class="string">"&lt;option&gt;"</span>+<span class="keyword">this</span>+<span class="string">"&lt;/option&gt;"</span>;</div><div class="line">					$s2.html($s2.html() + opt);</div><div class="line">				&#125;);</div><div class="line">			&#125;</div><div class="line">			<span class="comment">//方式2:(优化)</span></div><div class="line">			<span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params">node</span>)</span>&#123;</div><div class="line">				<span class="keyword">var</span> cs = cities[$(node).val()];</div><div class="line">				<span class="keyword">var</span> $s2 = $(<span class="string">"#city"</span>);</div><div class="line">				$s2.html(<span class="string">"&lt;option value=''&gt;----请-选-择-市----&lt;/option&gt;"</span>);</div><div class="line">				$.each(cs,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">					<span class="keyword">var</span> opt = <span class="string">"&lt;option&gt;"</span>+<span class="keyword">this</span>+<span class="string">"&lt;/option&gt;"</span>;</div><div class="line">					<span class="comment">//$s2.append(opt);</span></div><div class="line">					$(opt).appendTo($s2);</div><div class="line">				&#125;);</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"province"</span> <span class="attr">style</span>=<span class="string">"width:150px"</span> <span class="attr">onchange</span>=<span class="string">"run(this)"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>----请-选-择-省----<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>吉林省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>山东省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>河北省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"4"</span>&gt;</span>江苏省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"city"</span> <span class="attr">style</span>=<span class="string">"width:150px"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>----请-选-择-市----<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="左右选择"><a href="#左右选择" class="headerlink" title="左右选择"></a>左右选择</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/jquery-1.11.0.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">			$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				$s1 = $(<span class="string">"#leftSelectId"</span>);</div><div class="line">				$s2 = $(<span class="string">"#rightSelectId"</span>);</div><div class="line">				$btn1 = $(<span class="string">"#leftToRightSimple"</span>);</div><div class="line">				$btn1.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">					<span class="comment">//错误写法:(一定注意这种)</span></div><div class="line">					<span class="comment">//$leftSelected = $("$s1 option:selected");</span></div><div class="line">					$leftSelected = $(<span class="string">"#leftSelectId option:selected"</span>);</div><div class="line">					<span class="comment">//方式1:</span></div><div class="line">					$.each($leftSelected, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">						$s2.append(<span class="keyword">this</span>);</div><div class="line">					&#125;);</div><div class="line">					<span class="comment">//方式2:</span></div><div class="line">					<span class="comment">//$s2.append($leftSelected);</span></div><div class="line">					<span class="comment">//注意:如果移动到右边时,左边不想删除,要这样写:</span></div><div class="line">					<span class="comment">//$s2.append($leftSelected).clone();</span></div><div class="line">				&#125;);</div><div class="line">				</div><div class="line">				$btn2 = $(<span class="string">"#leftToRight"</span>);</div><div class="line">				$btn2.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">					$leftall = $(<span class="string">"#leftSelectId option"</span>);</div><div class="line">					$s2.append($leftall);</div><div class="line">				&#125;);</div><div class="line">				</div><div class="line">				$btn3 = $(<span class="string">"#rightToLeftSimple"</span>);</div><div class="line">				$btn3.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">					$rightSelected = $(<span class="string">"#rightSelectId option:selected"</span>);</div><div class="line">					$s1.append($rightSelected);</div><div class="line">				&#125;);</div><div class="line">				</div><div class="line">				$btn4 = $(<span class="string">"#rightToLeft"</span>);</div><div class="line">				$btn4.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">					$rightall = $(<span class="string">"#rightSelectId option"</span>);</div><div class="line">					$s1.append($rightall);</div><div class="line">				&#125;);</div><div class="line">			&#125;);</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"leftSelectId"</span> <span class="attr">multiple</span>=<span class="string">"multiple"</span> <span class="attr">style</span>=<span class="string">"width: 100px;height: 200px;"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span>&gt;</span>左1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span>&gt;</span>左2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span>&gt;</span>左3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span>&gt;</span>左4<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span>&gt;</span>左5<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"》"</span> <span class="attr">id</span>=<span class="string">"leftToRightSimple"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"》》"</span> <span class="attr">id</span>=<span class="string">"leftToRight"</span>  /&gt;</span></div><div class="line">		&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"《"</span>   <span class="attr">id</span>=<span class="string">"rightToLeftSimple"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"《《"</span>   <span class="attr">id</span>=<span class="string">"rightToLeft"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"rightSelectId"</span> <span class="attr">multiple</span>=<span class="string">"multiple"</span> <span class="attr">style</span>=<span class="string">"width: 100px;height: 200px;"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span>&gt;</span>右1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span>&gt;</span>右2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span>&gt;</span>右3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span>&gt;</span>右4<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span>&gt;</span>右5<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></div><div class="line">		</div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;核心理念: write less,do more 
作用: 动态地修改内存中的html或css代码
1. JQuery是一个JavaScript框架,是对JS的封装,将一些常见的JS操作进行了封装,提高开发效率
    JQuery与JS的区别:类似与commons-io与JDK内置IO的关系
2. 兼容CSS3
3. 相对于JS,能更好地兼容浏览器(并没有完全兼容)
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="https://geekhoon.github.io/categories/JavaWeb/"/>
    
    
      <category term="前端开发" scheme="https://geekhoon.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript</title>
    <link href="https://geekhoon.github.io/2017/03/21/JavaWeb-02-JavaScript/"/>
    <id>https://geekhoon.github.io/2017/03/21/JavaWeb-02-JavaScript/</id>
    <published>2017-03-21T10:12:43.000Z</published>
    <updated>2017-04-02T02:01:38.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><pre><code>* 概念: 
    * 是基于对象和事件驱动的脚本语言, 用于开发交互式web页面
    * 解释型语言,不需要进行编译,由浏览器执行
* 作用:
    * 动态的修改内存中的html和css
</code></pre><a id="more"></a>    
<pre><code>* 组成部分:
    1. 基本语法部分 ---&gt; ECMAScript ---&gt; 规范了JS使用基本语法
    2. 浏览器对象 -----&gt; BOM ----------&gt; Browser Object Model
        (浏览器内置对象)
    3. 文档对象 -------&gt; DOM ----------&gt; Document Object Model
        (HTML文档以及文档的每一个标签,都被JS当作对象)
* 学习路线:
    1. 基本语法
        (1)变量
            运算符
            流程控制
        (2)方法
    2. 面向对象
        (3)获取对象(和Java不同,Java对象大多数要自己创建,JS是获取内置好的对象)
        (4)操作对象
</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">使用:</div><div class="line">	<span class="number">1.</span>内部脚本:</div><div class="line">	    <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></span></div><div class="line">	        <span class="comment">/**</span></div><div class="line">	         * js脚本;</div><div class="line">	         */</div><div class="line">	    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="number">2.</span>外部脚本:</div><div class="line">	    <span class="number">1</span>)编写*.js文件,内部编写脚本;</div><div class="line">	        first.js:</div><div class="line">	            <span class="comment">/**</span></div><div class="line">	             * js脚本;</div><div class="line">	             */</div><div class="line">	</div><div class="line">	    <span class="number">2</span>)在*.html中引入脚本文件;</div><div class="line">	        *.html:</div><div class="line">	            <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/first.js"</span>&gt;</span><span class="javascript"></span></span></div><div class="line">	                <span class="comment">/**</span></div><div class="line">	                 * 这里不能在写js脚本;</div><div class="line">	                 */</div><div class="line">	            <span class="tag">&lt;/<span class="name">script</span>&gt;</span>&gt;</div><div class="line">	注意:</div><div class="line">		(<span class="number">1</span>)外部JS文件一般存储在JS目录中</div><div class="line">		(<span class="number">2</span>)方案二引入的外部JS文件时,<span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">标签中不能再编写其他JS代码</span></span></div></pre></td></tr></table></figure>
<h3 id="ECMAScript-基本语法"><a href="#ECMAScript-基本语法" class="headerlink" title="(ECMAScript)基本语法"></a>(ECMAScript)基本语法</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><pre><code>1.声明格式: 
    var 变量名;      --&gt;js变量可以不声明,直接使用,默认值:undefined;
    var 变量名 = 值; --&gt;js变量是弱类型,即同一个变量可以存放不同类型的数据;
    var在JS中是一个关键字,代表变量    
2.变量命名规则:
    1)必须以字母或下划线开头,中间可是数字,字母或下划线或$;
    2)变量名不能包含空格等符号;
    3)不能使用能够Js关键字作为变量名;
    4)js严格区分大小写;
3.变量值可以是任意类型,并且可以被重复赋其他类型的值
</code></pre><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><pre><code>分类: 
    基本类型:
        1. number数字类型 ---&gt; 整型,浮点
        2. boolean布尔类型 ---&gt; true,false
        3. string字符串类型 -&gt; &quot;&quot; 或 &apos;&apos; 包裹
        4. null --&gt; 空类型
        5. undefined -&gt; 未定义,null的衍生,变量只声明不赋值时,就是undefined
            undefinerd == null :结果是true
    引用类型: 
        Object
拓展:
    (1)NaN ---&gt; not a number :JS中非数字运算得出的结果
    (2)typeof(变量) ---&gt; 返回当前变量的数据类型
</code></pre><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><pre><code>JS特殊运算符:
    == : 比较值而不比较数据类型
    ===: 既比较值也比较数据类型
</code></pre><h4 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h4><pre><code>在判断语句中,JS会将相关数据类型转成对应的boolean值,和Java不同
</code></pre><p><img src="http://oj3s07yy0.bkt.clouddn.com/blog/20170320/165450398.png" alt=""><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)&#123;</div><div class="line">	<span class="built_in">window</span>.alert(i);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(<span class="number">1</span>)&#123;</div><div class="line">	<span class="built_in">window</span>.alert(<span class="string">"true"</span>);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">	<span class="built_in">window</span>.alert(<span class="string">"false"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span>概念</div><div class="line">	Java --- method --- 方法</div><div class="line">  	Js ----- <span class="function"><span class="keyword">function</span> - 函数</span></div><div class="line">2.函数声明</div><div class="line">	普通函数:</div><div class="line">           <span class="title">function</span> 函数名(<span class="params">参数名即可</span>)&#123;</div><div class="line">               <span class="comment">// 函数体;</span></div><div class="line">           &#125;</div><div class="line">		举例: </div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">num1,num2</span>)</span>&#123;</div><div class="line">			<span class="keyword">return</span> num1 + num2;</div><div class="line">		&#125;</div><div class="line">       匿名函数:</div><div class="line">           <span class="keyword">var</span> 函数名 = <span class="function"><span class="keyword">function</span>(<span class="params">参数名即可</span>)</span>&#123;</div><div class="line">               <span class="comment">// 函数体;</span></div><div class="line">           &#125;</div><div class="line"><span class="number">3.</span>调用</div><div class="line">	<span class="keyword">var</span> result = getSum(<span class="number">1</span>,<span class="number">2</span>);  --- 标准调用</div><div class="line">	特殊:JS调用函数,可以传入与函数声明不一致的参数列表,如:</div><div class="line">		<span class="keyword">var</span> result = getSum(<span class="number">1</span>); <span class="comment">//result值为NaN</span></div><div class="line"><span class="number">4.</span>注意</div><div class="line">	(<span class="number">1</span>)JS没有重载的概念</div><div class="line">	(<span class="number">2</span>)JS中只依赖于函数名调用,不考虑参数列表,如果函数名相同,后面的会覆盖前面的</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">num1,num2</span>)</span>&#123;</div><div class="line">		<span class="built_in">window</span>.alert(<span class="string">"get1"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">num1</span>)</span>&#123;</div><div class="line">		<span class="built_in">window</span>.alert(<span class="string">"get2"</span>);</div><div class="line">	&#125;</div><div class="line">	get(<span class="number">1</span>,<span class="number">2</span>); <span class="comment">//打印的是get2</span></div></pre></td></tr></table></figure>
<h3 id="BOM对象-浏览器对象模型"><a href="#BOM对象-浏览器对象模型" class="headerlink" title="BOM对象(浏览器对象模型)"></a>BOM对象(浏览器对象模型)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">概述: 	</div><div class="line">	* JS是基于对象的,对象不是自己<span class="keyword">new</span>的,而是获取第三方内置的对象,来使用</div><div class="line">	* 浏览器内置的对象就是BOM对象</div><div class="line">常用对象</div><div class="line">	<span class="number">1.</span> <span class="built_in">window</span>对象 --- 当前浏览器内置的对象</div><div class="line">		* alert(<span class="string">"信息"</span>) --&gt;警告框;</div><div class="line">		* confirm(<span class="string">"信息"</span>)   --&gt;确认框(确认返回<span class="literal">true</span>,取消返回<span class="literal">false</span>);</div><div class="line">			<span class="keyword">var</span> flag = confirm(<span class="string">""</span>);</div><div class="line">		*  prompt(<span class="string">"信息"</span>)    --&gt;输入框(确认返回输入的数据,取消返回<span class="literal">false</span>);</div><div class="line">			<span class="keyword">var</span> txt = prompt(<span class="string">""</span>);</div><div class="line">		凡是<span class="built_in">window</span>对象的方法,都可以不加<span class="built_in">window</span>前缀</div><div class="line">	<span class="number">2.</span> <span class="built_in">window</span>计时器--两种:往复性计时器和一次性计时器</div><div class="line">		底层： 为计时器开启一个线程，线程中隔一会调用一次函数</div><div class="line">	(<span class="number">1</span>)setInterval(code(代码),millisec(毫秒))  </div><div class="line">			--&gt;循环定时器(这个方法会返回一个id值,是当前定时器的标识);</div><div class="line">           <span class="number">1</span>):</div><div class="line">               <span class="function"><span class="keyword">function</span> <span class="title">fun01</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                   <span class="comment">/**</span></div><div class="line">                    * 内容;</div><div class="line">                    */</div><div class="line">               &#125;</div><div class="line">               <span class="built_in">window</span>.setInterval(fun01, <span class="number">2000</span>);</div><div class="line">           <span class="number">2</span>):</div><div class="line">               <span class="function"><span class="keyword">function</span> <span class="title">fun01</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                   <span class="comment">/**</span></div><div class="line">                    * 内容;</div><div class="line">                    */</div><div class="line">               &#125;</div><div class="line">               <span class="built_in">window</span>.setInterval(<span class="string">"fun01()"</span>, <span class="number">2000</span>);</div><div class="line">           <span class="number">3</span>):</div><div class="line">               <span class="built_in">window</span>.setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                   <span class="comment">/**</span></div><div class="line">                    * 内容;</div><div class="line">                    */</div><div class="line">               &#125;, <span class="number">2000</span>);</div><div class="line">        clearInterval(id)    --&gt;取消定时器;</div><div class="line">		举例:</div><div class="line">			<span class="keyword">var</span> id = <span class="built_in">window</span>.setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				alert(<span class="string">"----"</span>);</div><div class="line">			&#125;,<span class="number">3000</span>);</div><div class="line">			<span class="comment">//通过编号清除</span></div><div class="line">			<span class="built_in">window</span>.clearInterval(id);</div><div class="line">	(<span class="number">2</span>)setTimeout(code(代码),millisec(毫秒))   </div><div class="line">			--&gt;执行一次定时器(这个方法会返回一个id值,是当前定时器的标识);</div><div class="line">           <span class="number">1</span>):</div><div class="line">               <span class="function"><span class="keyword">function</span> <span class="title">fun01</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                   <span class="comment">/**</span></div><div class="line">                    * 内容;</div><div class="line">                    */</div><div class="line">               &#125;</div><div class="line">               <span class="built_in">window</span>.setTimeout(fun01, <span class="number">2000</span>);</div><div class="line">           <span class="number">2</span>):</div><div class="line">               <span class="function"><span class="keyword">function</span> <span class="title">fun01</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                   <span class="comment">/**</span></div><div class="line">                    * 内容;</div><div class="line">                    */</div><div class="line">               &#125;</div><div class="line">               <span class="built_in">window</span>.setTimeout(<span class="string">"fun01()"</span>, <span class="number">2000</span>);</div><div class="line">           <span class="number">3</span>):</div><div class="line">               <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                   <span class="comment">/**</span></div><div class="line">                    * 内容;</div><div class="line">                    */</div><div class="line">               &#125;, <span class="number">2000</span>);</div><div class="line">        clearTimeout(id)    --&gt;取消定时器;</div><div class="line">	<span class="number">3.</span> location: </div><div class="line">       	location.href = <span class="string">"资源路径"</span>;跳转到一个新的页面;</div><div class="line">		举例:</div><div class="line">		<span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></div><div class="line">			<span class="function"><span class="keyword">function</span> <span class="title">toIndex</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="comment">//执行跳转</span></div><div class="line">				location.href = <span class="string">"../../index.html"</span>;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span>&gt;</div><div class="line">		<span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"首页"</span> <span class="attr">onclick</span>=<span class="string">"toIndex()"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">	4.  history:</div><div class="line">        history.go();   --&gt;go(-1) 后退,go(1) 前进;</div><div class="line">        history.back(); 后退;</div><div class="line">        history.forward();前进</div><div class="line">		举例:</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">第一页:</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="function"><span class="keyword">function</span> <span class="title">toNext</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="comment">//history.forward();</span></div><div class="line">				history.go(<span class="number">1</span>);</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		这是start</div><div class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"end.html"</span>&gt;</span>end页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"下一页"</span> <span class="attr">onclick</span>=<span class="string">"toNext()"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line">第二页:</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="function"><span class="keyword">function</span> <span class="title">backToStart</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="comment">//history.back();</span></div><div class="line">				history.go(<span class="number">-1</span>);</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		这是 end 页面</div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"上一页"</span> <span class="attr">onclick</span>=<span class="string">"backToStart()"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="DOM对象-文档对象模型"><a href="#DOM对象-文档对象模型" class="headerlink" title="DOM对象(文档对象模型)"></a>DOM对象(文档对象模型)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">* JS主要操作的是HTML中的内容</div><div class="line">	* 操作流程:</div><div class="line">		1. 获取要操作的标签对应的DOM对象 --- 获取</div><div class="line">		2. 操作这个DOM对象 --------------- 调用</div><div class="line">获取DOM对象方式:</div><div class="line">1. var v = document.getElementById("ID值");</div><div class="line">2. var vs = document.getElementsByClassName("类名");</div><div class="line">3. var vs = document.getElementsByName("name值");</div><div class="line">4. var vs = document.getElementsByTagName("标签名");</div><div class="line">	----&gt; 2,3,4返回的是一个数组,数组中存放的是标签对象;</div><div class="line">调用方式:</div><div class="line">标签对象.innerHTML = "";  --&gt;重置标签内容体;</div><div class="line">标签对象.innerText = "";  --&gt;重置文本;</div><div class="line">标签对象.属性名 = "属性值"; --&gt;设置属性;</div><div class="line">标签对象.className  --&gt; 获取标签的class值;</div><div class="line">标签对象.checked;   --&gt; 获取当前对象的选中状态;</div></pre></td></tr></table></figure>
<h4 id="获取对象举例"><a href="#获取对象举例" class="headerlink" title="获取对象举例"></a>获取对象举例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">获取div标签对象,然后获取内容体并打印:</div><div class="line">	(1)先给标签添加id</div><div class="line">	(2)获取语法: var d1 = document.getElementById("id");</div><div class="line">	(3)注意加载顺序:</div><div class="line">		如果script在head中,直接调用获取语法,不能获取,因为div还没加载</div><div class="line">	解决方案:</div><div class="line">	1. 将script实现存储在div后面</div><div class="line">	2. 在body标签中添加属性onload = "函数"</div><div class="line">	   script中有对应的函数实现,获取div对象</div><div class="line">	执行效果: 页面加载完(注意是加载完),调用这个函数</div><div class="line">	* 方案一:</div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"d1"</span>&gt;</span> hello <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">		<span class="keyword">var</span> d1 = <span class="built_in">document</span>.getElementById(<span class="string">"d1"</span>);</div><div class="line">		alert(d1);			</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	* 方案二:</div><div class="line">		<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">				<span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"></span>)</span>&#123;</div><div class="line">					<span class="keyword">var</span> d1 = <span class="built_in">document</span>.getElementById(<span class="string">"d1"</span>);</div><div class="line">					alert(d1);		</div><div class="line">				&#125;</div><div class="line">			<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span> = <span class="string">"get()"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"d1"</span>&gt;</span> hello <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">	* 方案三(优化):</div><div class="line">		1. 编写函数</div><div class="line">		2. window.onload = 方法名; (方法没有括号)</div><div class="line">		<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">				<span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"></span>)</span>&#123;</div><div class="line">					<span class="keyword">var</span> d1 = <span class="built_in">document</span>.getElementById(<span class="string">"d1"</span>);</div><div class="line">					alert(d1);		</div><div class="line">				&#125;</div><div class="line">				<span class="built_in">window</span>.onload = get;</div><div class="line">			<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"d1"</span>&gt;</span> hello <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">body</span>&gt;</span>	</div><div class="line">	* 方案四(优化): 匿名函数</div><div class="line">		<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">				<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">					<span class="keyword">var</span> d1 = <span class="built_in">document</span>.getElementById(<span class="string">"d1"</span>);</div><div class="line">					alert(d1);		</div><div class="line">				&#125;</div><div class="line">			<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"d1"</span>&gt;</span> hello <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="调用对象举例"><a href="#调用对象举例" class="headerlink" title="调用对象举例"></a>调用对象举例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">获取font标签对象,并调用该对象</div><div class="line">内容体操作:</div><div class="line">	获取内容体 --- 标签对象.innerHTML</div><div class="line">	设置内容体 --- 标签对象.innerHTML = "新值";</div><div class="line">属性操作:</div><div class="line">	获取属性 --- 标签对象.属性名</div><div class="line">	设置属性 --- 标签对象.属性名 = "新值"</div><div class="line">注意：</div><div class="line">	* class 操作必须使用相关替换 --- className</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">			.test1 &#123;</div><div class="line">				color: red;</div><div class="line">			&#125;</div><div class="line">			.test2 &#123;</div><div class="line">				color: green;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="keyword">var</span> f1 = <span class="built_in">document</span>.getElementById(<span class="string">"f1"</span>);</div><div class="line">				<span class="comment">//内容体操作</span></div><div class="line">				<span class="comment">//获取内容体</span></div><div class="line">				<span class="comment">//alert(f1.innerHTML);</span></div><div class="line">				<span class="comment">//设置内容体</span></div><div class="line">				<span class="comment">//f1.innerHTML = "haha";</span></div><div class="line">				</div><div class="line">				<span class="comment">//获取color属性</span></div><div class="line">				<span class="comment">//alert(f1.color);</span></div><div class="line">				<span class="comment">//修改属性值</span></div><div class="line">				<span class="comment">//f1.color = "blue";</span></div><div class="line">				</div><div class="line">				<span class="comment">//f1.size = "1";</span></div><div class="line">				<span class="keyword">var</span> f2 = <span class="built_in">document</span>.getElementById(<span class="string">"f2"</span>);</div><div class="line">				<span class="comment">//获取class 值</span></div><div class="line">				alert(f2.className);</div><div class="line">				f2.className = <span class="string">"test2"</span>;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">font</span> <span class="attr">id</span>=<span class="string">"f1"</span> <span class="attr">size</span>=<span class="string">"6"</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span>hehe<span class="tag">&lt;/<span class="name">font</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">font</span> <span class="attr">id</span>=<span class="string">"f2"</span> <span class="attr">class</span>=<span class="string">"test1"</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">font</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><pre><code>概念: 页面上的一个动作
      动作可以是用户产生的 --- 用户操作 --单机,鼠标移入移出,获得失去焦点,下拉列表选定
      也可以是浏览器产生的 --- 页面加载
常见事件:
    onload      --&gt;页面加载完成事件;
    onsubmit    --&gt;表单提交事件;                 
    onclick     --&gt;单击事件;
    onchange    --&gt;改变事件,下拉列表选项改变时触发
    onfocus/onblur    --&gt;焦点事件(获得焦点/失去焦点);
    onmouseover/onmouseout/onmousemove --&gt;鼠标事件(鼠标移入/移出/移动)
    onkeydown/onkeypress/onkeyup --&gt;按键事件(按键按下/按键按住/按键弹起)    

注意: 
    1. 按键事件可以在方法中传入参数,参数有个keycode属性,可以获取当前按键对应的数字.
       通过判断数字,获取按的键位.回车键是13
    2. onload事件只能在body和img标签中使用
</code></pre><h4 id="事件的使用格式"><a href="#事件的使用格式" class="headerlink" title="事件的使用格式"></a>事件的使用格式</h4><pre><code>格式一: 
    1. 标签中添加属性 onxxx = &quot;函数&quot;
    2. 编写函数实现
格式二:
    1. 页面加载完,获取标签对象
    2. 标签对象.onxxx = function(){}
</code></pre><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">1)在标签上使用事件属性:</div><div class="line">    &lt;button onclick="myClick()"&gt;点击事件&lt;/button&gt;</div><div class="line"></div><div class="line">    &lt;script type="text/javascript"&gt;</div><div class="line">        function myClick() &#123;</div><div class="line">            alert("被点击了...");</div><div class="line">    	&#125;	</div><div class="line">    &lt;/script&gt;</div><div class="line">2)使用标签对象添加事件属性:</div><div class="line">    &lt;button id="button01"&gt;点击事件&lt;/button&gt;</div><div class="line"></div><div class="line">    &lt;script type="text/javascript"&gt;</div><div class="line">        window.onload = function() &#123;</div><div class="line">            var buttonObj = document.getElementById("button01");</div><div class="line">            buttonObj.onclick = function() &#123;</div><div class="line">                alert("被点击了...");</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &lt;/script&gt;</div></pre></td></tr></table></figure>
<h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><pre><code>this是当前对象,谁是当前对象,谁调用这个方法谁就是当前对象
</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>的两种使用方式:</div><div class="line">第一种:</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params">node</span>)</span>&#123;</div><div class="line">		<span class="comment">//获取当前输入框对象的value</span></div><div class="line">		alert(node.value);</div><div class="line">	&#125;	</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">&lt;body&gt;</div><div class="line">	&lt;input type="text" id="t1" onfocus="run(this)" value="test1"/&gt;</div><div class="line">	&lt;br /&gt;</div><div class="line">	&lt;input type="text" id="t2" onfocus="run(this)" value="test2"/&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">第二种:</div><div class="line">&lt;script&gt;	</div><div class="line">	window.onload = function()&#123;</div><div class="line">		var t1 = document.getElementById("t1");</div><div class="line">		//获取焦点时，打印t1里面的内容</div><div class="line">		t1.onfocus = function()&#123;</div><div class="line">			//alert(t1.value);</div><div class="line">			alert(this.value);//this 与 t1 等价</div><div class="line">		&#125;;</div><div class="line">	&#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	&lt;input type="text" id="t1" value="t1"/&gt;</div><div class="line">	&lt;br /&gt;</div><div class="line">	&lt;input type="text" id="t2"/&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>
<h3 id="数组对象-Array"><a href="#数组对象-Array" class="headerlink" title="数组对象(Array)"></a>数组对象(Array)</h3><pre><code>JS中数组长度是可变的,不存在索引越界问题
索引不一定只有数字,字符也可以
数组中可以存储不同类型的元素
</code></pre><h4 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h4><pre><code>格式: 
1. 创建空数组: var arr = new Array();
2. 创建指定长度数组: var arr = new Array(3);
    注意: 数组默认值是undefined
3. 创建数组时直接赋值: var arr = new Array(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;);
4. 方式3的变形: var arr = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;];
</code></pre><h4 id="常用属性及方法"><a href="#常用属性及方法" class="headerlink" title="常用属性及方法"></a>常用属性及方法</h4><pre><code>1. 获取长度: arr.length
2. 为数组赋值 arr[0] = &quot;a&quot;;
3. 将数组中的元素用指定字符拼成一个字符串: join(separator)
</code></pre><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>);</div><div class="line">两种遍历方式:</div><div class="line"><span class="number">1.</span>普通遍历:</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.lenth; i++)&#123;</div><div class="line">        alert(<span class="string">"普通遍历"</span>+arr[i]);</div><div class="line">    &#125;</div><div class="line"><span class="number">2.</span><span class="keyword">in</span>遍历</div><div class="line">	<span class="keyword">for</span>(index <span class="keyword">in</span> arr)&#123;</div><div class="line">		alert(<span class="string">"in遍历"</span>+arr[index]);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">alert(arr.join(<span class="string">"--"</span>); <span class="comment">//将数组元素以--连接打印</span></div></pre></td></tr></table></figure>
<h4 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">数组和数组嵌套就是二维数组</div><div class="line">var out = new Array()'</div><div class="line">out[0] = new Array("a","b","c");</div><div class="line">out[1] = new Array("d","e","f","g");</div><div class="line">out[2] = new Array("h","i");</div><div class="line">//获取大盒子长度</div><div class="line">alert(out.length);</div><div class="line">//获取第二个小盒子的长度</div><div class="line">alert(out[1].length);</div><div class="line">//获得i值</div><div class="line">alert(out[2][1]);</div></pre></td></tr></table></figure>
<h3 id="其它对象-全局对象"><a href="#其它对象-全局对象" class="headerlink" title="其它对象(全局对象)"></a>其它对象(全局对象)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">string(字符串):</div><div class="line">    常用方法:</div><div class="line">        charAt(); 返回在指定位置的字符;</div><div class="line">        indexOf(searchvalue,fromindex); 从指定位置处向后搜索匹配字符串;</div><div class="line">            searchvalue(必选) --&gt; 要匹配的字符串; fromindex(可选) --&gt; 开始位置;</div><div class="line">        lastIndexOf(searchvalue,fromindex); 从指定位置处向前搜索匹配字符串;</div><div class="line">            searchvalue(必选) --&gt; 要匹配的字符串; fromindex(可选) --&gt; 开始位置;</div><div class="line">        split(separator, howmany); 用指定的字符串分割成字符串数组;</div><div class="line">            separator(必选) --&gt; 字符串或正则表达式; howmany --&gt; 返回指定最大长度的数组;</div><div class="line">        toLocaleLowerCase(); toLowerCase();把字符串转换为小写。</div><div class="line">        toLocaleUpperCase(); toUpperCase()把字符串转换为大写。</div><div class="line"></div><div class="line"><span class="built_in">Date</span>(日期):</div><div class="line">    创建对象:</div><div class="line">        <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">//获取当前时间;</span></div><div class="line">        <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(毫秒值); <span class="comment">//生成指定时间;</span></div><div class="line">    常用方法:</div><div class="line">        date.toString(); <span class="comment">//获取时间的string类型;</span></div><div class="line">        date.toLocaleString(); <span class="comment">//获取本地格式的时间;</span></div><div class="line">        date.gettime(); <span class="comment">//获取毫秒值;</span></div><div class="line"></div><div class="line"><span class="built_in">Math</span>(数学):</div><div class="line">    常用方法:</div><div class="line">        ceil(); 向上取整;</div><div class="line">        floor(); 向下取整;</div><div class="line">        round(); 四舍五入;</div><div class="line">        random(); <span class="number">0</span>~<span class="number">1</span>之间的随机数;</div><div class="line">        pow(x,y); 返回x的y次幂;</div><div class="line">        sqrt(x); x的平方根;</div><div class="line"></div><div class="line"><span class="built_in">RegExp</span>(正则):</div><div class="line">    创建:</div><div class="line">        <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(正则规则);</div><div class="line">        <span class="keyword">var</span> reg = <span class="regexp">/^正则规则$/</span>;</div><div class="line">    常用方法:</div><div class="line">        test(要校验的字符串);</div></pre></td></tr></table></figure>
<h3 id="全局函数"><a href="#全局函数" class="headerlink" title="全局函数"></a>全局函数</h3><pre><code>封装在window对象中
1. 数字转换:
    parseInt(&quot;字符串&quot;): 将字符串解析成整数
    parseFloat(&quot;字符串&quot;): 将字符串解析成小数
    注意: JS解析时,会解析非数字字符前面的数字,不会报错
        如如果字符串是12ab3,会解析成12
        如果字符串是abc123,会解析成NaN    
2. 编码解码:
    encodeURL();    把字符串编码为URL;
    decodeURL();    将某个编码的URL解码;
    问题: 客户端和服务器端编码集不同,数据传输乱码
    解决方案:
        第一步(编码): 将中文字符根据编码集转换成固定格式的数字:
                %数字%数字%....
        第二步(解码): 发送到服务器,服务器使用和客户端相同的编码集转换成字符
3. eval();     将字符串转换为可执行的代码;
</code></pre><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="表单校验-简单"><a href="#表单校验-简单" class="headerlink" title="表单校验(简单)"></a>表单校验(简单)</h4><pre><code>* 要求: 注册时对用户名和密码进行非空校验,用户名还要进行非空格校验
* 语法: 
    1. form标签中onsubmit = &quot;return 函数() &quot;;
    2. JS编写函数实现,函数返回true或false,如果是true就提交表单,否则不提交
* JS中正则的使用: 以/^开始 以 $/结束
* 匹配 --- 两种方式
    1. 数据.match(正则);
    2. 正则.test(数据);
</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div></pre></td><td class="code"><pre><div class="line">主要看两个标签: <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="xml">和<span class="tag">&lt;<span class="name">form</span>&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="keyword">var</span> un = <span class="built_in">document</span>.getElementById(<span class="string">"un"</span>);</div><div class="line">				<span class="keyword">var</span> pw = <span class="built_in">document</span>.getElementById(<span class="string">"pw"</span>);</div><div class="line">				<span class="keyword">if</span>(un.value == <span class="string">""</span>)&#123;</div><div class="line">					alert(<span class="string">"用户名不能为空!"</span>);</div><div class="line">					<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">var</span> re = <span class="regexp">/^ +$/</span>;</div><div class="line">				<span class="comment">/*if(un.value.match(re))&#123;</span></div><div class="line">					alert("用户名不能包含空格!");</div><div class="line">					return false;</div><div class="line">				&#125;*/</div><div class="line">				<span class="keyword">if</span>(re.test(un.value))&#123;</div><div class="line">					alert(<span class="string">"用户名不能包含空格!"</span>);</div><div class="line">					<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span>(pw.value == <span class="string">""</span>)&#123;</div><div class="line">					alert(<span class="string">"密码不能为空!"</span>);</div><div class="line">					<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"../index.html"</span> <span class="attr">method</span>=<span class="string">"get"</span> <span class="attr">onsubmit</span>=<span class="string">"return check()"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">"6"</span> <span class="attr">color</span>=<span class="string">"#46B8DA"</span>&gt;</span>会员注册<span class="tag">&lt;/<span class="name">font</span>&gt;</span>UserRegister</div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>帐号:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">"un"</span>/&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>密码:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"pw"</span> /&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>确认密码:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> /&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>邮箱:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"email"</span> /&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>/&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>自我介绍:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">"5"</span> <span class="attr">cols</span>=<span class="string">"14"</span>&gt;</span>打篮球<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>性别:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"man"</span> <span class="attr">checked</span>=<span class="string">"checked"</span>/&gt;</span>男</div><div class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"woman"</span> /&gt;</span>女</div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>出生日期:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"year"</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1990"</span>&gt;</span>1990<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1991"</span>&gt;</span>1991<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1992"</span>&gt;</span>1992<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1993"</span>&gt;</span>1993<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">						<span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"month"</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"4"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">						<span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"day"</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"4"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">						<span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>验证码:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"code"</span>/&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../img/image/captcha.jhtml"</span> /&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span> /&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="表单校验-优化"><a href="#表单校验-优化" class="headerlink" title="表单校验(优化)"></a>表单校验(优化)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">不以警告框的形式弹出校验信息,而是在文本框后面显示</div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> un = <span class="built_in">document</span>.getElementById(<span class="string">"un"</span>);</div><div class="line">		<span class="keyword">var</span> unmsg = <span class="built_in">document</span>.getElementById(<span class="string">"unmsg"</span>);</div><div class="line">		un.onfocus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			unmsg.innerHTML = <span class="string">"&lt;font&gt;帐号必填&lt;/font&gt;"</span></div><div class="line">		&#125;</div><div class="line">		un.onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> re = <span class="regexp">/^ +$/</span>;</div><div class="line">			<span class="keyword">if</span>(un.value == <span class="string">""</span>)&#123;</div><div class="line">				unmsg.innerHTML = <span class="string">"&lt;font color='red'&gt;帐号不能为空!&lt;/font&gt;"</span>;</div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(re.test(un.value))&#123;</div><div class="line">				unmsg.innerHTML = <span class="string">"&lt;font color='blue'&gt;帐号不能包含空格!&lt;/font&gt;"</span>;</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				unmsg.innerHTML = <span class="string">"&lt;font&gt;恭喜!帐号可用!&lt;/font&gt;"</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">var</span> pw = <span class="built_in">document</span>.getElementById(<span class="string">"pw"</span>);</div><div class="line">		<span class="keyword">var</span> pwmsg = <span class="built_in">document</span>.getElementById(<span class="string">"pwmsg"</span>);</div><div class="line">		pw.onfocus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			pwmsg.innerHTML = <span class="string">"&lt;font&gt;密码必填&lt;/font&gt;"</span>;</div><div class="line">		&#125;</div><div class="line">		pw.onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">if</span>(pw.value == <span class="string">""</span>)&#123;</div><div class="line">				pwmsg.innerHTML = <span class="string">"&lt;font color='red'&gt;密码不能为空&lt;/font&gt;"</span>;</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				pwmsg.innerHTML = <span class="string">"&lt;font&gt;恭喜!密码可用!&lt;/font&gt;"</span></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">td</span>&gt;</span>帐号:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">"un"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"unmsg"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">td</span>&gt;</span>密码:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span><span class="attr">id</span>=<span class="string">"pw"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"pwmsg"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">图片:</div><div class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../img/img/1.jpg"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">id</span>=<span class="string">"lunbo"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">编写轮播脚本:</div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">		<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> count = <span class="number">1</span>;</div><div class="line">			<span class="built_in">window</span>.setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="keyword">var</span> lunbo = <span class="built_in">document</span>.getElementById(<span class="string">"lunbo"</span>);</div><div class="line">				count++;</div><div class="line">				<span class="keyword">if</span>(count &gt; <span class="number">3</span>)&#123;</div><div class="line">					count = <span class="number">1</span>;</div><div class="line">				&#125;</div><div class="line">				lunbo.src = <span class="string">"../img/img/"</span>+count+<span class="string">".jpg"</span>;</div><div class="line">			&#125;,<span class="number">1000</span>);</div><div class="line">		&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="定时广告"><a href="#定时广告" class="headerlink" title="定时广告"></a>定时广告</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">图片:</div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"gg"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../../img/image/2.jpg"</span> <span class="attr">width</span>=<span class="string">"100%"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">编写js脚本:</div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">		<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="keyword">var</span> gg = <span class="built_in">document</span>.getElementById(<span class="string">"gg"</span>);</div><div class="line">				gg.style.display = <span class="string">"block"</span>;</div><div class="line">				<span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">					gg.style.display = <span class="string">"none"</span>;</div><div class="line">				&#125;,<span class="number">3000</span>);</div><div class="line">			&#125;,<span class="number">3000</span>);</div><div class="line">		&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="表格隔行变色"><a href="#表格隔行变色" class="headerlink" title="表格隔行变色"></a>表格隔行变色</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div></pre></td><td class="code"><pre><div class="line">要求: 表格奇数行与偶数行颜色不同,当鼠标移入时,当前行变为粉色,移出时变回原来的颜色</div><div class="line">知识前提:首先我们要知道,当页面加载完,window.onload = function()&#123;&#125;,function函数</div><div class="line">已经执行完了,onmouseover和onmouseout事件已经绑定完(也就是每个对象都有这个事件了),</div><div class="line">只是还未触发,所以tr.onmouseover = function()&#123;&#125;,function并没有执行</div><div class="line">第一种形式:(错误)</div><div class="line">错误原因: 页面加载完,此时i=5,1处tr为trs[最后一次进入for时的i],即i=4;</div><div class="line">此时tr只代表最后一行,当鼠标移入其他行时,触发事件了,事件function中的tr都代表最后一行,所以颜色都是改的最后一行的颜色</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">			.jishu&#123;</div><div class="line">				background-color: red;</div><div class="line">			&#125;</div><div class="line">			.oushu&#123;</div><div class="line">				background-color: blue;</div><div class="line">			&#125;</div><div class="line">			.pink&#123;</div><div class="line">				background-color: pink;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="keyword">var</span> trs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"tr"</span>);</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i &lt; trs.length;i++)&#123;</div><div class="line">					<span class="keyword">var</span> tr = trs[i];<span class="comment">//1处</span></div><div class="line">					<span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">1</span>)&#123;</div><div class="line">						tr.className = <span class="string">"jishu"</span>;</div><div class="line">					&#125;<span class="keyword">else</span>&#123;</div><div class="line">						tr.className = <span class="string">"oushu"</span>;</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">var</span> temp;</div><div class="line">					tr.onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">						temp = tr.className;</div><div class="line">						tr.className = <span class="string">"pink"</span>;</div><div class="line">					&#125;</div><div class="line">					tr.onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">						tr.className = temp;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">cellpadding</span>=<span class="string">"0"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"80%"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>商品名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>商品描述<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"itemSelect"</span> /&gt;</span>		</div><div class="line">				<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>手机数码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>手机数码商品信息<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tr</span> &gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"itemSelect"</span> /&gt;</span>		</div><div class="line">				<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>电脑办公<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>电脑办公商品信息<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"itemSelect"</span> /&gt;</span>		</div><div class="line">				<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>鞋靴箱包<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>鞋靴箱包商品信息<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"itemSelect"</span> /&gt;</span>		</div><div class="line">				<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>家居饰品<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>家居饰品商品信息<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line">第二种形式(错误):</div><div class="line">结果是颜色并不会变化.</div><div class="line">错误原因:</div><div class="line">加载完,i=5;触发事件function中的trs[5]并不代表某一行(因为总共就5行),属于undefined.</div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> trs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"tr"</span>);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i &lt; trs.length;i++)&#123;</div><div class="line">			<span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">1</span>)&#123;</div><div class="line">				trs[i].className = <span class="string">"jishu"</span>;</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				trs[i].className = <span class="string">"oushu"</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">var</span> temp;</div><div class="line">			trs[i].onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				temp = trs[i].className;</div><div class="line">				trs[i].className = <span class="string">"pink"</span>;</div><div class="line">			&#125;</div><div class="line">			trs[i].onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				trs[i].className = temp;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">第三种形式:(正确)</div><div class="line">在onmouseover和onmouseout事件方法中使用this关键字,谁触发事件就代表谁</div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> trs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"tr"</span>);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i &lt; trs.length;i++)&#123;</div><div class="line">			<span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">1</span>)&#123;</div><div class="line">				trs[i].className = <span class="string">"jishu"</span>;</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				trs[i].className = <span class="string">"oushu"</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">var</span> temp;</div><div class="line">			trs[i].onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				temp = <span class="keyword">this</span>.className;</div><div class="line">				<span class="keyword">this</span>.className = <span class="string">"pink"</span>;</div><div class="line">			&#125;</div><div class="line">			trs[i].onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="keyword">this</span>.className = temp;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="复选框操作"><a href="#复选框操作" class="headerlink" title="复选框操作"></a>复选框操作</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="keyword">var</span> cbs = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"itemSelect"</span>);</div><div class="line">				<span class="built_in">document</span>.getElementById(<span class="string">"chooseAll"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">					<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cbs.length;i++)&#123;</div><div class="line">						cbs[i].checked = <span class="literal">true</span>;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				<span class="built_in">document</span>.getElementById(<span class="string">"chooseNone"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">					<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cbs.length;i++)&#123;</div><div class="line">						cbs[i].checked = <span class="literal">false</span>;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				<span class="built_in">document</span>.getElementById(<span class="string">"fanxuan"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">					<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cbs.length;i++)&#123;</div><div class="line">						cbs[i].checked = !cbs[i].checked;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">cellpadding</span>=<span class="string">"0"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"80%"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"全选"</span> <span class="attr">id</span>=<span class="string">"chooseAll"</span>/&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"全不选"</span> <span class="attr">id</span> = <span class="string">"chooseNone"</span>/&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"反选"</span> <span class="attr">id</span> = <span class="string">"fanxuan"</span> /&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>商品名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>商品描述<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"itemSelect"</span>/&gt;</span>		</div><div class="line">				<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>手机数码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>手机数码商品信息<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"itemSelect"</span> /&gt;</span>		</div><div class="line">				<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>电脑办公<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>电脑办公商品信息<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"itemSelect"</span> /&gt;</span>		</div><div class="line">				<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>鞋靴箱包<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>鞋靴箱包商品信息<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"itemSelect"</span> /&gt;</span>		</div><div class="line">				<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>家居饰品<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>家居饰品商品信息<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="省市联动"><a href="#省市联动" class="headerlink" title="省市联动"></a>省市联动</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">省市联动实现分析：</div><div class="line">1、省以及市的信息存储起来(JS数组存储)</div><div class="line">2、当第一个下拉框的选择改变时，触发一个函数</div><div class="line">	   onchange</div><div class="line">3、函数中根据选择的省在第二个下拉框显示对应的市</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">		<span class="comment">// 定义二维数组,存储城市信息</span></div><div class="line">	</div><div class="line">		<span class="keyword">var</span> cities = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">		cities[<span class="number">0</span>] = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"海淀"</span>,<span class="string">"昌平"</span>);</div><div class="line">		cities[<span class="number">1</span>] = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"长春市"</span>,<span class="string">"吉林市"</span>,<span class="string">"松原市"</span>,<span class="string">"延边市"</span>);</div><div class="line">		cities[<span class="number">2</span>] = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"济南市"</span>,<span class="string">"青岛市"</span>,<span class="string">"烟台市"</span>,<span class="string">"潍坊市"</span>,<span class="string">"淄博市"</span>);</div><div class="line">		cities[<span class="number">3</span>] = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"石家庄市"</span>,<span class="string">"唐山市"</span>,<span class="string">"邯郸市"</span>,<span class="string">"廊坊市"</span>);</div><div class="line">		cities[<span class="number">4</span>] = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"南京市"</span>,<span class="string">"苏州市"</span>,<span class="string">"扬州市"</span>,<span class="string">"无锡市"</span>);</div><div class="line">方式一:</div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params">node</span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> city = <span class="built_in">document</span>.getElementById(<span class="string">"city"</span>);</div><div class="line">			<span class="comment">//下面这行的目的是:每次更改省的时候,都会调用run,把city下拉列表中的内容清空</span></div><div class="line">			city.innerHTML = <span class="string">"&lt;option&gt;----请-选-择-市----&lt;/option&gt;"</span>;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; cities[node.value].length; i++)&#123;</div><div class="line">				<span class="keyword">var</span> opt = <span class="string">"&lt;option&gt;"</span>+cities[node.value][i]+<span class="string">"&lt;/option&gt;"</span>;</div><div class="line">				<span class="comment">//每个市进行拼接</span></div><div class="line">				city.innerHTML += opt;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">方式二:</div><div class="line">		<span class="comment">/*function run(node)&#123;</span></div><div class="line">			var city = document.getElementById("city");</div><div class="line">			city.innerHTML = "&lt;option&gt;----请-选-择-市----&lt;/option&gt;";</div><div class="line">			for(var i = 0; i &lt; cities[node.value].length;i++)&#123;</div><div class="line">				var opt = document.createElement("option");</div><div class="line">				var txt = document.createTextNode(cities[node.value][i]);</div><div class="line">				opt.appendChild(txt);</div><div class="line">				city.appendChild(opt);			</div><div class="line">			&#125;</div><div class="line">		&#125;*/</div><div class="line">		</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"province"</span> <span class="attr">style</span>=<span class="string">"width:150px"</span> <span class="attr">onchange</span>=<span class="string">"run(this)"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>----请-选-择-省----<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>吉林省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>山东省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>河北省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"4"</span>&gt;</span>江苏省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"city"</span> <span class="attr">style</span>=<span class="string">"width:150px"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>----请-选-择-市----<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;* 概念: 
    * 是基于对象和事件驱动的脚本语言, 用于开发交互式web页面
    * 解释型语言,不需要进行编译,由浏览器执行
* 作用:
    * 动态的修改内存中的html和css
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="https://geekhoon.github.io/categories/JavaWeb/"/>
    
    
      <category term="前端开发" scheme="https://geekhoon.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>HTML&amp;CSS</title>
    <link href="https://geekhoon.github.io/2017/03/18/JavaWeb-01-HTML&amp;CSS/"/>
    <id>https://geekhoon.github.io/2017/03/18/JavaWeb-01-HTML&amp;CSS/</id>
    <published>2017-03-18T11:31:26.000Z</published>
    <updated>2017-03-28T13:17:34.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="HTML概述"><a href="#HTML概述" class="headerlink" title="HTML概述"></a>HTML概述</h3><pre><code>1.超文本标记语言
    超文本- 不仅可以存文本, 还可以为文本添加样式,还可以存视频,音频,图片
    标记- HTML源码中使用标签实现超文本存储,标签称之为标记
    语言- 一门计算机语言
</code></pre><a id="more"></a>    
<pre><code>2.作用: 编写静态网页
3.特点:
    1. 是一种解释型语言,源码不需要编译
        编译型: 源码--&gt;机器码(0101...)--&gt;以后每次执行机器码
        解释型: 源码--&gt;每次直接执行源码
       拓展: 编译型效率更高
    2. 文件的扩展名是*.html或*.htm
    3. html结构都是由标签组成
        标签名都是预先定义好的,具有固定好的功能;
        标签名不区分大小写
        标签由开始标签和结束标签组成
        标签若没有&quot;内容体&quot;,可以自结束(&lt;img /&gt;也称&quot;空标签&quot;)
4.注释: &lt;!-- 注释内容,不能嵌套使用 --&gt;
</code></pre><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>,<span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>,...<span class="tag">&lt;<span class="name">h6</span>&gt;</span>标题6<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></div><div class="line">	特点:</div><div class="line">		1. 依次减小</div><div class="line">		2. 自动换行</div></pre></td></tr></table></figure>
<h4 id="水平线"><a href="#水平线" class="headerlink" title="水平线"></a>水平线</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></div><div class="line">	属性:</div><div class="line">		1. width:设置宽度,取值百分比(%),像素(px);</div><div class="line">		2. size:设置高度(粗细),取值百分比(%),像素(px);</div></pre></td></tr></table></figure>
<h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">font</span>&gt;</span>字体<span class="tag">&lt;/<span class="name">font</span>&gt;</span></div><div class="line">	属性:</div><div class="line">		color:设置颜色,取值:</div><div class="line">			1.使用颜色的英语单词;</div><div class="line">			2.使用16进制组成颜色码:</div><div class="line">				#xx(红)xx(绿)xx(蓝) 例:红:#ff0000 白:#ffffff 黑:#000000</div><div class="line">		size:设置字体大小,取值1~7;默认是3</div></pre></td></tr></table></figure>
<h4 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">粗体:</div><div class="line">	<span class="tag">&lt;<span class="name">b</span>&gt;</span>粗体<span class="tag">&lt;/<span class="name">b</span>&gt;</span></div><div class="line"></div><div class="line">斜体:</div><div class="line">	<span class="tag">&lt;<span class="name">i</span>&gt;</span>斜体<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	特点:</div><div class="line">		1.自动换行,独占一行;</div><div class="line">		2.前后留白;</div><div class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span> 换行</div></pre></td></tr></table></figure>
<h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> /&gt;</span></div><div class="line">	属性:</div><div class="line">		src:图片路径;</div><div class="line">			相对路径:</div><div class="line">				../	返回到当前文件夹的上一级文件夹目录;</div><div class="line">				./	当前文件夹目录;</div><div class="line">		alt:当图片不能显示时,代替图片的说明文本;</div><div class="line">		title:提示描述(鼠标悬停在图片上时,显示的说明文本);</div><div class="line">		width:设置图片的宽度,取值百分比,像素;</div><div class="line">		heigth:设置图片的高度,取值百分比(%),像素(px);</div></pre></td></tr></table></figure>
<h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">  有序列表:</div><div class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>	</div><div class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div><div class="line"></div><div class="line">  无序列表:</div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>	</div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">  属性:</div><div class="line">type:设置标识:</div><div class="line">	ol:取值:a,A,i,I,1等;</div><div class="line">	ul:取值:circle(空心圆),square(方块),disc(实心圆);</div></pre></td></tr></table></figure>
<h4 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span>超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span>	</div><div class="line">	属性:</div><div class="line">		href:资源的路径(访问路径);</div><div class="line">		target:设置打开方式,取值:</div><div class="line">			_blank:开启新窗口显示;</div><div class="line">			_self:覆盖当前窗口显示;</div></pre></td></tr></table></figure>
<h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span>		</div><div class="line">	属性:</div><div class="line">		border:设置边框,取值像素;</div><div class="line">		cellpadding:设置单元格与单元格内容之间的间距;</div><div class="line">		cellspacing:设置单元格与单元格之间的间距;</div><div class="line">		width:设置宽度,取值百分比(%),像素(px);</div><div class="line">		align:设置表格对齐方式;</div><div class="line">		bgcolor:设置背景颜色;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span>		<span class="comment">&lt;!-- 定义一行 --&gt;</span></div><div class="line">	属性:</div><div class="line">		align:设置单元格内容的对齐方式;</div><div class="line">		bgcolor:设置背景颜色;</div><div class="line">	</div><div class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>		<span class="comment">&lt;!-- 定义表头单元格 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>		<span class="comment">&lt;!-- 定义普通单元格 --&gt;</span></div><div class="line">	属性:</div><div class="line">		align:设置单元格内容的对齐方式;</div><div class="line">		bgcolor:设置背景颜色;</div><div class="line">		colspan:合并单元格;</div><div class="line">		rowspan:合并行;</div></pre></td></tr></table></figure>
<h4 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">frameset</span>&gt;</span>:框架标签;</div><div class="line">	特点:</div><div class="line">		不能与body共存;</div><div class="line"></div><div class="line">	属性:</div><div class="line">		rows:行,取值百分比(%),像素(px);</div><div class="line">		cols:列,取值百分比(%),像素(px);</div><div class="line">	注意:</div><div class="line">		frameset可以嵌套</div><div class="line">	如果要实现左侧菜单栏超链接点击时,页面显示在右侧:</div><div class="line">		1. 右侧 frame 定义一个 name</div><div class="line">		2. 超链接的 target = "name 值"</div><div class="line">		</div><div class="line"><span class="tag">&lt;<span class="name">frame</span>&gt;</span>:框架子标签;</div><div class="line">	属性:</div><div class="line">		src:资源路径;</div><div class="line">		noresize:框架分隔线不能移动;</div><div class="line">		name:自定义名称(唯一);</div><div class="line">	使用<span class="tag">&lt;<span class="name">frameset</span>&gt;</span>布局页面:</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>后台页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">frameset</span> <span class="attr">rows</span>=<span class="string">"20%,*"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">frame</span> <span class="attr">noresize</span>=<span class="string">"noresize"</span> <span class="attr">src</span>=<span class="string">"top.html"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">frameset</span> <span class="attr">cols</span>=<span class="string">"20%,*"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">frame</span> <span class="attr">noresize</span>=<span class="string">"noresize"</span> <span class="attr">src</span>=<span class="string">"left.html"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">frame</span> <span class="attr">noresize</span>=<span class="string">"noresize"</span> <span class="attr">src</span>=<span class="string">"main.html"</span> <span class="attr">name</span>=<span class="string">"main"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line">left.html:</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"../../index.html"</span> <span class="attr">target</span>=<span class="string">"main"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>注册页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			</div><div class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span>:表单标签</div><div class="line">	作用:</div><div class="line">		读取客户录入,通过网络发送到服务器</div><div class="line">	应用场景:</div><div class="line">		登录,注册,搜索关键字</div><div class="line">	实现方式:</div><div class="line">		1.用户录入关键字</div><div class="line">		2.关键字发送到服务器</div><div class="line">			发送格式:</div><div class="line">				www.xxxx.com?word=用户录入的关键字</div><div class="line">				www.xxxx.com?username=用户帐号&amp;password=用户密码</div><div class="line">		3.服务器获取到键值对,取出值,再做下一步处理</div><div class="line">		4.查询数据库,并将结果发送到客户端</div><div class="line">	重点:</div><div class="line">		数据发送到服务器格式:</div><div class="line">			服务器域名?键1=值1&amp;键2=值2&amp;....</div><div class="line">		键---是开发人员预定义好的</div><div class="line">		值---是用户录入的</div><div class="line">		后台根据键取值</div><div class="line">	表单相关知识点:</div><div class="line">		1.表单页面</div><div class="line">			表单相关标签</div><div class="line">		2.指定格式发送服务器</div><div class="line">			指定格式---&gt; 输入项中设置name属性</div><div class="line">			发送到服务器---&gt; form标签中设置action="服务器路径"</div><div class="line">		3.提交方式</div><div class="line">			地址栏显示录入内容: 默认/method="get"</div><div class="line">			地址栏不显示录入内容: method="post"</div><div class="line">			POST--&gt; 数据安全,发送的数据没有长度限制</div><div class="line">	属性:</div><div class="line">		action:数据提交路径;</div><div class="line">		method:数据提交方式:(并不只有get和post)</div><div class="line">			get:理论上速度快,数据会追加到地址栏中(url?k=v&amp;k=v&amp;...),有数据大小限制(不安全);</div><div class="line">			post:理论上速度慢,数据不会追加到地址栏中,无数据大小限制(安全);</div></pre></td></tr></table></figure>
<h4 id="表单相关标签"><a href="#表单相关标签" class="headerlink" title="表单相关标签"></a>表单相关标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">	input:定义表单项;</div><div class="line">		属性:</div><div class="line">			type:表单项类型,取值:</div><div class="line">				text		--&gt; 文本框;</div><div class="line">				password	--&gt; 密码框;</div><div class="line">				radio		--&gt; 单选按钮;</div><div class="line">				checkbox	--&gt; 复选框;</div><div class="line">				file		--&gt; 文件上传;</div><div class="line">				hidden		--&gt; 隐藏域;</div><div class="line">				reset		--&gt; 重置按钮;</div><div class="line">				submit		--&gt; 提交按钮;</div><div class="line">				image		--&gt; 图形提交按钮;</div><div class="line">				button		--&gt; 普通按钮;</div><div class="line">			name:发送服务端的数据名称(需要提交的数据必须提供name值);</div><div class="line">			value:发送服务端的数据值;</div><div class="line">			size:表单项的长度;</div><div class="line">			checked:默认选中(用于单选框或复选框);</div><div class="line">			readonly:是否只读,数据会提交</div><div class="line">			disabled:是否可用,数据不会提交</div><div class="line">			maxlength:允许输入的最大长度;</div><div class="line">	</div><div class="line">	select:下拉列表;</div><div class="line">		属性:</div><div class="line">			name:发送服务端的数据名称;</div><div class="line">			multiple:不写默认单选,取值为"multiple"表示多选;</div><div class="line">			size:多选时,可见选项的数目;</div><div class="line">	</div><div class="line">		**子标签**</div><div class="line">			option:下拉项;</div><div class="line">				属性:</div><div class="line">					value:发送服务端的数据值;</div><div class="line">					selected:默认勾选项;</div><div class="line">	</div><div class="line">	textarea:文本域;</div><div class="line">		属性:</div><div class="line">			cols:文本域的列数;</div><div class="line">			rows:文本域的行数;</div><div class="line">		</div><div class="line">	注意: </div><div class="line">		1. radio保证单选,需要设置相同的name属性</div><div class="line">		2. 文本域比较特殊，没有 value 属性，设置数据必须设置在内容体</div><div class="line">		3. 隐藏标签hidden存储一些用户没必要看到的数据,比如id号</div><div class="line">	拓展:</div><div class="line">		设置性别用radio,只可以点击圆圈进行选择,如点击男或女也进行选择:</div><div class="line">		* 设input的id</div><div class="line">		* 设置label</div><div class="line">性别:</div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span>  <span class="attr">name</span>=<span class="string">"sex"</span>  <span class="attr">value</span>=<span class="string">"男"</span> <span class="attr">id</span>=<span class="string">"sexMan"</span>/&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"sexMan"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span>  <span class="attr">name</span>=<span class="string">"sex"</span>  <span class="attr">value</span>=<span class="string">"女"</span> <span class="attr">id</span>=<span class="string">"sexWoman"</span>/&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"sexWoman"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="表单小问题"><a href="#表单小问题" class="headerlink" title="表单小问题"></a>表单小问题</h4><pre><code>1. radio单选传递的值都是on,无法区分值.需要设置value来解决
2. checkbox复选传递的值也都是on,无法区分值,需要设置value来解决    
</code></pre><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><pre><code>概念: 层叠样式表,多个样式可以重叠使用
HTML-&gt; 内容的载体(存储内容)
CSS--&gt; 修饰内容
</code></pre><h4 id="CSS使用"><a href="#CSS使用" class="headerlink" title="CSS使用"></a>CSS使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">1.行内样式: 使用style属性;</div><div class="line">	语法:</div><div class="line">		style=&quot;属性名:属性值;属性名:属性值;&quot;</div><div class="line">	注意: 值本身有空格,要用 &quot;&quot; 或 &apos;&apos; 包裹,如果外层有双引号了,要用单引号</div><div class="line">2.内部样式: 在head中使用style标签定义样式;</div><div class="line">	语法:</div><div class="line">		&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">			选择器 &#123;</div><div class="line">				属性名: 属性值;</div><div class="line">				属性名: 属性值;</div><div class="line">			&#125;</div><div class="line">		&lt;/style&gt;</div><div class="line">3.外部样式: 创建*.css样式文件,在需要使用其中样式的html中引入该样式;</div><div class="line">	*.css文件语法:</div><div class="line">		选择器 &#123;</div><div class="line">				属性名: 属性值;</div><div class="line">				属性名: 属性值;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	引入样式语法:</div><div class="line">		&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;*.css文件的路径&quot;/&gt;</div><div class="line">		属性:</div><div class="line">			rel:说明当前页面与href所指定文档的关系(这里固定,指引入的文件是当前页面的样式表);</div><div class="line">			type:指定浏览器的解释方式;</div><div class="line">			href:*.css文件的路径;</div></pre></td></tr></table></figure>
<h4 id="div与span"><a href="#div与span" class="headerlink" title="div与span"></a>div与span</h4><pre><code>二者经常结合css使用,都可以存储内容体
div: 换行,除了包裹内容体,还会占内容后的一整行
span: 不换行,刚好包裹内容体
注: 
    div h1 p li ---&gt; 块级元素,默认换行
    span font a ---&gt; 行内元素,默认不换行
</code></pre><h4 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">作用: 定位要添加样式的标签</div><div class="line">分类: </div><div class="line">	1.元素选择器:</div><div class="line">		标签名 &#123;</div><div class="line">			CSS语法;</div><div class="line">		&#125;</div><div class="line">	2.ID选择器:</div><div class="line">		标签有id属性,这个值是标签的唯一标识;</div><div class="line">		#id值 &#123;</div><div class="line">			CSS语法;</div><div class="line">		&#125;</div><div class="line">	3.类选择器:</div><div class="line">		标签有class属性,这个值确定一类标签;</div><div class="line">		.class值 &#123;</div><div class="line">			CSS语法;</div><div class="line">		&#125;</div><div class="line">	4.属性选择器:</div><div class="line">		选择器[属性名=&apos;属性值&apos;] &#123;</div><div class="line">			CSS语法;</div><div class="line">		&#125;</div><div class="line">	5.包含(层叠)选择器:多个选择器组合在一起进行筛选</div><div class="line">		父选择器 子孙选择器 &#123;</div><div class="line">			CSS语法;</div><div class="line">		&#125;</div><div class="line">		举例:</div><div class="line">			先定位div,再定位当前div中的font</div><div class="line">			div font&#123;</div><div class="line">				color: red;</div><div class="line">			&#125;</div><div class="line">注意优先级: 行内样式 &gt; id选择器 &gt; 类选择器 &gt; 元素选择器</div></pre></td></tr></table></figure>
<h4 id="CSS样式"><a href="#CSS样式" class="headerlink" title="CSS样式"></a>CSS样式</h4><pre><code>border:设置边框样式;
    语法:
    选择器 {
        border:宽度 样式 颜色;
        width:取值百分比,像素;
    }
width:设置宽度,取值百分比,像素;
height:设置高度,取值百分比,像素;
display:转换标签的类型:
    标签分为:
        行内标签:可以与其它标签在一行显示的标签称为行内标签;
        块级标签:自己独占一行,不能与其它标签在一行共存的称为块级标签;
color:设置字体颜色;
font-size:设置字体大小;
background-color:设置背景样式;
float:设置浮动方式,取值:
    left:元素向左浮动;
    right:元素向右浮动;
    none:元素不浮动(默认值);
clear:清除浮动效果,取值:
    left:清除元素向左浮动;
    right:清除元素向右浮动;
    both:同时清除左右两侧浮动;
</code></pre><h4 id="CSS边框与尺寸"><a href="#CSS边框与尺寸" class="headerlink" title="CSS边框与尺寸"></a>CSS边框与尺寸</h4><pre><code>作用: 布局明显,美观
属性:
    border: 粗细 颜色 实线;
    width: 像素或百分比;
    height: 像素;
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">div&#123;</div><div class="line">	border: 1px red solid; /* solid代表实线 */</div><div class="line">	width: 100px;/* 也可以用百分比,如50%  */</div><div class="line">	height: 200px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="CSS其他样式"><a href="#CSS其他样式" class="headerlink" title="CSS其他样式"></a>CSS其他样式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">1.超链接:</div><div class="line">a&#123;</div><div class="line">	text-decoration: none; /* 取消下划线 */</div><div class="line">&#125;</div><div class="line">2.设置内容隐藏</div><div class="line">font&#123;</div><div class="line">	display:none;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="CSS结构样式"><a href="#CSS结构样式" class="headerlink" title="CSS结构样式"></a>CSS结构样式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">1.块级元素转行内元素</div><div class="line">	div&#123;</div><div class="line">		display:inline;</div><div class="line">	&#125;</div><div class="line">2.行内元素转块级元素:</div><div class="line">	span&#123;</div><div class="line">		display:block;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h4 id="CSS布局样式"><a href="#CSS布局样式" class="headerlink" title="CSS布局样式"></a>CSS布局样式</h4><pre><code>属性:
    float: 浮动,可以让div水平显示
1.假设都没有float属性,会默认换行
2.假设都有float属性,全部浮动
注意: 有的有float,有的没有float,结果产生了重叠
    出现重叠原因: 
        * 页面分成上下两层
        * 浮动在上,不浮动在下
        * 俯视观看
    解决:
        在d3中添加属性 clear: both;
        相当于把上层浮动的内容拿到下层,再进行排版
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">#d1&#123;</div><div class="line">	border: 1px red solid; </div><div class="line">	width: 100px;</div><div class="line">	height: 100px;</div><div class="line">	float: left; /* 浮动 */ </div><div class="line">&#125;</div><div class="line">#d2&#123;</div><div class="line">	border: 1px green solid; </div><div class="line">	width: 200px;</div><div class="line">	height: 200px;</div><div class="line">	float: left;	</div><div class="line">&#125;</div><div class="line">#d3s&#123;</div><div class="line">	border: 1px blue solid; </div><div class="line">	width: 300px;</div><div class="line">	height: 300px;</div><div class="line">		clear: both;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="CSS盒子模型"><a href="#CSS盒子模型" class="headerlink" title="CSS盒子模型"></a>CSS盒子模型</h4><pre><code>三部分: 外边距(margin),边框(border)和内边距(padding):
    外边距(margin):边框与其它标签边框之间的距离;
    内边距(padding):边框与内容之间的距离;
盒子之间间距设置:
    margin-top: 100px; /* 或百分比,纵向上不推荐百分比 */
    margin-left: 100px;
    margin-right
    margin-bottom

盒子内元素与盒子之间间距设置:
    padding-top: 100px; /* 或百分比 */
    padding-left: 50px;
    padding-right
    padding-bottom
拓展: right和bottom生效的情况:
        margin----&gt; 平级的盒子之间
        padding---&gt; 不指定盒子的width和height时可以生效
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;HTML概述&quot;&gt;&lt;a href=&quot;#HTML概述&quot; class=&quot;headerlink&quot; title=&quot;HTML概述&quot;&gt;&lt;/a&gt;HTML概述&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;1.超文本标记语言
    超文本- 不仅可以存文本, 还可以为文本添加样式,还可以存视频,音频,图片
    标记- HTML源码中使用标签实现超文本存储,标签称之为标记
    语言- 一门计算机语言
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="https://geekhoon.github.io/categories/JavaWeb/"/>
    
    
      <category term="前端开发" scheme="https://geekhoon.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
</feed>
