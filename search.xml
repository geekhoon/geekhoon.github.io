<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[13.API]]></title>
      <url>https://geekhoon.github.io/2017/02/10/13-API/</url>
      <content type="html"><![CDATA[<h3 id="API概念"><a href="#API概念" class="headerlink" title="API概念"></a>API概念</h3><pre><code>* API(Application Programming Interface) 
  应用程序编程接口
* Java API
  Java提供给我们使用的类，这些类将底层的实现封装了起来
</code></pre><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[12.面向对象]]></title>
      <url>https://geekhoon.github.io/2017/02/04/12-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<h3 id="面向过程与面向对象"><a href="#面向过程与面向对象" class="headerlink" title="面向过程与面向对象"></a>面向过程与面向对象</h3><pre><code>* 面向过程： 注重实现过程，每件事都是要亲自去做
* 面向对象： 注重实现结果，强调这件事让别人帮我来做

好处:
  1. 更符合人类思考的习惯
  2. 将复杂的事情简单化
  3. 从执行者变成指挥者
</code></pre><a id="more"></a> 
<h3 id="局部变量和成员变量区别"><a href="#局部变量和成员变量区别" class="headerlink" title="局部变量和成员变量区别"></a>局部变量和成员变量区别</h3><pre><code>1.定义位置不同
    局部变量：方法中
    成员变量：类中方法外
2.作用域不同
    局部变量：方法中，出了方法就不能用了
    成员变量：整个类
3.默认值不同
    局部变量：没有默认值，局部变量必须先赋值才能使用
    成员变量：有默认值。和数组元素默认值一样  
4.内存位置不同
    局部变量：在栈内存的方法中
    成员变量：在堆内存的对象中
5.生命周期不同
    局部变量：随着方法弹栈而消亡
    成员变量：随着对象的回收而消亡
</code></pre><h3 id="private关键字"><a href="#private关键字" class="headerlink" title="private关键字"></a>private关键字</h3><pre><code>* private可以修饰成员内容包括成员方法和成员变量

* 被private修饰的内容不能在其他类访问
</code></pre><h3 id="get和set方法"><a href="#get和set方法" class="headerlink" title="get和set方法"></a>get和set方法</h3><pre><code>私有化所有的属性 (成员变量) ,必须写对应的get/set方法
凡是自定义的类,自定义成员变量,应该私有化,提供get/set
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line"></div><div class="line">	<span class="comment">// set方法,变量name,age赋值</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// get方法,变量name,age获取值</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

* 测试代码1
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonTest</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Person p = <span class="keyword">new</span> Person();</div><div class="line">		<span class="comment">//调用set方法,对成员变量赋值</span></div><div class="line">		p.setAge(<span class="number">18</span>);</div><div class="line">		p.setName(<span class="string">"旺财"</span>);</div><div class="line">		<span class="comment">//调用get方法,获取成员变量的值</span></div><div class="line">		System.out.println(p.getName());</div><div class="line">		System.out.println(p.getAge());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><pre><code>概念: 隐藏实现细节，对外提供可以访问的方式
好处:
    * 1、提高了代码的复用性
    * 2、隐藏了实现细节，还要对外提供可以访问的方式。便于调用者的使用。
    * 3、提高了安全性    
</code></pre><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><pre><code>* 子类会自动拥有父类所有非private修饰的属性和方法

* 格式: class 子类 extends 父类 {} 

* 好处: 
    * 1、提高了代码的复用性，提高软件开发效率。
    * 2、让类与类之间产生了关系，提供了多态的前提。
* 坏处: 提高了类与类之间的耦合性

* 注意:
    * 1、Java中，类只支持单继承，不允许多继承，也就是说一个类只能有一个直接父类
    * 2、多个类可以继承一个父类
    * 3、Java中，多层继承是可以的，即一个类的父类可以再去继承另外的父类
        如:
        C类继承自B类，而B类又可以去继承A类，这时，C类也可称作A类的子类
        <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;&#125;</div><div class="line">   <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;&#125;   <span class="comment">// 类B继承类A，类B是类A的子类</span></div><div class="line">   <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;&#125;   <span class="comment">// 类C继承类B，类C是类B的子类，同时也是类A的子类</span></div></pre></td></tr></table></figure>

    * 4、Java中，子类和父类是一种相对概念，也就是说一个类是某个类父类的同时，也可以是另一个类的子类。
* 补充: 
     * 父类和子类创建后,编译时,父类.class先进内存方法区,然后子类再进
     * 创建子类的对象,子类在堆中划分区域存储,一个区域留给父类,父类成员变量
       跟随子类对象进入堆内存,另一块区域留给自己(父类区域在子类区域内部)
* 继承后子类父类成员变量的特点 :
    * 子父类中出现了同名的成员变量时,遵循就近查找原则,访问子类.
      在子类中需要访问父类中非私有成员变量时，需要使用super关键字
* 重写:
    * 当在程序中通过对象调用方法时，会先在子类中查找有没有对应的方法，
      若子类中存在就会执行子类中的方法，若子类中不存在就会执行父类中相应的方法。
    * 子类中出现与父类一模一样的方法时，会出现覆盖操作，也称为override重写
    <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//手机类</span></div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span>&#123;</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span></span>&#123;</div><div class="line">			System.out.println(<span class="string">"发短信"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</div><div class="line">			System.out.println(<span class="string">"打电话"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showNum</span><span class="params">()</span></span>&#123;</div><div class="line">			System.out.println(<span class="string">"来电显示号码"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//智能手机类</span></div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">NewPhone</span> <span class="keyword">extends</span> <span class="title">Phone</span></span>&#123;</div><div class="line">		</div><div class="line">		<span class="comment">//覆盖父类的来电显示号码功能，并增加自己的显示姓名和图片功能</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showNum</span><span class="params">()</span></span>&#123;</div><div class="line">			<span class="comment">//调用父类已经存在的功能使用super</span></div><div class="line">			<span class="keyword">super</span>.showNum();</div><div class="line">			<span class="comment">//增加自己特有显示姓名和图片功能</span></div><div class="line">			System.out.println(<span class="string">"显示来电姓名"</span>);</div><div class="line">			System.out.println(<span class="string">"显示头像"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
</code></pre><p>子类父类内存图:<br><img src="http://oj3s07yy0.bkt.clouddn.com/blog/20170209/154741718.png" alt=""></p>
<h3 id="重载与重写对比"><a href="#重载与重写对比" class="headerlink" title="重载与重写对比"></a>重载与重写对比</h3><pre><code>重载overload: 在同一个类中,方法名相同,参数列表不同
    和权限修饰符(public private 默认)无关,和返回值类型无关
    方法名:重载的两个方法的方法名必须相同
    形参列表(三者至少满足一个):
      形参类型的顺序不同
      形参的个数不同
      形参的类型不同
重写overwrite:
    权限修饰符(public private 默认): 
      子类方法的权限 &gt;= 父类的方法的权限
    方法名: 
      子类方法和父类方法必须相同
    形参列表: 
       子类方法和父类方法的形参列表必须相同
    返回值类型:
      基本类数据类型: 必须相同
      引用数据类型:
       子类方法的返回值类型和父类方法的返回值类型相同
       或者
       子类方法的返回值类型是父类方法的返回值类型的 子类
</code></pre><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><pre><code>* 抽象类定义格式:
    <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> 类名 </span>&#123;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>

* 抽象方法定义格式:
    <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> 返回值类型 方法名(参数);</div></pre></td></tr></table></figure>

  抽象方法,没有方法体;
* 使用:
    * 定义类，继承抽象类，并重写抽象方法
    * 创建子类对象，通过子类对象调用成员
* 特点:
    * 抽象类,抽象方法被abstract修饰,抽象方法只能出现在抽象类或接口中    
    * 抽象类不能创建对象
    * 一个普通类继承抽象类,一定要重写父类所有方法
    * 抽象类中可以有抽象方法,也可以有普通方法
    * 不能和private,final,static一起用 
</code></pre><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><pre><code>* 概念
接口是功能的集合,同样可看做是一种数据类型,是比抽象类更为抽象的”类”,一般把接口当作功能扩展.
接口只有抽象方法定义,并没有具体实现。
* 接口定义格式
    <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 接口名 </span>&#123;</div><div class="line">	抽象方法<span class="number">1</span>;</div><div class="line">	抽象方法<span class="number">2</span>;</div><div class="line">	抽象方法<span class="number">3</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

    * 抽象方法定义格式
        <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> 返回值类型 方法名(参数列表);</div></pre></td></tr></table></figure>

* 类实现接口
    *　类与接口之间为实现关系,不是继承
    *　定义实现类,实现接口,并重写接口中所有抽象方法
    *　类实现接口的格式：
        class 类名 implements 接口名 {
            重写接口中所有抽象方法
        }
    *  注意: 接口不能new, 实现类可以new
    *  实现类的特点: 重写接口中所有抽象方法,除非该实现类也是抽象类,则不能new         
* 接口中成员特点
    *  (1)成员变量的特点:(其实是常量,接口中没有变量)
        *  固定格式:
            <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> 数据类型 变量名 = 值;</div></pre></td></tr></table></figure>

        public :  公共权限
        static :  静态,可以被　类名．（接口名．）直接调用
        final  :  最终,固定变量的值. 所以再有赋值操作,都会报错
        注意: public static final,可以不写或选择性写.但默认还是被这三个修饰
    *  (2)成员方法的特点:
        *  固定格式:
            <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> 返回值类型 方法名(参数列表);</div></pre></td></tr></table></figure>

        注意: public abstract,可以不写或选择性写.但默认还是被这两个修饰
    *  (3)实现类必须覆盖掉接口中所有的抽象方法后，实现类才可以实例化。否则实现类还是一个抽象类。
* 接口的多实现
    *　接口最重要的体现：解决多继承的弊端
    　　类如果多继承，多个父类有相同功能时，子类调用会产生不确定性，
    　　因为父类中方法有主体，调用运行时，不确定运行哪个主体内容。
    *　接口并没有这种安全隐患,因为接口中全是抽象方法,并没有方法体
    *  格式:
        <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">A</span>,<span class="title">B</span></span>&#123;</div><div class="line">	重写A,B中所有抽象方法,否则不能被实例化</div><div class="line">&#125;</div></pre></td></tr></table></figure>

        注意: 如果A,B中有同名方法,但返回值不同,实现类中重写方法会报错
    *  类在继承类的同时,可以实现多个接口(先写继承,再写接口实现)
          <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">extends</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">A</span>,<span class="title">B</span></span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>

* 接口的多继承 
    <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> 	<span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">A</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">B</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span>,<span class="title">B</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">c</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">implements</span> <span class="title">C</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">c</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

    //D实现接口C, 需要重写C接口的全部抽象方法,
    //而且C继承A,B, 所以D实现类要重写ABC中所有抽象方法
    注意: 由于接口中的方法是抽象方法，子类实现后也不会发生调用的不确定性    
    *  接口与接口之间是继承关系,用extends
    *  Java支持接口之间的多继承,一个接口可以同时继承多个接口
    *  问: Java中有多继承吗?
       类不支持多继承, 接口支持多继承        
* 接口与抽象类的区别
    接口中全是抽象方法,抽象类中可以有抽象方法,也可以有非抽象方法
    接口可以多实现, 抽象类只能单继承
    * 抽象类是这个事物中应该具备的内容
    * 接口是这个事物中的额外内容
</code></pre><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><pre><code>* 概念: 一种事物有多种形态
    如Student类继承了Person类，一个Student的对象便既是Student，又是Person。
* 格式:
    父类类型或接口类型  变量名  =  new  子类的对象();
    共有三种表现形式: 
        1.普通类作为父类引用指向子类对象
        2.抽象类作为父类引用指向子类对象
        3.接口做为父类,指向实现类对象
  注意:(1)父类引用可以指向子类对象
       (2)多态调用方法,方法必须运行子类的重写方法
* 好处: 让程序更灵活, 提高了扩展性
* 多态前提:　要有继承(实现)关系
* 多中成员特点:
    (1)成员变量(编译,运行看父类)
        编译时,参考父类中有无这个变量,有则编译成功,没有则失败
        运行时,运行的是父类中的变量值
    (2)非静态成员方法(编译看父类,运行看子类)
        编译时,参考父类中有无这个方法,有则编译成功,没有则失败
        运行时,运行的是子类中的重写方法
    (3)静态成员方法(编译,运行看父类)
* instanceof关键字: 比较引用数据类型
    * 格式:　引用变量  instanceof 类名
                p    instanceof Student 
    比较p是不是Student类型的对象,是则返回true
* 转型
    (1)向上转型(自动转换)
        父类引用指向子类对象
        Person p = new Student();
    (2)向下转型(强制转换): 父类类型转为子类,可以调用子类中特有方法
        格式:　子类类型　变量名　＝（子类类型）父类类型的变量；        
              Student s = (Student) p ;
</code></pre><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><pre><code>* 作用: 在创建对象的同时,为成员变量初始化
* 快捷键: ALT+Shift+S (Generate Constructor using Firlds)
* 格式:　
    权限　方法名（参数列表）{
        方法体；
    }
* 注意:
    １.方法名与类名完全一致
    ２.不允许写返回值类型
    ３.构造方法在创建对象的时候执行，每个对象只执行一次
    ４.每一个类都有一个构造方法，如果我们没给，编译器会自动添加一个空参数的构造方法
    特别注意: 
    1.构造方法弹栈退出后,对象才算是创建结束
    2.一个类中,如果不写构造方法,默认会有一个空参构造,但是如果写了一个,就没有默认的构造方法了
    3.构造方法中可以有return
* 重载
    类中的构造方法可以有无限个, 区别就是参数列表不同
* 构造方法和普通方法区别
    * 定义格式不同:
        构造方法: 没有返回值,且方法名和类名一致
        普通方法: 有返回值,方法名字随意
    * 执行:
        构造方法: 在对象创建时自动执行，而且只执行一次
        普通方法: 对象创建后,需要手动调用,且可以执行多次  
* this
    * 代表本类对象的引用, 由谁调用,this就代表谁
    作用:  1. 区分成员变量和局部变量的同名情况
          2. 在本类中调用其他构造方法
    格式: this(参数列表);
        调用其他构造方法时,this()必须定义在构造方法的第一行，原因是初始化动作要最先执行。
        <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">this</span>(<span class="string">"geekhoon"</span>,<span class="number">25</span>);<span class="comment">//写在方法体的第一行</span></div><div class="line">	&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = name;</div><div class="line">	<span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div><div class="line">测试类的main方法:</div><div class="line">	main()&#123;</div><div class="line">		Person p = <span class="keyword">new</span> Person();</div><div class="line">		syso(p.getName());<span class="comment">//geekhoom</span></div><div class="line">		syso(p.getAge());<span class="comment">//25</span></div><div class="line">	&#125;</div></pre></td></tr></table></figure>

* super    
    作用: 调用父类的构造方法和成员变量        
    格式: 
        调用父类中的空参数构造方法   super();
        调用父类中的有参数构造方法   super(实参列表);
    注意: 
    * 只要是构造方法默认(隐式)第一行都是super();
    * 如果父类中有多个重载构造器,子类任意调用一个即可
    * super()和this()调用构造方法时,不能放在同一个代码块中,因为都要放在第一行
    * 无论如何,子类所有的构造方法,都要直接,间接调用父类构造方法
    * 当父类中没有空参数构造方法时，子类的构造方法必须有显示的super语句，指定要访问的父类有参数构造方法。
    * 子类默认会调用父类的无参构造， 但如果父类没有无参构造(即父类自定义了一个有参构造)，子类的构造方法继续调用父类的无参构造就会报错。
</code></pre><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><pre><code>* final就是固定, 不可变
* 可修饰 类,方法,成员变量,局部变量
  1.修饰类: 不可以被继承, 但是可以继承别的类
            String类就是final修饰的
  2.修饰方法: 不可以被子类重写, 但是可以被子类继承使用
  3.修饰局部变量: 
    (1)修饰基本数据类型: 称为常量,只能被赋值一次,终身不可改变
    (2)修饰引用数据类型: 变量存储的地址不可改变 
         但被final修饰的引用类型的变量指向的对象的属性是可以发生改变的
  4.修饰成员变量:
    * final固定的是成员变量的手动赋值,不是默认值
    * 一次赋值，终身不可改变
    * 需要在创建对象前赋值，否则报错,即不能用set赋值
    * 为成员变量赋值的两种实现方式: 
      (1)直接赋值,定义时用&quot;=&quot;赋值
        final int age = 1;
      (2)使用构造器进行赋值:
        <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="keyword">int</span> age;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Demo</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</div><div class="line">	<span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

      这两种赋值方式它不可以一起使用
</code></pre><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><pre><code>* 特点: 被static修饰的成员属于类, 被该类的所有对象共享。被static修饰的成员可以通过类名直接调用
         多个对象在访问或修改static修饰的成员变量时，其中一个对象将static成员变量值进行了修改，
      其他对象中的static成员变量值跟着改变，即多个对象共享同一个static成员变量
* 可修饰 方法, 成员变量
* 注意: 
    1. 被satic修饰的方法不能被重写, 但是可以重载
    2. 静态不能直接访问非静态(因为生命周期不同,静态优先于非静态存在于内存中,即静态先进入内存)
    3. 不允许写this/super(因为它们是代表本类对象和父类对象) 
* 内存中位置: 
     1.被static修饰的成员存在于方法区
     2.静态优先于非静态存在
     3.随着类的加载而加载,随着类的消亡而消亡
* 应用场景: 
    1. 什么时候使用static修饰成员变量？  
       这个成员变量需要被这个类的所有对象共享 
    2. 什么时候使用static修饰成员方法？
       静态的方法只能访问静态的成员,如果成员方法中没有调用非静态成员,可以加static 
* 定义静态常量: 
    * 格式:  public static final 数据类型 变量名 = 值;
    * 变量名全部大写，多个单词使用下划线连接
* 记住: 静态和对象没有关系, 静态是属于类的
</code></pre><h3 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h3><pre><code>* 指创建对象时，只有创建对象的语句，却没有把对象地址值赋值给某个变量。
* 特点:　
　　* 只能使用一次 
　　* 可以作为方法接收的参数、方法返回值使用
</code></pre><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><pre><code>* 当一个类定义在一个类的内部，这个类就是一个内部类
* 包括:
    (1)成员内部类: 
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</div><div class="line">	修饰符 <span class="class"><span class="keyword">class</span> 内部类名 </span>&#123;</div><div class="line">	 	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

      注意: 成员内部类可以使用外部类成员,包括私有.
            外部类要使用内部类成员,必须建立内部类对象
      外部类调用内部成员访问方式:
        外部类名.内部类名 变量名 = new 外部类对象().new 内部类对象();
        变量名.内部类方法();
    (2) 局部内部类: 把一个类定义到另一个类的方法中
</code></pre><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><pre><code>* 实质: 父类类型的子类对象, 或接口的实现类对象
* 格式: 
        new 接口或父类(){
            重写接口或者父类中的方法;(注意: 不是只重写抽象方法)
        };
* 注意: 匿名方法只能在方法中或构造代码块,局部代码块中使用
* 优点: 减少代码量
* 缺点: 可读性差
</code></pre><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><pre><code>* 概念: 实质上就是文件夹，可以对java代码进行分类管理
* 声明包格式: package 包名;
* 导入包的格式: import 要导入的包名;
  * 注意: java.lang包下的类是不需要导包也可以使用的
* 包的命名规范: 全部小写，一般是域名的倒叙。 
</code></pre><h3 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h3><pre><code> 从大到小
* public: 公共的，在任何包中都可使用
* protected: 受保护的，跨包子类中，本包中也可以使用
* default: 默认的，本包中可以使用。注意，默认的是什么都不写
* private: 私有的，只能在本类中使用
注意:
1. 修饰类只能使用public、默认的、final、abstract关键字
2. abstract不能和private,static,final一起用 
</code></pre><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><pre><code>代码块中不能创建方法
* 局部代码块：在方法中的   {} : 限定局部变量的生命周期
* 构造代码块：在类的成员位置的 {} 
     构造代码块在创建对象的时候执行，每创建一次，就执行一次。构造代码块优先于构造方法执行
* 静态代码块: 在类的成员位置
     格式:　static {

            } 
     静态代码块在类加载的时候执行，并且只会执行一次，优先于构造代码块执行
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[11.数组操作之遍历、逆序、排序及查找]]></title>
      <url>https://geekhoon.github.io/2017/01/26/11-%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C%E4%B9%8B%E9%81%8D%E5%8E%86%E3%80%81%E9%80%86%E5%BA%8F%E3%80%81%E6%8E%92%E5%BA%8F%E5%8F%8A%E6%9F%A5%E6%89%BE/</url>
      <content type="html"><![CDATA[<h3 id="1-数组遍历"><a href="#1-数组遍历" class="headerlink" title="1.数组遍历"></a>1.数组遍历</h3><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">//打印结果为[11, 33, 44, 22, 55]</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span>[] arr = &#123;<span class="number">11</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">22</span>, <span class="number">55</span>&#125;;</div><div class="line">	printArr(arr);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArr</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line">	System.out.print(<span class="string">"["</span>);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">		<span class="keyword">if</span>(i == arr.length - <span class="number">1</span>)&#123;</div><div class="line">			System.out.print(arr[i]);</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			System.out.print(arr[i]+<span class="string">","</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	System.out.print(<span class="string">"]"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><a id="more"></a> 
<h3 id="2-逆序"><a href="#2-逆序" class="headerlink" title="2.逆序"></a>2.逆序</h3><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> start = <span class="number">0</span>,end = arr.length-<span class="number">1</span>;start &lt; end;start++,end--)&#123;</div><div class="line">		<span class="keyword">int</span> temp = arr[start];</div><div class="line">		arr[start] = arr[end];</div><div class="line">		arr[end] = temp;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p>原理如图:</p>
<p><img src="http://oj3s07yy0.bkt.clouddn.com/blog/20170111/233540781.bmp" alt=""></p>
<h3 id="3-选择排序"><a href="#3-选择排序" class="headerlink" title="3.选择排序"></a>3.选择排序</h3><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line"><span class="comment">//外层比较了arr.length-1次</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</div><div class="line"><span class="comment">//i=0时,arr[0]和arr[1]先比,再与arr[2],arr[3]比</span></div><div class="line"><span class="comment">//i=1时,arr[1]和arr[2]先比,再与arr[3]比</span></div><div class="line"><span class="comment">//i=2时,arr[2]和arr[3]比</span></div><div class="line"><span class="comment">//所以令j=i+1,内层循环次数递减</span></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>;j &lt; arr.length;j++)&#123;</div><div class="line">		<span class="keyword">if</span> (arr[i] &gt; arr[j]) &#123;</div><div class="line">			<span class="keyword">int</span> temp = arr[i];</div><div class="line">			arr[i] = arr[j];</div><div class="line">			arr[j] = temp;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p>原理如图:</p>
<p><img src="http://oj3s07yy0.bkt.clouddn.com/blog/20170126/192538430.png" alt=""></p>
<h3 id="4-冒泡排序"><a href="#4-冒泡排序" class="headerlink" title="4.冒泡排序"></a>4.冒泡排序</h3><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line">	<span class="comment">//外层循环与选择排序一样,循环arr.length-1次</span></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length-<span class="number">1</span>; i++) &#123;</div><div class="line">	<span class="comment">//内层循环,索引每次从0开始, 每圈次数递减,若是j &lt; arr.length-i,会报索引越界异常</span></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length-i-<span class="number">1</span>; j++) &#123;</div><div class="line">			<span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;</div><div class="line">				<span class="keyword">int</span> temp = arr[j];</div><div class="line">				arr[j] = arr[j+<span class="number">1</span>];</div><div class="line">				arr[j+<span class="number">1</span>] = temp;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p>原理如图:</p>
<p><img src="http://oj3s07yy0.bkt.clouddn.com/blog/20170126/195527596.png" alt=""></p>
<h3 id="5-折半查找"><a href="#5-折半查找" class="headerlink" title="5.折半查找"></a>5.折半查找</h3><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> key)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> min = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> max = arr.length - <span class="number">1</span>;</div><div class="line">	<span class="keyword">int</span> mid = <span class="number">0</span>;</div><div class="line">	<span class="comment">//当min&gt;max,证明未找到,返回-1</span></div><div class="line">	<span class="keyword">while</span>(min &lt;= max)&#123;</div><div class="line">		mid = (min + max)/<span class="number">2</span>;</div><div class="line">		<span class="comment">////让查找元素和中间索引元素进行比较</span></div><div class="line">		<span class="keyword">if</span> (key &gt; arr[mid]) &#123;</div><div class="line">			min = mid + <span class="number">1</span>;</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span> (key &lt; arr[mid]) &#123;</div><div class="line">			max = mid - <span class="number">1</span>;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">           <span class="comment">//找到元素,返回元素索引</span></div><div class="line">			<span class="keyword">return</span> mid;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p>原理如图:</p>
<p><img src="http://oj3s07yy0.bkt.clouddn.com/blog/20170126/220130538.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[10.ArrayList集合]]></title>
      <url>https://geekhoon.github.io/2017/01/15/10-ArrayList%E9%9B%86%E5%90%88/</url>
      <content type="html"><![CDATA[<h3 id="1-ArrayList创建变量的步骤"><a href="#1-ArrayList创建变量的步骤" class="headerlink" title="1. ArrayList创建变量的步骤"></a>1. ArrayList创建变量的步骤</h3><pre><code>* 导入包 java.util包中
* 创建引用类型的变量
    数据类型&lt; 集合存储的数据类型&gt;  变量名 = new 数据类型&lt;集合存储的数据类型&gt;();
       创建集合引用变量的时候,必须先指定好存储的数据类型
* 变量名.方法 
    注意: 集合只存储引用数据类型,不存储基本类型
    8个基本类型要对应8个引用类型
</code></pre><a id="more"></a> 
<p><img src="http://oj3s07yy0.bkt.clouddn.com/blog/20170115/204404840.bmp" alt=""></p>
<h3 id="2-集合和数组区别"><a href="#2-集合和数组区别" class="headerlink" title="2. 集合和数组区别"></a>2. 集合和数组区别</h3><pre><code>          集合                        数组
长度:       可变                         |    固定
数据类型:  只能引用                  |    既可以基本既可以引用
内容:     可以存储不同数据类型的元素 |  只能存储同类型元素
</code></pre><h3 id="3-ArrayList的常见方法"><a href="#3-ArrayList的常见方法" class="headerlink" title="3. ArrayList的常见方法"></a>3. ArrayList的常见方法</h3><pre><code>* add(参数)           向集合中添加元素
* get(int index)   取出集合中的元素,get方法的参数,写入索引
* size()            返回集合的长度, 集合存储元素的个数

* add(int 索引,存储的元素)     将元素添加到指定的索引上
* set(int 索引,修改后的元素)     将指定索引的元素,进行修改
* remove(int 索引)             删除指定索引上的元素
* clear()                     清空集合中的所有元素,对象不会删
</code></pre><h3 id="4-ArrayList集合的遍历"><a href="#4-ArrayList集合的遍历" class="headerlink" title="4. ArrayList集合的遍历"></a>4. ArrayList集合的遍历</h3><pre><code>* 区别:遍历时,集合存储(Integer类型)与(类),调用get()得到的值是有区别的,分别是值与地址
Integer类型:
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo_2</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		ArrayList&lt;Integer&gt; array = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">		array.add(<span class="number">121</span>);</div><div class="line">		array.add(<span class="number">125</span>);</div><div class="line">		array.add(<span class="number">123</span>);</div><div class="line">		array.add(<span class="number">120</span>);</div><div class="line">		array.add(<span class="number">128</span>);</div><div class="line">		</div><div class="line">		<span class="comment">//对集合进行遍历</span></div><div class="line">		<span class="comment">//使用方法 size+get组合进行遍历</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; array.size(); i++)&#123;</div><div class="line">			System.out.println( array.get(i) );</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

类:
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//遍历集合,打印所有学生信息</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(ArrayList&lt;Student&gt; array)</span>	</span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.size();i++)&#123;</div><div class="line">		<span class="comment">//array.get(i)返回的是Student对象,用s接收</span></div><div class="line">		Student s = array.get(i);</div><div class="line">		System.out.println(<span class="string">"姓名是"</span>+s.name+<span class="string">",年龄是"</span>+s.age);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p>集合中存储类对象 内存图:</p>
<p><img src="http://oj3s07yy0.bkt.clouddn.com/blog/20170115/195450789.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[09.自定义类]]></title>
      <url>https://geekhoon.github.io/2017/01/15/09-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB/</url>
      <content type="html"><![CDATA[<h3 id="1-类"><a href="#1-类" class="headerlink" title="1. 类"></a>1. 类</h3><pre><code>* 分两种,一种是JAVA提供的,一种是自定义类
* 类是用于描述事物的.
* 事物的特征叫属性
* 事物的功能叫方法
</code></pre><h3 id="2-自定义类的格式"><a href="#2-自定义类的格式" class="headerlink" title="2. 自定义类的格式"></a>2. 自定义类的格式</h3><pre><code>* 使用类的形式,对现实中的事物进行描述。 

* 格式
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名</span>&#123;</div><div class="line">	属性定义(成员变量)</div><div class="line">	  修饰符 数据类型 变量名 = 值</div><div class="line">	</div><div class="line">	方法定义(成员方法)</div><div class="line">	  修饰符 返回值类型  方法名(参数列表)&#123;</div><div class="line">		  </div><div class="line">	  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a> 
<h3 id="3-自定义类的内存图"><a href="#3-自定义类的内存图" class="headerlink" title="3. 自定义类的内存图"></a>3. 自定义类的内存图</h3><p><img src="http://oj3s07yy0.bkt.clouddn.com/blog/20170115/200111098.png" alt=""></p>
<p>注意一点: new一个对象后,类中的成员变量,一并进入堆内存,并被赋予默认值<br>new出来对象的属性,存在堆里面<br>根据内存图,可知,即使没被赋值,打印 类名.属性 ,也会有默认值</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[08.方法]]></title>
      <url>https://geekhoon.github.io/2017/01/13/08-%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h3 id="1-方法的概述"><a href="#1-方法的概述" class="headerlink" title="1. 方法的概述"></a>1. 方法的概述</h3><pre><code>* 提高代码的复用性  
* 完成特定功能的代码块。
</code></pre><a id="more"></a> 
<h3 id="2-方法的定义格式"><a href="#2-方法的定义格式" class="headerlink" title="2. 方法的定义格式"></a>2. 方法的定义格式</h3><pre><code>* 修饰符 返回值类型 方法名(参数类型 参数名1,参数类型 参数名2...) {
        方法体语句;
        return 返回值; 
  } 
* 方法的格式说明
    * 参数：
        * 实际参数：就是实际参与运算的,调用方法时传递
        * 形式参数；就是方法定义上的，用于接收实际参数
    * return：
        * 将返回值返回给调用者
        * 结束方法
* 两个明确：
    返回值类型：结果的数据类型
    参数列表：参数的个数及对应的数据类型    
</code></pre><h3 id="3-调用方法执行流程"><a href="#3-调用方法执行流程" class="headerlink" title="3. 调用方法执行流程"></a>3. 调用方法执行流程</h3><pre><code>* 方法的定义是没有顺序的，写在main函数的上边或者下边都可以。
* 方法的执行，是把实参传递给形参，从而来执行的。
* 方法只有被调用才会执行。
</code></pre><p>方法调用的内存图:</p>
<p><img src="http://oj3s07yy0.bkt.clouddn.com/blog/20170113/200111183.bmp" alt=""></p>
<h3 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4. 注意事项"></a>4. 注意事项</h3><pre><code>* 方法不调用不执行
* 方法之间是平级关系，不能嵌套定义
* 方法返回值是void,方法中可以省略return 不写
       return 下面不能有代码
* 如果方法有明确的返回值类型，就必须有return语句返回。
* 方法在调用的时候，不用再传递数据类型
* 调用方法的时候,返回值是void, 不能写在输出语句中
* 不能重复定义(指的是方法名,参数列表都相同的不能在同一类中定义)
</code></pre><h3 id="5-方法的重载"><a href="#5-方法的重载" class="headerlink" title="5. 方法的重载"></a>5. 方法的重载</h3><pre><code>* 在同一个类中，方法名相同，参数列表不同。    
* 参数列表不同：
    * 个数不同
    * 类型不同
    * 顺序不同(算重载)
</code></pre><h3 id="6-方法重载注意事项"><a href="#6-方法重载注意事项" class="headerlink" title="6. 方法重载注意事项"></a>6. 方法重载注意事项</h3><pre><code>* 参数列表必须不同
* 重载和参数变量名无关
* 重载和返回值类型无关
* 重载和修饰符无关

* 技巧: 重载看方法名和参数列表
</code></pre><h3 id="7-方法参数"><a href="#7-方法参数" class="headerlink" title="7. 方法参数"></a>7. 方法参数</h3><pre><code>* 方法参数是基本数据类型时，传递的是值。
* 方法参数是引用数据类型时，传递的是内存地址值。
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[07.数组]]></title>
      <url>https://geekhoon.github.io/2017/01/11/07-%E6%95%B0%E7%BB%84/</url>
      <content type="html"><![CDATA[<h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><h3 id="1-数组概述"><a href="#1-数组概述" class="headerlink" title="1. 数组概述"></a>1. 数组概述</h3><pre><code>* 存储同一种数据类型的多个元素的容器。
* 特点:
    (1)元素数据类型必须一致。
    (2)长度固定
</code></pre><a id="more"></a>
<h3 id="2-数组的定义"><a href="#2-数组的定义" class="headerlink" title="2. 数组的定义"></a>2. 数组的定义</h3><pre><code>* 格式:
    数据类型[] 数组名 = new 数据类型[元素个数或数组长度];
    数据类型 数组名[]  = new 数据类型[元素个数或数组长度];//也对
    * 举例:
        int[] x = new int[100];
* 索引(index)      
    每个元素都有自己的自动编号,叫作索引(index), 下标, 角标
    数组的最小索引是0, 最大索引数组.length-1
* 初始化默认值
    byte,short,int,long 0
    float,double        0.0
    char                &apos;\u0000&apos;
    boolean             false
    引用类型             null
</code></pre><h3 id="3-数组初始化"><a href="#3-数组初始化" class="headerlink" title="3. 数组初始化"></a>3. 数组初始化</h3><pre><code>* 动态初始化 : 只给长度，系统给出默认值
        类型[] 数组名 = new 类型[长度];
        `int[] arr = new int[4];`
* 静态初始化 : 给出值，系统决定长度
        (1) 类型[] 数组名 = new 类型[]{元素1，元素2，……};
        `int[] arr = new int[]{1,2,3,4};`
        //new int[],这个中括号中不能有任何内容,不要指明数组长度
        可以改写成:
            数组的声明: int[] arr;
            数组的赋值: arr = new int[]{1,2,3,4};
        (2) 类型[] 数组名 = {元素1，元素2，元素3，……};     
        `int[] arr = { 1, 2, 3, 4 };`
        //这种形式不能改成声明+赋值分开写的形式
</code></pre><h3 id="4-JVM内存划分"><a href="#4-JVM内存划分" class="headerlink" title="4. JVM内存划分"></a>4. JVM内存划分</h3><pre><code>* JVM对自己的内存划分为5个区域
      * 寄存器:内存和CPU之间
      * 本地方法区: JVM调用了系统中的功能
      * 方法区(方法和数据共享区): 运行时期class文件进入的地方
      * 方法栈:所有的方法运行的时候进入内存,进入的就是栈内存
          * main方法,压栈运行,第一个进栈,在栈最底部,最后释放
          * 存储局部变量
      * 堆内存:存储的是容器和对象,存储所有new出来的

    注意：
        a:局部变量 在方法定义中或者方法声明上定义的变量。
        b:栈内存和堆内存的区别
            栈：数据使用完毕，就消失。
            堆：每一个new出来的东西都有地址
        数据使用完毕后，在垃圾回收器空闲的时候回收。
</code></pre><h3 id="5-数组的内存"><a href="#5-数组的内存" class="headerlink" title="5. 数组的内存"></a>5. 数组的内存</h3><pre><code>*   int[] x;                // 声明一个int[]类型的变量
*    x = new int[100];        // 创建一个长度为100的数组
*    arr引用类型,保存的不是数据,是内存的地址,通常是十六进制保存.每次分配的内存地址不一定一样
    *    [:一维数组
    *    I:数据类型 int
    *    @:分隔符
    *    60e218:十六进制地址
</code></pre><p>数组在创建过程中内存的分配情况:</p>
<p><img src="http://oj3s07yy0.bkt.clouddn.com/blog/20170112/081737153.bmp" alt=""></p>
<pre><code>1.程序运行时,.class文件进入方法区  
2.找到程序入口main方法,进入方法栈,main方法压栈运行
3.执行int[] arr = new int[3];在堆内存中,开辟一段连续空间,长度为3.
4.arr中保存开辟空间的首地址
</code></pre><h3 id="6-遍历数组"><a href="#6-遍历数组" class="headerlink" title="6. 遍历数组"></a>6. 遍历数组</h3><pre><code>* 依次访问数组中的每个元素
* 举例
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo04</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;; <span class="comment">// 定义数组</span></div><div class="line">		<span class="comment">// 使用for循环遍历数组的元素</span></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">			System.out.println(arr[i]); <span class="comment">// 通过索引访问元素</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="7-逆序-反转"><a href="#7-逆序-反转" class="headerlink" title="7. 逆序(反转)"></a>7. 逆序(反转)</h3><pre><code>方式1：
</code></pre><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">	public static void reverse(int[] arr) &#123;</div><div class="line">		for(int x=0; x&lt;arr.length/2; x++) &#123;</div><div class="line">			int temp = arr[x];</div><div class="line">			arr[x] = arr[arr.length-1-x];</div><div class="line">			arr[arr.length-1-x] = temp;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">```			</div><div class="line">		方式2：</div><div class="line">```java</div><div class="line">	public static void reverse(int[] arr) &#123;</div><div class="line">		for(int start=0,end=arr.length-1; start&lt;=end; start++,end--) &#123;</div><div class="line">			int temp = arr[start];</div><div class="line">			arr[start] = arr[end];</div><div class="line">			arr[end] = temp;</div><div class="line">		&#125;</div><div class="line">	&#125;	</div><div class="line">``` </div><div class="line">### 8. 数组中常见的异常 ###  </div><div class="line">	* 数组操作中,常见的两个异常</div><div class="line">    	 数组的索引越界异常(ArrayIndexOutOfBoundsException)</div><div class="line">	 	 空指针异常(NullPointerException)</div><div class="line"></div><div class="line">	* 练习</div><div class="line">```java</div><div class="line">	public class ArrayDemo_4&#123;</div><div class="line">		public static void main(String[] args)&#123;</div><div class="line"></div><div class="line">		//(1)数组的索引越界异常: 访问了数组中不存在的元素</div><div class="line">			//int[] arr = &#123;5,2,1&#125;;</div><div class="line">			//数组中3个元素,索引 0,1,2</div><div class="line">			//System.out.println(arr[3]);</div><div class="line">			//编译不报错,运行出错</div><div class="line">			//java.lang.ArrayIndexOutOfBoundsException: 3</div><div class="line">			</div><div class="line">		//(2)空指针异常</div><div class="line">			int[] arr2 = &#123;1,5,8&#125;;</div><div class="line">			System.out.println(arr2[2]);</div><div class="line">			arr2 = null; // arr2 不在保存数组的地址了</div><div class="line">			System.out.println(arr2[2]);</div><div class="line">			//编译不报错,运行出错</div><div class="line">			//java.lang.NullPointerException</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h3 id="9-数组获取最值代码实现"><a href="#9-数组获取最值代码实现" class="headerlink" title="9. 数组获取最值代码实现"></a>9. 数组获取最值代码实现</h3><pre><code>* 数组获取最值的原理思想
    * 定义数组的第一个元素arr[0]为最大值;循环arr数组,判断如果有比arr[0] 大的就交换,直到arr数组遍历完毕,那么arr[0]中就保存了最大的元素
    * 为什么选择数组中的一个元素作为最大值,因为如果自己定义的一个数据比数组所有数据都大,那比较完,得不出数组最大值
* 代码实现
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo05</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span>[] arr = &#123; <span class="number">4</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">8</span> &#125;; 	<span class="comment">// 定义一个数组</span></div><div class="line">		<span class="keyword">int</span> max = arr[<span class="number">0</span>]; 					<span class="comment">// 定义变量max用于记住最大数，首先假设第一个元素为最大值</span></div><div class="line">		<span class="comment">// 下面通过一个for循环遍历数组中的元素</span></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt; arr.length; x++) &#123;</div><div class="line">			<span class="keyword">if</span> (arr[x] &gt; max) &#123; 			<span class="comment">// 比较 arr[x]的值是否大于max</span></div><div class="line">				max = arr[x]; 				<span class="comment">// 条件成立，将arr[x]的值赋给max</span></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		System.out.println(<span class="string">"max="</span> + max); 	<span class="comment">// 打印最大值</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><h3 id="1-二维数组的定义"><a href="#1-二维数组的定义" class="headerlink" title="1. 二维数组的定义"></a>1. 二维数组的定义</h3><pre><code>* 作用
    * 要统计一个学校各个班级学生的考试成绩，又该如何实现呢？
    * 这时就需要用到多维数组，多维数组可以简单地理解为在数组中嵌套数组。
* 格式
    * 第一种定义格式:
        *  int[][] arr = new int[3][4];
        *  上面的代码相当于定义了一个3*4的二维数组，即二维数组的长度为3，二维数组中的每个元素又是一个长度为4的数组
    * 第二种定义格式
        *  int[][] arr = new int[3][];
        *  第二种方式和第一种类似，只是一维数组中每个元素的长度不确定
    * 第三种定义格式
        *      int[][] arr = {{1,2},{3,4,5,6},{7,8,9}};
        *      每个一维数组用大括号,不是小括号,别忽视了
        *      二维数组中定义了三个元素，这三个元素都是数组，分别为{1,2}、{3,4,5,6}、{7,8,9}
</code></pre><h3 id="2-二维数组元素的访问"><a href="#2-二维数组元素的访问" class="headerlink" title="2. 二维数组元素的访问"></a>2. 二维数组元素的访问</h3><pre><code>* 案例:
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo08</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">	</div><div class="line">		<span class="comment">//定义二维数组的方式</span></div><div class="line">		<span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][<span class="number">4</span>];</div><div class="line">		System.out.println( arr );</div><div class="line">		System.out.println(<span class="string">"二维数组的长度: "</span> + arr.length);</div><div class="line">		<span class="comment">//获取二维数组的3个元素</span></div><div class="line">		System.out.println( arr[<span class="number">0</span>] );</div><div class="line">		System.out.println( arr[<span class="number">1</span>] );</div><div class="line">		System.out.println( arr[<span class="number">2</span>] );</div><div class="line">		</div><div class="line">		System.out.println(<span class="string">"打印第一个一维数组的元素值"</span>);</div><div class="line">		System.out.println( arr[<span class="number">0</span>][<span class="number">0</span>] );</div><div class="line">		System.out.println( arr[<span class="number">0</span>][<span class="number">1</span>] );<span class="comment">//访问的为二维数组中第1个一维数组的第2个元素</span></div><div class="line">		System.out.println( arr[<span class="number">0</span>][<span class="number">2</span>] );</div><div class="line">		System.out.println( arr[<span class="number">0</span>][<span class="number">3</span>] );</div><div class="line">		</div><div class="line">		System.out.println(<span class="string">"打印第二个一维数组的元素值"</span>);</div><div class="line">		System.out.println( arr[<span class="number">1</span>][<span class="number">0</span>] );</div><div class="line">		System.out.println( arr[<span class="number">1</span>][<span class="number">1</span>] );</div><div class="line">		System.out.println( arr[<span class="number">1</span>][<span class="number">2</span>] );</div><div class="line">		System.out.println( arr[<span class="number">1</span>][<span class="number">3</span>] );</div><div class="line">		</div><div class="line">		System.out.println(<span class="string">"打印第三个一维数组的元素值"</span>);</div><div class="line">		System.out.println( arr[<span class="number">2</span>][<span class="number">0</span>] );</div><div class="line">		System.out.println( arr[<span class="number">2</span>][<span class="number">1</span>] );</div><div class="line">		System.out.println( arr[<span class="number">2</span>][<span class="number">2</span>] );</div><div class="line">		System.out.println( arr[<span class="number">2</span>][<span class="number">3</span>] );</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-二维数组内存图"><a href="#3-二维数组内存图" class="headerlink" title="3. 二维数组内存图"></a>3. 二维数组内存图</h3><pre><code>* 举例:int[][] arr = new int[3][2];
* 外层数组在内存开辟连续的3个大的内存空间,每一个内存空间都对应的有地址值
* 每一个大内存空间里又开辟连续的两个小的内存空间.
</code></pre><p><img src="http://oj3s07yy0.bkt.clouddn.com/blog/20170112/095418411.png" alt=""></p>
<h3 id="4-二维数组的定义和访问"><a href="#4-二维数组的定义和访问" class="headerlink" title="4. 二维数组的定义和访问"></a>4. 二维数组的定义和访问</h3><pre><code>* 定义
    * 格式1: 
      int[][] arr = new int[3][]; 不推荐
    * 格式2
      int[][] arr = {{1,2,4},{4,7},{0,9,3}};       
* 访问
      举例:int[][] arr = {{1,2,4},{5,8,7},{0,9,3}};  
     想要打印数组中7这个元素需要先找到大的元素索引{5,8,7} 索引为1 ,在找7在{5,8,7}中的索引2
     那么结果为 arr[1][2]  [1]代表大数组中{5,8,7}这个元素索引,[2]代表{5,8,7}中7元素的索引
</code></pre><h3 id="5-二维数组的遍历"><a href="#5-二维数组的遍历" class="headerlink" title="5. 二维数组的遍历"></a>5. 二维数组的遍历</h3><pre><code>* 二维数组遍历
   int[][] arr = {{1,2,4},{4,7},{0,9,3}};
     先使用for循环遍历arr这个二维数组,得到每一个元素为arr[i]为一维数组
   在外层for循环中嵌套一个for循环遍历每一个一维数组arr[i],得到每一元素

*    举例
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayArrayDemo_2</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		<span class="keyword">int</span>[][] arr = &#123; &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;,&#123;<span class="number">0</span>&#125; &#125;;</div><div class="line">		</div><div class="line">		<span class="comment">//外循环,遍历二维数组</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; arr.length ;i++)&#123;</div><div class="line">			<span class="comment">//内循环,遍历每个一维数组 arr[0] arr[1] arr[i]</span></div><div class="line">			<span class="comment">//注意内层for的条件是,j&lt; 每个一维数组的长度</span></div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; arr[i].length; j++)&#123;</div><div class="line">				System.out.print(arr[i][j]);</div><div class="line">			&#125;</div><div class="line">			System.out.println();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">```		</div><div class="line">	  * 累加求和</div><div class="line">```java</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo09</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">	  	<span class="keyword">int</span>[][] arr2 = &#123; &#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125; &#125;;</div><div class="line">		<span class="keyword">int</span> sum2 = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr2.length; i++) &#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;arr2[i].length; j++) &#123;</div><div class="line">                 <span class="comment">//System.out.println(arr2[i][j])</span></div><div class="line">				sum2 += arr2[i][j];</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		System.out.println(<span class="string">"sum2= "</span>+ sum2);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="6-二维数组的求和练习"><a href="#6-二维数组的求和练习" class="headerlink" title="6. 二维数组的求和练习"></a>6. 二维数组的求和练习</h3><pre><code>* 例如要统计一个公司三个销售小组中每个小组的总销售额以及整个公司的销售额。如下所示
   * 第一小组销售额为{11, 12}万元
   * 第二小组销售额为{21, 22, 23}万元
   * 第三小组销售额为{31, 32, 33, 34}万元。

* 代码实现
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo10</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][]; 			<span class="comment">// 定义一个长度为3的二维数组</span></div><div class="line">		arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">11</span>, <span class="number">12</span> &#125;; 			<span class="comment">// 为数组的元素赋值</span></div><div class="line">		arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span> &#125;;</div><div class="line">		arr[<span class="number">2</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span> &#125;;		</div><div class="line">		<span class="keyword">int</span> sum = <span class="number">0</span>; 							<span class="comment">// 定义变量记录总销售额</span></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123; <span class="comment">// 遍历数组元素</span></div><div class="line">			<span class="keyword">int</span> groupSum = <span class="number">0</span>; <span class="comment">// 定义变量记录小组销售总额</span></div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr[i].length; j++) &#123; <span class="comment">// 遍历小组内每个人的销售额</span></div><div class="line">				groupSum = groupSum + arr[i][j];</div><div class="line">			&#125;</div><div class="line">			sum = sum + groupSum; 			<span class="comment">// 累加小组销售额</span></div><div class="line">			System.out.println(<span class="string">"第"</span> + (i + <span class="number">1</span>) + <span class="string">"小组销售额为："</span> + groupSum + <span class="string">" 万元"</span>);</div><div class="line">		&#125;</div><div class="line">		System.out.println(<span class="string">"总销售额为: "</span> + sum + <span class="string">" 万元"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[06.流程控制语句]]></title>
      <url>https://geekhoon.github.io/2017/01/10/06-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</url>
      <content type="html"><![CDATA[<h2 id="一-选择结构if"><a href="#一-选择结构if" class="headerlink" title="一. 选择结构if"></a>一. 选择结构if</h2><h3 id="1-if语句"><a href="#1-if语句" class="headerlink" title="1. if语句"></a>1. if语句</h3><pre><code>* 书写格式
    if(比较表达式) {
        语句体;
    }
* 执行流程
    * 先计算比较表达式的值，看其返回值是true还是false。
    * 如果是true，就执行语句体；
    * 如果是false，就不执行语句体；
* 注意:如果写成这样:
    if(比较表达式); {
        语句体;
    }
    加上分号&quot;;&quot; ,则代表if语句已经结束,大括号内的内容不管if的比较表达式true或false都会执行
</code></pre><a id="more"></a>
<h3 id="2-if…else语句"><a href="#2-if…else语句" class="headerlink" title="2. if…else语句"></a>2. if…else语句</h3><pre><code>* 书写格式
    if(比较表达式) {
        语句体1;
    }else {
        语句体2;
    }
* 执行流程
    * 首先计算比较表达式的值，看其返回值是true还是false。
    * 如果是true，就执行语句体1；
    * 如果是false，就执行语句体2；
</code></pre><h3 id="3-if…else-if…else语句"><a href="#3-if…else-if…else语句" class="headerlink" title="3. if…else if…else语句"></a>3. if…else if…else语句</h3><pre><code>* 适合在程序中,实现多条件的判断
* 书写格式 
    if(比较表达式1) {
        语句体1;
    }else if(比较表达式2) {
        语句体2;
    }else if(比较表达式3) {
        语句体3;
    }
    ...
    else {
        语句体n+1;
    }
* 执行流程
    * 首先计算比较表达式1看其返回值是true还是false，
    * 如果是true，就执行语句体1，if语句结束。
    * 如果是false，接着计算比较表达式2看其返回值是true还是false，
    * 如果是true，就执行语句体2，if语句结束。
    * 如果是false，接着计算比较表达式3看其返回值是true还是false，
    * 如果都是false，就执行语句体n+1。
* 案例代码
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfElseIfDemo</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		<span class="comment">//成绩判断要求 ,成绩&gt;80  成绩&gt;70  成绩&gt;60  不及格</span></div><div class="line">		<span class="comment">//定义变量,保存成绩</span></div><div class="line">		<span class="keyword">int</span> grade = <span class="number">75</span>;</div><div class="line">		<span class="comment">//使用if else if 语句对成绩判断</span></div><div class="line">		<span class="keyword">if</span>( grade &gt; <span class="number">80</span> )&#123;</div><div class="line">			System.out.println(grade+<span class="string">" 成绩是优"</span>);</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span> ( grade &gt; <span class="number">70</span>)&#123;</div><div class="line">			System.out.println(grade+<span class="string">" 成绩是良"</span>);</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span> ( grade &gt; <span class="number">60</span>)&#123;</div><div class="line">			System.out.println(grade+<span class="string">" 成绩是中"</span>);</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			System.out.println(grade+<span class="string">" 成绩是差"</span>);</div><div class="line">		&#125;</div><div class="line">	 	</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>* 注意: 只要有1个if的条件是true,其他的代码,不再执行
</code></pre><h3 id="4-if语句和三元运算符的互换"><a href="#4-if语句和三元运算符的互换" class="headerlink" title="4. if语句和三元运算符的互换"></a>4. if语句和三元运算符的互换</h3><pre><code>* 使用if语句还是三元表达式
    * 判断条件多,使用if
     * 三元,必须有结果的, if 可以没有结果的
* 三元运算符可以转换为if,但if不一定能转换为三元
* 案例代码
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfElseDemo_1</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		<span class="keyword">int</span> i = <span class="number">15</span>;</div><div class="line">		<span class="keyword">int</span> j = <span class="number">6</span>;</div><div class="line">		<span class="comment">//使用if语句,判断出最大值</span></div><div class="line">		<span class="keyword">if</span>(i&gt;j)&#123;</div><div class="line">			System.out.println(i+<span class="string">" 是最大值"</span>);</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			System.out.println(j+<span class="string">" 是最大值"</span>);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="comment">//使用三元运算实现</span></div><div class="line">		<span class="keyword">int</span> k = i&gt;j ? i : j;</div><div class="line">		System.out.println(k+<span class="string">" 是最大值"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="二-循环结构"><a href="#二-循环结构" class="headerlink" title="二. 循环结构"></a>二. 循环结构</h2><h3 id="1-while循环"><a href="#1-while循环" class="headerlink" title="1. while循环"></a>1. while循环</h3><pre><code>* 使用格式
     初始化表达式；
     while(条件){
        循环体
     }
* 执行顺序     
    当条件是true,就执行循环体,执行完循环体后
    程序再次执行while中的条件,如果条件还是true,继续执行循环体
    直到条件是false的时候,循环就结束        
</code></pre><h3 id="2-for循环"><a href="#2-for循环" class="headerlink" title="2. for循环"></a>2. for循环</h3><pre><code>* 使用格式
    for(初始化表达式 ; 条件表达式 ; 循环后操作表达式){
            循环体;
    }

* 执行流程
    for（① ; ② ; ③）{
        ④
    }
    第一步，执行①,①终身只执行一次
    第二步，执行②，如果判断结果为true，执行第三步，如果判断结果为false，执行第五步
    第三步，执行④
    第四步，执行③，然后重复执行第二步
    第五步，退出循环

* for与while循环:
    1.for与while循环可以相互转换,但不建议转换
    2.for循环中的初始化表达式中变量的作用范围只在for语句中有效
    3.while初始化表达式是在while循环上边定义,作用范围大
</code></pre><h3 id="3-do-while循环"><a href="#3-do-while循环" class="headerlink" title="3. do_while循环"></a>3. do_while循环</h3><pre><code>* 使用格式
    do{
         循环体;
      }while(条件);//别丢了这个分号
* 执行顺序
    先执行一次循环体，然后再判断条件，如果条件为true，继续执行循环体，
    如果条件为false，循环结束。
* 特点
    无条件先执行一次
</code></pre><h3 id="4-死循环"><a href="#4-死循环" class="headerlink" title="4. 死循环"></a>4. 死循环</h3><pre><code>* 概述
    * 无限循环存在的原因是并不知道循环多少次，而是根据某些条件，来控制循环
* 格式
    * while(true){}
    * for(;;){}
    * for(;true;){}
* 注意:无限循环语句后面不允许再写代码,会编译失败.
    * 但不是没有机会执行,当程序满足一定条件(break),可以控制,让死循环停止,执行后面的代码
</code></pre><h3 id="5-嵌套for循环"><a href="#5-嵌套for循环" class="headerlink" title="5. 嵌套for循环"></a>5. 嵌套for循环</h3><pre><code>* 概述
    * 嵌套循环是指在一个循环语句的循环体中再定义一个循环语句的语法结构。
    * while、do…while、for循环语句都可以进行嵌套，并且它们之间也可以互相嵌套
* 嵌套循环的格式
    for(初始化表达式; 循环条件; 操作表达式) {
        ………
        for(初始化表达式; 循环条件; 操作表达式) {
            执行语句
            ………
        }
        ………
    }
* 执行顺序:
      1.外循环执行一次,
      2.内循环全部执行完,
      3.回到外循环,外循环继续执行一次
      4.内循环再全部执行完
      5.再回到外循环,重复1到5,直到外循环结束
* 各模块解释
    * 总的循环次数 =  内循环次数 * 外循环的次数
    * 内循环,是外循环的循环体

    * 外循环,控制的是行数
    * 内循环,控制的是每行的个数

* 案例
    *  打印正三角形
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForForDemo</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">9</span> ; i++)&#123;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i+<span class="number">1</span> ;j++)&#123;  <span class="comment">//++i</span></div><div class="line">				System.out.print(<span class="string">"* "</span>);</div><div class="line">			&#125;</div><div class="line">			System.out.println();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="6-break语句"><a href="#6-break语句" class="headerlink" title="6. break语句"></a>6. break语句</h3><pre><code>* 作用
    * 跳出当前所在的循环体
* 应用环境
    * 只能应用在循环语句和switch语句中
 * 注意
* 如果写在循环嵌套的内循环,结束的是内循环.除非在外循环前面加上循环标号,然后break 循环标号;
* 举例
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</div><div class="line">		<span class="keyword">if</span>(i&gt;<span class="number">5</span>) &#123;</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">	System.out.println(“我爱Java”+i);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//会从0-5输出6次“我爱Java”</span></div></pre></td></tr></table></figure>
<pre><code>* break详细解释
    * a: 作用
    * 在loop/switch选择或者循环过程中，我们总是满足布尔表达条件才能执行对应的代码，然而在这些逻辑过程中，
        可以使用一些关键字直接跳出正在执行的代码，去执行后边或者指定位置的代码，
        这些关键字一旦出现就可以跳转语句执行顺序。
    * b: 使用方式
        * 无法单独使用，必须将break关键字置于switch或循环语句中
    * c: 运行规律
        * 不需要判断任何条件，只要遇到break便直接跳出执行后续代码。会完全跳出选择或者循环结构
        * 只能跳出最近的代码块，不能跨越多级代码块

* 循环标号
    * a: 为什么使用循环标号
    * 当在双层循环或者循环内有switch选择语句时，我们发现
    使用break或者continue所作用的对象均是内层语句，无法直接跳出外层循环，这时就需要使用标号语句跳转了.
    * b: 使用方式
        * 在外层循环外的某行前边，使用后边跟有冒号”:”的标识符，即定义完毕。
          使用时当在内层循环使用break或continue时后边紧跟之前定义的标号即可
    * c: 运行规律
        * 当外层循环外定义了标号
          内层使用break，终止内外双层循环。
          内层使用continue，终止内层循环，继续外层循环。
</code></pre><h3 id="6-continue语句"><a href="#6-continue语句" class="headerlink" title="6. continue语句"></a>6. continue语句</h3><pre><code>* 作用
    * 提前结束本次循环，继续进行下次循环
* 应用环境
    * 无法单独使用，只能应用于循环中
* 运行规律
    * 不需要判断任何条件，只要遇到continue变直接跳出本轮循环进行下次循环
* 案例代码
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContinueDemo</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span> ; i++)&#123;</div><div class="line">			<span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			&#125;</div><div class="line">			System.out.println(i);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//会把0-9之间所有的奇数打印到控制台上</span></div></pre></td></tr></table></figure>
<h3 id="7-switch语句"><a href="#7-switch语句" class="headerlink" title="7. switch语句"></a>7. switch语句</h3><pre><code>* switch只能针对某个表达式的值作出判断，从而决定程序执行哪一段代码。    
* 格式:
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">swtich(表达式)&#123;</div><div class="line"> <span class="keyword">case</span> 常量<span class="number">1</span> :</div><div class="line">   要执行的语句;</div><div class="line"> <span class="keyword">break</span>;</div><div class="line"> </div><div class="line"> <span class="keyword">case</span> 常量<span class="number">2</span> :</div><div class="line">   要执行的语句;</div><div class="line"> <span class="keyword">break</span>;</div><div class="line"> </div><div class="line"> <span class="keyword">case</span> 常量<span class="number">3</span> :</div><div class="line">   要执行的语句;</div><div class="line"> <span class="keyword">break</span>;</div><div class="line"> </div><div class="line"> <span class="keyword">default</span>:</div><div class="line">   要执行的语句;</div><div class="line"> <span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>* 执行流程: 
   表达式和case后面的常量进行比较和哪个case后的常量相同,就执行哪个case后面的程序,
   遇到break,就全结束.若都不匹配,执行default 
* 关键字: switch case default break
* 特别注意:
    1. case后,必须是常量
    2. 常量后,有冒号
    3. 要执行的语句可以是多条语句,包括循环都可以写
</code></pre><h3 id="8-switch语句接收的数据类型"><a href="#8-switch语句接收的数据类型" class="headerlink" title="8. switch语句接收的数据类型"></a>8. switch语句接收的数据类型</h3><pre><code>* switch语句中的表达式的数据类型,是有要求的

        JDK1.0 - 1.4  数据类型接受 byte short int char
        JDK1.5   数据类型接受 byte short int char enum(枚举)
        JDK1.7   数据类型接受 byte short int char enum(枚举), String    
</code></pre><h3 id="9-case穿透"><a href="#9-case穿透" class="headerlink" title="9. case穿透"></a>9. case穿透</h3><pre><code>* case穿透
    * 在使用switch语句的过程中，如果多个case条件后面的执行语句是一样的，只需写一次。
* 举例:
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">	 <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwitchDemo</span></span>&#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">				<span class="keyword">int</span> week = <span class="number">2</span>;</div><div class="line">					<span class="keyword">switch</span>(week)&#123;</div><div class="line">						<span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">						<span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">						<span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">						<span class="keyword">case</span> <span class="number">4</span>:</div><div class="line">						<span class="keyword">case</span> <span class="number">5</span>:</div><div class="line">							System.out.println(<span class="string">"工作日"</span>);</div><div class="line">						<span class="keyword">break</span>; <span class="comment">//(1)</span></div><div class="line">						<span class="keyword">case</span> <span class="number">6</span>:</div><div class="line">						<span class="keyword">case</span> <span class="number">7</span>:</div><div class="line">							System.out.println(<span class="string">"休息日"</span>);</div><div class="line">						<span class="keyword">break</span>;</div><div class="line">					&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"><span class="comment">//因为week=2,从case 2开始穿透,直到碰到break或switch的右大括号,</span></div><div class="line"><span class="comment">//如果(1)处没有break,继续穿透</span></div><div class="line"><span class="comment">//穿透期间,不会再判断case后面的值,还会执行case中的执行语句,即使default在中间,只要没有break,就继续穿透</span></div><div class="line">	*<span class="keyword">int</span> x = <span class="number">2</span>;</div><div class="line">	 <span class="keyword">int</span> y = <span class="number">3</span>;</div><div class="line">	<span class="keyword">switch</span>(x)&#123;</div><div class="line">		<span class="keyword">default</span>:</div><div class="line">			y++;</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">			y++;</div><div class="line">		<span class="keyword">case</span> <span class="number">4</span>:</div><div class="line">			y++;</div><div class="line">		&#125;</div><div class="line">	System.out.println(<span class="string">"y="</span>+y);</div><div class="line"><span class="comment">//执行顺序: x=2先到case 3,不成立,到case 4,不成立,到了default,执行y++,break结束,输出y=4</span></div><div class="line"><span class="comment">//把default中的break删掉,执行顺序:case 3不成立,case 4不成立,default,执行y++,y=4了,穿透case3,执行y++,又穿透case 4,执行y++</span></div><div class="line"><span class="comment">//最后y=6</span></div></pre></td></tr></table></figure>
<pre><code>* 注意:
    1. default中一定要有break吗?
        //不一定,程序只要遇到break或者switch的右大括号,都结束
    2. 多个case后的常量可否相同?
        //不可以
    3. default一定要放在case之后吗?
        //不一定.不管放在哪,switch执行次序不变,都是从第一个case开始
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[05.引用数据类型]]></title>
      <url>https://geekhoon.github.io/2017/01/10/05-%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h3 id="1-创建引用类型变量公式"><a href="#1-创建引用类型变量公式" class="headerlink" title="1.创建引用类型变量公式"></a>1.创建引用类型变量公式</h3><pre><code>* 引用数据类型的定义格式:
    数据类型  变量名  =  new 数据类型();
* 引用数据类型的使用:
    * 每种引用数据类型都有其功能，我们可以调用该类型实例的功能。
    * 变量名.方法名();
</code></pre><a id="more"></a>
<h3 id="2-Scanner类的使用"><a href="#2-Scanner类的使用" class="headerlink" title="2.Scanner类的使用"></a>2.Scanner类的使用</h3><pre><code>* 作用: 在命令行中,接收键盘的输入
* 使用:
    (1) 导包   import java.util.Scanner;
    (2) 创建Scanner对象的变量 Scanner sc = new Scanner(System.in);
    (3) 读取键盘录入的一个整数
          int enterNumber = sc.nextInt();
    (4) 读取键盘录入的字符串,注意字符串不能有空格或tab
          String enterString = sc.next();
* 案例代码
</code></pre><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">import java.util.Scanner;//特别注意:后面有分号,别丢掉</div><div class="line">public class Demo05Scanner&#123;</div><div class="line">	public static void main(String[] args) </div><div class="line">	&#123;</div><div class="line">		Scanner sc = new Scanner(System.in);</div><div class="line"></div><div class="line">		int enterNumber = sc.nextInt();</div><div class="line">		System.out.println("用户输入的整数为"+enterNumber);</div><div class="line"></div><div class="line">		String enterString = sc.next();</div><div class="line">		System.out.println("用户输入的字符串为"+enterString);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">```			</div><div class="line">### 3.Random随机数类的使用 ###  </div><div class="line">	* 作用: 生成随机数</div><div class="line">	* 使用:</div><div class="line">        (1) import导包：所属包java.util. Random</div><div class="line">		(2) 创建Random对象的变量：Random  random = new Random ();</div><div class="line">		(3) 调用方法:</div><div class="line">			* nextInt(int maxValue)	产生[0,maxValue)范围的随机数,包含0不包含maxValue</div><div class="line">			* nextDouble()  //产生0.0-1.0之间的数(包括0.0不包括1.0)</div><div class="line">			如：</div><div class="line">```java</div><div class="line">Random  random = new Random ();</div><div class="line">int  myNumber = random.nextInt(100);//结果为0-99的一个数</div></pre></td></tr></table></figure>
<pre><code>* 随机数,也叫伪随机数,它是JVM根据人写好的算法,生成的
* 案例代码
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Random;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomDemo</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">	   Random ran = <span class="keyword">new</span> Random();</div><div class="line">	   <span class="comment">// Random类中的,产生随机数的功能</span></div><div class="line">	   <span class="keyword">int</span> i = ran.nextInt(<span class="number">100</span>);</div><div class="line">	   System.out.println(i);  </div><div class="line">	   <span class="comment">//问题? 产生随机数,范围 1-100之间</span></div><div class="line">	   <span class="comment">// nextInt(100) 0-99 + 1</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[基础题目答案]]></title>
      <url>https://geekhoon.github.io/2017/01/09/%E5%9F%BA%E7%A1%80%E9%A2%98%E7%9B%AE%E7%AD%94%E6%A1%88/</url>
      <content type="html"><![CDATA[<h3 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1.数据类型"></a>1.数据类型</h3><pre><code>1. JAVA语言中的字符char可以存储一个中文汉字吗?原因?
   *可以.因为Java中字符占两个字节.一个中文汉字也占两个字节
   *Java采用的是Unicode编码
</code></pre><a id="more"></a>         
<h3 id="2-运算符"><a href="#2-运算符" class="headerlink" title="2.运算符"></a>2.运算符</h3><pre><code>1. 请写出该输出语句的结果     

* hello98
   *因为括号的优先级,(&apos;a&apos;+1)中的&quot;+&quot;依然执行加法,所以字符型根据Ascii转成97,第一个&quot;+&quot;为连接
*若本题改成System.out.println(&quot;hello&quot;+&apos;a&apos;+1);
   *输出helloa1,两个+都是连接,有误区会输出hello&apos;a&apos;1,这是不对的,因为单引号只是证明a为字符型,输出还是要输出字符的值

 2. 请分别计算出a,b,c的值?  
      16  16  15

 3. 分析以下需求，并用代码实现：
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		<span class="keyword">int</span> num = <span class="number">123</span>;</div><div class="line">		<span class="keyword">int</span> ge = num % <span class="number">10</span>;</div><div class="line">		<span class="keyword">int</span> shi = num / <span class="number">10</span> % <span class="number">10</span>;</div><div class="line">		<span class="keyword">int</span> bai = num / <span class="number">100</span> % <span class="number">10</span>;</div><div class="line">		System.out.println(<span class="string">"数字"</span>+num+<span class="string">"的个位数是 "</span>+ge+<span class="string">",十位数是 "</span>+shi+<span class="string">",百位数是 "</span>+bai);		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-流程控制语句"><a href="#3-流程控制语句" class="headerlink" title="3.流程控制语句"></a>3.流程控制语句</h3><pre><code>1.(1)质数解法一:
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Prime</span></span>&#123;</div><div class="line"> 	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">	<span class="comment">//定义一个计数变量</span></div><div class="line">	<span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">	<span class="comment">//遍历1-100之间的整数</span></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">100</span>;i++)&#123;</div><div class="line">		<span class="comment">//分别让i % (2-----i-1),如果==0,就不是质数</span></div><div class="line">		<span class="keyword">int</span> j = <span class="number">2</span>;</div><div class="line">		<span class="keyword">for</span>( ;j &lt; i;j++)&#123;</div><div class="line">			<span class="keyword">if</span>(i % j == <span class="number">0</span>)&#123;</div><div class="line">    <span class="comment">//当%j == 0,立刻跳出循环,判断j的值,如果i==j的值,说明i是质数</span></div><div class="line">	<span class="comment">//如果不等,说明i % (比i小的数)== 0,则i不是质数</span></div><div class="line">				<span class="keyword">break</span>;</div><div class="line">	        &#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(i == j)&#123;</div><div class="line">			System.out.print(i+<span class="string">" "</span>);</div><div class="line">			count++;</div><div class="line">			<span class="keyword">if</span>(count % <span class="number">5</span> == <span class="number">0</span>)&#123;</div><div class="line">				System.out.println();	</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	System.out.println(<span class="string">"质数总数是: "</span>+count);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>1.(2)质数解法二:
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Prime</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		<span class="comment">//定义一个计数变量</span></div><div class="line">		<span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">		<span class="comment">//遍历2-100之间的整数,不从1遍历的原因是定义flag为true,默认都是质数,1不经过内层for,所以依然被认为是质数,所以要从2开始</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= <span class="number">100</span>;i++)&#123;</div><div class="line">			<span class="comment">//默认都是质数</span></div><div class="line">			<span class="comment">//思考?把boolean flag = true;放在for外边,会怎样?</span></div><div class="line">			<span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>;j &lt; i;j++)&#123;</div><div class="line">				<span class="keyword">if</span>(i % j == <span class="number">0</span>)&#123;</div><div class="line">			<span class="comment">//不满足质数条件,break </span></div><div class="line">			<span class="comment">//会有疑问?为什解法一在判断i==j,这里i==j,i % j==0,不就把质数整成false</span></div><div class="line">			<span class="comment">//其实,当j==i时,内层for条件已经不成立了,直接执行if(flag)了</span></div><div class="line">					flag = <span class="keyword">false</span>;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;	</div><div class="line">			&#125;</div><div class="line">			<span class="comment">//flag为true,就是质数</span></div><div class="line">			<span class="keyword">if</span>(flag)&#123;</div><div class="line">				System.out.print(i+<span class="string">" "</span>);</div><div class="line">				count++;</div><div class="line">				<span class="keyword">if</span>(count % <span class="number">5</span> == <span class="number">0</span>)&#123;</div><div class="line">					System.out.println();	</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">		&#125;</div><div class="line">		System.out.println(<span class="string">"质数总数是: "</span>+count);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>2. 珠峰
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZhuFeng</span></span>&#123;</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">			<span class="keyword">int</span> high = <span class="number">8848</span>;</div><div class="line">			<span class="keyword">double</span> hou = <span class="number">0.01</span>;</div><div class="line">			<span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">			<span class="keyword">while</span>(hou &lt; high)&#123;</div><div class="line">				hou *= <span class="number">2</span>;</div><div class="line">				count++;</div><div class="line">			&#125;</div><div class="line">			System.out.println(<span class="string">"折叠"</span>+count+<span class="string">"次"</span>);</div><div class="line">		&#125;	</div><div class="line">	&#125;</div><div class="line">``` </div><div class="line">	<span class="number">3</span>.  打印非<span class="number">9</span>	</div><div class="line">   		解法一:</div><div class="line">```java</div><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaYin9</span></span>&#123;</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">			<span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">100</span>;i++)&#123;</div><div class="line">				<span class="keyword">if</span>(i/<span class="number">10</span>==<span class="number">9</span> || i%<span class="number">10</span>==<span class="number">9</span>)&#123;</div><div class="line">					<span class="keyword">continue</span>;</div><div class="line">				&#125;</div><div class="line">		    	System.out.print(i+<span class="string">" "</span>);</div><div class="line">				count++;</div><div class="line">				<span class="keyword">if</span>(count % <span class="number">5</span>==<span class="number">0</span>)&#123;</div><div class="line">				System.out.println();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">```	     </div><div class="line">   		解法二:</div><div class="line">```java</div><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span></span>&#123;</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">			<span class="comment">// 1. 定义四个变量</span></div><div class="line">			<span class="keyword">int</span> ge, shi, bai, count=<span class="number">0</span>;</div><div class="line">			<span class="comment">// 2.获取数据1-100 for循环</span></div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> num=<span class="number">1</span>; num&lt;=<span class="number">100</span>; num++)&#123;</div><div class="line">			<span class="comment">// 3. 获取数据中的所有位数(个位、十位、百位)</span></div><div class="line">				ge = num % <span class="number">10</span>;</div><div class="line">				shi = num / <span class="number">10</span> % <span class="number">10</span>;</div><div class="line">				bai = num / <span class="number">100</span> % <span class="number">10</span>;</div><div class="line">			<span class="comment">// 判断每个位数上边的数字是否与7相等</span></div><div class="line">				<span class="keyword">if</span>(ge==<span class="number">7</span> || shi==<span class="number">7</span> || bai==<span class="number">7</span>)&#123;</div><div class="line">					<span class="keyword">continue</span>;</div><div class="line">				&#125;</div><div class="line">					count++;</div><div class="line">				System.out.print(num + <span class="string">" "</span>);</div><div class="line">				<span class="keyword">if</span>(count % <span class="number">5</span> == <span class="number">0</span>)&#123;</div><div class="line">					System.out.println();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<pre><code>4. 九九乘法表
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JiuJiu</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">9</span>;i++)&#123;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= i;j++)&#123;</div><div class="line">				<span class="keyword">int</span> ji = j * j;</div><div class="line">				System.out.print(j+<span class="string">"*"</span>+j+<span class="string">"="</span>+ji+<span class="string">"  "</span>);</div><div class="line">			&#125;</div><div class="line">			System.out.println();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-数组"><a href="#4-数组" class="headerlink" title="4.数组"></a>4.数组</h3><pre><code>1. 
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Change</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		<span class="keyword">int</span>[] arr = &#123;<span class="number">6</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">15</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">20</span>,<span class="number">7</span>,<span class="number">18</span>&#125;;</div><div class="line">	<span class="comment">//本题的关键是找到最大,最小元素的索引位置,而不是找到最大最小值,只要知道位置了,就可以进行交换了</span></div><div class="line">		<span class="comment">//定义max,min,记录最大元素和最小元素的索引位置</span></div><div class="line">		<span class="keyword">int</span> max = <span class="number">0</span>,min = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length;i++)&#123;</div><div class="line">			<span class="keyword">if</span>(arr[max] &lt; arr[i])&#123;</div><div class="line">				max = i;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>(arr[min] &gt; arr[i])&#123;</div><div class="line">				min = i;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;arr.length;i++)&#123;</div><div class="line">			System.out.print(arr[i]+<span class="string">" "</span>);</div><div class="line">		&#125;</div><div class="line">		System.out.println();</div><div class="line">		<span class="comment">//通过arr[max]和arr[min]可以取到了最大,最小值,定义一个第三方变量,用于交换</span></div><div class="line">		<span class="keyword">int</span> temp = arr[max];</div><div class="line">		arr[max] = arr[arr.length-<span class="number">1</span>];</div><div class="line">		arr[arr.length-<span class="number">1</span>] = temp;</div><div class="line">		<span class="comment">//</span></div><div class="line">		temp = arr[min];</div><div class="line">		arr[min] = arr[<span class="number">0</span>];</div><div class="line">		arr[<span class="number">0</span>] = temp;</div><div class="line">		<span class="comment">//</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;arr.length;i++)&#123;</div><div class="line">			System.out.print(arr[i]+<span class="string">" "</span>);</div><div class="line">		&#125;	</div><div class="line">	&#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>2. 
</code></pre><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">	import java.util.Scanner;</div><div class="line">	public class Test01&#123;</div><div class="line">		public static void main(String[] args)&#123;</div><div class="line">		//1.利用一个for循环,录入用户输入的6个数据,置于数组中</div><div class="line">			Scanner sc = new Scanner(System.in);</div><div class="line">			int[] arr = new int[6];</div><div class="line">			for(int i = 0;i &lt; 6;i++)&#123;</div><div class="line">				System.out.println("请输入第"+(i+1)+"个整数:");</div><div class="line">				arr[i] = sc.nextInt() ;</div><div class="line">			&#125;</div><div class="line">		//2.实现反转</div><div class="line">			for(int start = 0,end = arr.length-1;start &lt; end;start++,end--)&#123;</div><div class="line">				int temp = arr[start];</div><div class="line">				arr[start] = arr[end];</div><div class="line">				arr[end] = temp;</div><div class="line">			&#125;</div><div class="line">		//3.将翻转后的数组角标为奇数的互相交换 1和3换, 3和5换,以此类推</div><div class="line">			for(int i = 1,j =3;i &lt; arr.length &amp;&amp; j &lt; arr.length;i+=2,j+=2)&#123;</div><div class="line">				int temp = arr[i];</div><div class="line">				arr[i] = arr[j];</div><div class="line">				arr[j] = temp;</div><div class="line">			&#125;</div><div class="line">		//4.最后将数组最后一个角标为奇数的元素 和数组中第一个角标为奇数的元素交换</div><div class="line">		//判断最后一个角标为奇数,需要先知道数组长度,根据数组长度的奇偶性,最后一个角标为奇数的索引不同</div><div class="line">			int lastIndex = (arr.length % 2 == 0 ? arr.length-1 : arr.length-2);</div><div class="line">			int temp = arr[1];</div><div class="line">			arr[1] = arr[lastIndex];</div><div class="line">			arr[lastIndex] = temp;</div><div class="line">		//</div><div class="line">			for(int i = 0;i &lt; arr.length;i++ )&#123;</div><div class="line">				System.out.print(arr[i]+" ");</div><div class="line">			&#125;</div><div class="line">			System.out.println();	</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">```	</div><div class="line"></div><div class="line">### 5.ASCII编码及char类型的存储###</div><div class="line">```java</div><div class="line">//法一:</div><div class="line">	char i,j;</div><div class="line">	for (i = 65; i &lt;= 90; i++) &#123;</div><div class="line">		j = (char) (i + 32);</div><div class="line">		System.out.print("大写: "+i+" 小写: "+j);</div><div class="line">		System.out.println();</div><div class="line">	&#125;</div><div class="line">//法二:</div><div class="line">char daXie = 'A';</div><div class="line">	char xiaoXie = 'a';</div><div class="line">	for (int i = 0; i &lt; 26; i++) &#123;</div><div class="line">		System.out.println("大写: "+daXie+" 小写: "+xiaoXie);</div><div class="line">		daXie++;</div><div class="line">		xiaoXie++;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h3 id="6-面向对象"><a href="#6-面向对象" class="headerlink" title="6.面向对象"></a>6.面向对象</h3><pre><code>1.
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line">	<span class="comment">//私有空参构造方法</span></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Student</span><span class="params">()</span></span>&#123;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//设置静态Student类型共享变量 stu</span></div><div class="line">	<span class="comment">//能用static的原因是此时并没有创建对象,只是定义一个Student类型的成员变量</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Student stu;    </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Student <span class="title">getStudent</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="comment">//第一次调用该方法,stu为引用变量,存的默认值null</span></div><div class="line">		<span class="keyword">if</span> (stu == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Student();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> stu;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//测试类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </div><div class="line">		<span class="comment">//静态方法,直接用类名.调用   </span></div><div class="line">		Student stu = Student.getStudent();</div><div class="line">		System.out.println(stu);</div><div class="line">		System.out.println(stu);</div><div class="line">		System.out.println(stu);</div><div class="line">		System.out.println(stu);</div><div class="line">		System.out.println(stu);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//打印的地址值一模一样,说明Student对象只被new了一次</span></div></pre></td></tr></table></figure>
<pre><code>2.
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Phone类</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//接口</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IGame</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//NewPhone</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewPhone</span> <span class="keyword">extends</span> <span class="title">Phone</span> <span class="keyword">implements</span> <span class="title">IGame</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"打游戏"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> </span>&#123;</div><div class="line">	&#125;			</div><div class="line">&#125;</div><div class="line"><span class="comment">//OldPhone</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OldPhone</span> <span class="keyword">extends</span> <span class="title">Phone</span></span>&#123;	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> </span>&#123;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//Test</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">//采用匿名内部类, 其实创建的是NewPhone的子类</span></div><div class="line">		<span class="comment">//NewPhone的子类直接调用NewPhone的playGame()	</span></div><div class="line">		<span class="keyword">new</span> NewPhone()&#123;</div><div class="line"></div><div class="line">		&#125;.playGame();</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>3.
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="comment">//局部变量i , 生命周期是随着方法弹栈而消亡</span></div><div class="line">		<span class="comment">//function弹栈后, Inner类并没有被回收</span></div><div class="line">		<span class="comment">//要想访问i,需要将i设为常量,进入常量池中,局部内部类就可以访问到</span></div><div class="line">		fianl <span class="keyword">int</span> i = <span class="number">10</span>;</div><div class="line">		<span class="comment">//局部内部类在方法内</span></div><div class="line">		<span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</div><div class="line">			<span class="keyword">int</span> j = i;  <span class="comment">//不加final,会报错</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</div><div class="line">				syso(j);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//创建内部类对象,调用method方法</span></div><div class="line">		<span class="comment">//如果不创建,没法执行method方法</span></div><div class="line">		<span class="keyword">new</span> Inner().method();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//测试类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;    </div><div class="line">		Outer o = <span class="keyword">new</span> Outer();</div><div class="line">		o.function();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>4.
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">	<span class="comment">//私有成员内部类</span></div><div class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Heart</span></span>&#123;</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">h</span><span class="params">()</span></span>&#123;</div><div class="line">			System.out.println(<span class="string">"私有成员内部类"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//为私有成员内部类创建public方法</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Heart <span class="title">getHeart</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Heart();</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getHeartMethod</span><span class="params">(Heart h)</span></span>&#123;</div><div class="line">		h.h();</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//静态成员内部类</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Shen</span></span>&#123;</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">s</span><span class="params">()</span></span>&#123;</div><div class="line">			System.out.println(<span class="string">"静态成员内部类"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//默认成员内部类</span></div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Fei</span></span>&#123;</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;</div><div class="line">			System.out.println(<span class="string">"默认成员内部类"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//局部内部类</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="class"><span class="keyword">class</span> <span class="title">Gan</span></span>&#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span></span>&#123;</div><div class="line">				System.out.println(<span class="string">"局部内部类"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">new</span> Gan().g();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//测试类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">//调用默认成员内部类</span></div><div class="line">		Person.Fei f = <span class="keyword">new</span> Person().new Fei();</div><div class="line">		f.f();</div><div class="line">		<span class="comment">//调用静态成员内部类</span></div><div class="line">		<span class="keyword">new</span> Person.Shen().s();</div><div class="line">		<span class="comment">//调用私有成员内部类</span></div><div class="line">		<span class="keyword">new</span> Person().getHeartMethod(<span class="keyword">new</span> Person().getHeart());</div><div class="line">		<span class="comment">//调用局部内部类</span></div><div class="line">		<span class="keyword">new</span> Person().method();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//结果:</span></div><div class="line"><span class="comment">//默认成员内部类</span></div><div class="line"><span class="comment">//静态成员内部类</span></div><div class="line"><span class="comment">//私有成员内部类</span></div><div class="line"><span class="comment">//局部内部类</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[基础题目]]></title>
      <url>https://geekhoon.github.io/2017/01/09/%E5%9F%BA%E7%A1%80%E9%A2%98%E7%9B%AE/</url>
      <content type="html"><![CDATA[<h3 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1.数据类型"></a>1.数据类型</h3><pre><code>1. JAVA语言中的字符char可以存储一个中文汉字吗?原因?
</code></pre><a id="more"></a>       
<h3 id="2-运算符"><a href="#2-运算符" class="headerlink" title="2.运算符"></a>2.运算符</h3><pre><code>1. 请写出该输出语句的结果

System.out.println(&quot;hello&quot;+(&apos;a&apos;+1));

2. 请分别计算出a,b,c的值? 
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a = <span class="number">15</span>;</div><div class="line"><span class="keyword">int</span> b = <span class="number">15</span>;</div><div class="line"><span class="keyword">int</span> c = <span class="number">15</span>;</div><div class="line"></div><div class="line">a = ++b;		</div><div class="line">c = a--;			</div><div class="line">b = ++a;		</div><div class="line">a = c--;</div></pre></td></tr></table></figure>
<pre><code>3. 分析以下需求，并用代码实现：  
    (1)已知一个三位数，请分别获取该三位数上每一位的数值
    (2)例如：123的个位、十位、百位，分别是3、2、1
    (3)打印格式&quot;数字123的个位是 3, 十位是 2, 百位是 1&quot;
</code></pre><h3 id="3-流程控制语句"><a href="#3-流程控制语句" class="headerlink" title="3.流程控制语句"></a>3.流程控制语句</h3><pre><code>1. 计算1-100之间的质数有多少个？将质数以及质数总数打印在控制台。每5个数换行

2. 我国最高山峰是珠穆朗玛峰，8848米。现在我有一张足够大的纸，它的厚度是0.01米。请问，我折叠多少次，可以折成珠穆朗玛峰的高度。

3. 分析以下需求，并用代码实现：
    打印1到100之内的整数，但数字中包含9的要跳过
    每行输出5个满足条件的数，之间用空格分隔。如：1 2 3 4 5 

4. 利用嵌套循环，在控制台打印九九乘法表
</code></pre><h3 id="4-数组"><a href="#4-数组" class="headerlink" title="4.数组"></a>4.数组</h3><pre><code>1. 分析以下需求，并用代码实现：
    (1)定义一个int类型的一维数组，内容为{6,2,9,15,1,5,20,7,18}
    (2)将数组最大元素与最后一位元素进行交换,最小元素与第一位元素进行交换，并打印数组

2. 分析以下需求，并用代码实现：
    (1)键盘录入6个int类型的数据存数数组arr中
    (2)将arr数组中的内容反转(逆序)
    (3)将翻转后的数组角标为奇数的互相交换 1和3换, 3和5换,以此类推
    (4)最后将数组最后一个角标为奇数的元素 和数组中第一个角标为奇数的元素交换
    (5)打印最终的数组(实现了1-4步之后的数组)
    (6)如：用户输入的6个int数字为[1,2,3,4,5,6],最后输出的结果为[6, 5, 4, 1, 2, 3]
</code></pre><h3 id="5-ASCII编码及char类型的存储"><a href="#5-ASCII编码及char类型的存储" class="headerlink" title="5.ASCII编码及char类型的存储"></a>5.ASCII编码及char类型的存储</h3><ul>
<li><p>American Standard Code for Information Interchange，美国标准信息交换代码<br>   ASCII编码，统一规定了常用符号用哪些二进制数来表示。</p>
<pre><code>数字0-9对应ASCII编码十进制为48-57
字母A-Z对应ASCII编码十进制为65-90
字母a-z对应ASCII编码十进制为97-122
</code></pre></li>
<li><p>取值范围</p>
<pre><code>* short:占两个字节,是有符号数据,取值范围-32768-32767
* char: 占两个字节,是无符号数据,取值范围0-65535
</code></pre></li>
<li>题目:<br>  输出所有英文字母<h3 id="6-面向对象"><a href="#6-面向对象" class="headerlink" title="6.面向对象"></a>6.面向对象</h3><ol>
<li>Student类中有一个私有化空参构造方法, 写一个方法来new一个Student对象,且只能被创建一次</li>
<li>请编写一个抽象类Phone,两个抽象方法,call()  sendMessage()<br>   两个子类OldPhone 和 NewPhone , 其中NewPhone想添加一个玩游戏的功能.<br>   请根据接口的思想实现,并用匿名内部类的方式调用玩游戏的功能.</li>
<li>局部内部类访问局部变量, 该局部变量必须使用哪个关键子修饰,为什么</li>
<li>内部类完整测试,包括各种内部类类型,及使用public,默认类型,private,访问内部类方式</li>
</ol>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[常用快捷键]]></title>
      <url>https://geekhoon.github.io/2017/01/09/%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      <content type="html"><![CDATA[<h3 id="1-Dos"><a href="#1-Dos" class="headerlink" title="1.Dos"></a>1.Dos</h3><pre><code>* Shift + 右键    : 当前文件夹下打开dos
* Tab             : 注意dos下,&quot;Tab键&quot;的使用,可方便输入
* 标记 + 右键/回车 : dos下复制
* &quot;↑&quot;和&quot;↓&quot;        : dos未关闭前提下,使用之前的命令
* 复制路径后,dos下右键,可以粘贴
* Ctrl + c        :强行停止命令行
</code></pre><a id="more"></a>
<h3 id="2-notepad"><a href="#2-notepad" class="headerlink" title="2.notepad++"></a>2.notepad++</h3><pre><code>* Ctrl + D           : 复制该行
* Ctrl + Shift + ↑/↓ :移动该行
* Ctrl + L           : 删除该行
* shift + Tab        :选中部分整体左移
* tab                 :选中部分整体右移
* Ctrl + Q           : 注释/取消 单行注释
</code></pre><h3 id="3-xmind"><a href="#3-xmind" class="headerlink" title="3.xmind"></a>3.xmind</h3><pre><code>* Tab : 新建分支
*  F4 : 添加备注
</code></pre><h3 id="4-eclipse"><a href="#4-eclipse" class="headerlink" title="4.eclipse"></a>4.eclipse</h3><pre><code>* Ctrl + /          :单行注释
* Ctrl + Shift + /  :多行注释
* Ctrl + Shift + \  :取消多行注释
* Alt  + /            :自动补全
* Ctrl + 1            :快速修复
* Ctrl + D            :删掉当前行
* Ctrl+Alt+↓        :复制当前行到下一行(复制增加)
* Ctrl+Alt+↑         :复制当前行到上一行(复制增加)
* Alt+↓             :当前行和下面一行交互位置(特别实用,可以省去先剪切,再粘贴了)
* Alt+↑             :当前行和上面一行交互位置(同上)
* Ctrl+T            :快速显示当前类的继承结构
* Ctrl+Shift+F        :格式化当前代码
* Ctrl+点击 / F3        :查看源码
* Ctrl+Shift+S        :生成构造方法,get/set
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[04.运算符]]></title>
      <url>https://geekhoon.github.io/2017/01/08/04-%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      <content type="html"><![CDATA[<h3 id="1-算数运算符"><a href="#1-算数运算符" class="headerlink" title="1.算数运算符"></a>1.算数运算符</h3><pre><code>* 注意事项
    1.&quot;+&quot;在连接字符串时要注意，只有直接与字符串相加才会转成字符串.
        字符串后面的&quot;+&quot;为&quot;连接&quot;,字符串前面的&quot;+&quot;还是加法
        如:
            System.out.println(5+5+&quot;=&quot;+5+5);这个输出的是10=55
    2.&quot;/&quot;除法运算符,整数与整数除,结果为整数;整数与小数除,结果是小数类型
    3.&quot;%&quot;取模,取余运算符
              -5  % 5 = 0;
              -10 % 5 = 0;
              -7  % 5 = -2;
               10 % 5 = 0;
               2  % 5 = 2;
              -2  % 5 = -2;
        结论:
        (1)正负符号位取得是左边,与右边无关
        (2)如果左边的绝对值是右边绝对值的整数倍,结果为0
        (3)如果左边的绝对值大于右边的绝对值,结果为余数(正常取余就行,注意正负号)
        (4)如果左边的绝对值小于右边的绝对值,结果为左边
        (5)任何一个整数%2,结果不是0就是1,可以用来当作切换条件

* ++和--放前放后区别:
    *符号放前放后,在变量自己独立计算时,没有区别
    *在与其他运算符同时计算时会有区别             
     如：
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">int</span>  i = <span class="number">5</span>;</div><div class="line">   <span class="keyword">int</span>  j = i++;</div><div class="line">   System.out.println(i);</div><div class="line">   System.out.println(j);</div><div class="line"><span class="comment">//结果为i=6,j=5.</span></div><div class="line"><span class="comment">//因为int  j = i++;相当于(1)int j = i;(2)i++;</span></div></pre></td></tr></table></figure>
<pre><code>如：
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">int</span>  m = <span class="number">5</span>;</div><div class="line">    <span class="keyword">int</span>  n = ++m;</div><div class="line">    System.out.println(m);</div><div class="line">    System.out.println(n);</div><div class="line">	<span class="comment">//结果为m=6,n=6.</span></div><div class="line">	<span class="comment">//因为int  n = ++m;相当于(1)++m;(2)int n = m;</span></div><div class="line">```       </div><div class="line">         如：</div><div class="line">```java</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"> 			<span class="keyword">int</span> x = <span class="number">4</span>;</div><div class="line"> 			<span class="keyword">int</span> y = (--x)+(x--)+(x*<span class="number">10</span>);</div><div class="line"> 			System.out.println(<span class="string">"x = "</span> + x + <span class="string">",y = "</span> + y);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<pre><code>思维误区:不要以为(--x)+(x--)+(x*10),都有各自括号,就互不影响
执行完(--x),x为3,再执行(x--)后,x为2,(x*10)为20,所以输出x为2,但是y=3+3+20=26,第二个3是因为先赋值,再自减
如：
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		<span class="keyword">int</span> a = <span class="number">1</span>;</div><div class="line">		<span class="keyword">if</span>(a++ &gt; <span class="number">1</span>)&#123;</div><div class="line">			System.out.println(<span class="string">"用2在判断"</span>);</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			System.out.println(<span class="string">"用1在判断"</span>);</div><div class="line">		&#125;</div><div class="line">		System.out.println(<span class="string">"a="</span>+a);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>本题证明了(a++ &gt; 1)是用a=1与1做大小判断,而不是2,说明a先比较,再自增.但最终输出a的大小都是2
</code></pre><a id="more"></a>
<h3 id="2-赋值运算符"><a href="#2-赋值运算符" class="headerlink" title="2.赋值运算符"></a>2.赋值运算符</h3><pre><code>* 有 =  +=  -=  *=  /=  %=  
* 注意:
     如：
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">byte</span>  b = <span class="number">1</span>;               <span class="comment">//(1)</span></div><div class="line">b = b + <span class="number">1</span>;                 <span class="comment">//(2)</span></div><div class="line">System.out.println(b);     <span class="comment">//(3)</span></div></pre></td></tr></table></figure>
<pre><code>编译会报错,因为(1)中b为byte型,占1个字节,(2)中1为int类型,占4个字节,它们相加之后,是4字节.然后赋值给1字节大小的b,会损失精度.
将(2)改成b =(byte) (b + 1);或者b += 1;都对.这两句等价
</code></pre><h3 id="3-比较运算符"><a href="#3-比较运算符" class="headerlink" title="3.比较运算符"></a>3.比较运算符</h3><pre><code>* 也叫关系运算符
* 有 ==  !=  &gt;  &lt;  &gt;=  &lt;=  
* 注意:
     如：
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>  i = <span class="number">3</span>;</div><div class="line"><span class="keyword">int</span>  j = <span class="number">4</span>;</div><div class="line">System.out.println(i=j);</div><div class="line">System.out.println(i==j);</div></pre></td></tr></table></figure>
<pre><code>结果分别为4和true,因为程序自上而下执行,第一句输出语句执行完之后,i变为4.别忽视了输出语句中,赋值语句对变量在整个作用区间内也起作用.
</code></pre><h3 id="4-逻辑运算符"><a href="#4-逻辑运算符" class="headerlink" title="4.逻辑运算符"></a>4.逻辑运算符</h3><pre><code>* 对两个布尔数据进行计算,结果也是布尔类型
* 有 &amp;与  |或  !非  ^异或  &amp;&amp;短路与  ||短路或
    *^异或: 两边相同为false,不同为true
     如：
                true^flase 为    true 
                true^true  为   false
    *&amp;&amp;短路与: 左边结果为false,右边不执行
     如：
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>  i = <span class="number">3</span>;</div><div class="line"><span class="keyword">int</span>  j = <span class="number">4</span>;</div><div class="line">System.out.println(i == j &amp;&amp; ++i &gt; <span class="number">3</span>);</div><div class="line">System.out.println(i);</div><div class="line">System.out.println(j);</div></pre></td></tr></table></figure>
<pre><code>                结果为3和4.   i == j 为flase, 所以++i &gt; 3并没有执行
    *||短路或: 左边结果为true,右边不执行
* 短路与 和 短路或 可以提高程序运行效率
</code></pre><h3 id="5-三元-目-运算符"><a href="#5-三元-目-运算符" class="headerlink" title="5.三元(目)运算符"></a>5.三元(目)运算符</h3><pre><code>* 公式:    布尔表达式 ? 结果1 : 结果2
*注意:这里的结果1和2,不能是输出语句,必须是确定的结果
</code></pre><h3 id="6-运算符优先级"><a href="#6-运算符优先级" class="headerlink" title="6.运算符优先级"></a>6.运算符优先级</h3><pre><code>优先级    描述          运算符
1    括号           ()、[]
2    正负号           +、-
3    自增自减，非     ++、--、!
4    乘除，取余      *、/、%
5    加减            +、-
6    移位运算       &lt;&lt;、&gt;&gt;、&gt;&gt;&gt;
7    大小关系       &gt;、&gt;=、&lt;、&lt;=
8    相等关系       ==、!=
9    按位与            &amp;
10    按位异或       ^
11    按位或            |
12    逻辑与            &amp;&amp;
13    逻辑或            ||
14    条件运算        ?:
15    赋值运算        =、+=、-=、*=、/=、%=
16    位赋值运算       &amp;=、|=、&lt;&lt;=、&gt;&gt;=、&gt;&gt;&gt;=
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[03.数据]]></title>
      <url>https://geekhoon.github.io/2017/01/08/03-%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<h2 id="一-数据"><a href="#一-数据" class="headerlink" title="一.数据"></a>一.数据</h2><h3 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1.数据类型"></a>1.数据类型</h3><pre><code>* 程序=数据+逻辑
* 数据类型包括 
    * 1.基本数据类型:整数、小数、字符、布尔 
    * 2.引用数据类型:数组、类、接口
</code></pre><h3 id="2-常量"><a href="#2-常量" class="headerlink" title="2.常量"></a>2.常量</h3><pre><code>* 程序在运行过程中,其值不会发生变化的量
* 整数类型 
    * 十进制
    * 二进制:以0b(0B)开头,只有0和1  
    * 十六进制:以0x(0X)开头,0-9和A-F,F表示15 
    * 八进制:以0开头,最大数为7
* 小数类型(浮点类型)
* 布尔类型:true和flase为关键字
* 字符类型:单引号中仅能包含一个字符,不能不写字符,可以用一个空格
* 字符串类型:可以写0-n个字符  
</code></pre><a id="more"></a>
<h2 id="二-变量"><a href="#二-变量" class="headerlink" title="二.变量"></a>二.变量</h2><h3 id="1-变量概述"><a href="#1-变量概述" class="headerlink" title="1.变量概述"></a>1.变量概述</h3><pre><code>* 什么是变量?
    * 变量是内存中装载数据的小盒子，你只能用它来存数据和取数据
    * 在程序运行过程中,其值可以发生改变的量
</code></pre><h3 id="2-计算机存储单元"><a href="#2-计算机存储单元" class="headerlink" title="2.计算机存储单元"></a>2.计算机存储单元</h3><pre><code>* 计算机中最小信息单元是?
    * 位(bit),也叫比特位.用b表示
    * 8个位,表示一个数据
* 计算机中储存和运算的最小单位是?
    * 一个字节,也就是一个byte.用B表示            
    * 常用储存单位
        *1B（字节） = 8bit
        *1KB = 1024B
        *1MB = 1024KB
        *1GB = 1024MB
        *1TB = 1024GB
        *1PB = 1024TB
</code></pre><h3 id="3-Java中数据类型四类八种"><a href="#3-Java中数据类型四类八种" class="headerlink" title="3.Java中数据类型四类八种"></a>3.Java中数据类型四类八种</h3><pre><code>* 数据类型四类八种
    * 四类    八种    字节数    数据表示范围
    * 整型    byte    1    -128～127
            short     2    
             int     4    
             long     8    
    * 浮点型    float    4    
              double   8    
    * 字符型    char    2    表示一个字符，如(&apos;a&apos;，&apos;A&apos;，&apos;0&apos;，&apos;家&apos;)
    * 布尔型    boolean    1    只有两个值true与false,默认是false
</code></pre><h3 id="4-常量和数据类型"><a href="#4-常量和数据类型" class="headerlink" title="4.常量和数据类型"></a>4.常量和数据类型</h3><pre><code>* 常量
    * 常量是程序在运行过程中,其值不会发生改变的量
    * 整型常量默认是int类型.
    * 定义长整型数据如果值超过int取值范围后面要+&quot;L&quot;,凡添加了&quot;L&quot;,都是long类型
    * 浮点常量默认是double类型,没有后缀或以&quot;D&quot;为后缀,都是double型
    * 定义float类型的数据后面要+&quot;F&quot; 否则默认是double
* 写法:
    * long l = 1000; 对
    * long l = 12345678901; 错
    * long l = 12345678901L; 对 
    * float f = 1.0; 错
    * float f = 1.0F; 对
    * float f = 10; 对
</code></pre><h3 id="5-定义变量"><a href="#5-定义变量" class="headerlink" title="5.定义变量"></a>5.定义变量</h3><pre><code>* 语法格式：
    数据类型  变量名  =  变量值;
     int        a    =  100;        
* 代码:
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Variable</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> a = <span class="number">10</span>;</div><div class="line">		<span class="keyword">double</span> b = <span class="number">3.14</span>;</div><div class="line">		<span class="keyword">char</span> c = <span class="string">'z'</span>;</div><div class="line">		String s = <span class="string">"i love java"</span>;</div><div class="line">		System.out.println(a);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">```	</div><div class="line">    * 注意:</div><div class="line">        a.字符串String属于引用类型(类),不属于基本类型,</div><div class="line">        b.变量定义后,不赋值,能编译通过,但运行时会报错.不赋值不能使用。</div><div class="line">        c.变量使用时有作用域的限制。(所在的大括号范围内)</div><div class="line">		如：</div><div class="line">		(<span class="number">1</span>)</div><div class="line">```java</div><div class="line">		 <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Variable</span> </span>&#123;</div><div class="line">			   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">				    &#123;</div><div class="line">                        <span class="keyword">int</span> j = <span class="number">10</span>;</div><div class="line">					&#125;</div><div class="line">                    <span class="keyword">int</span> j = <span class="number">10</span>;</div><div class="line">           &#125;</div></pre></td></tr></table></figure>
<pre><code>//这是对的,因为第一个j声明的作用区间为它所在的大括号,第二个j再声明,和它就不冲突
(2)
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Variable</span> </span>&#123;</div><div class="line">	   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		    <span class="keyword">int</span> j = <span class="number">10</span>;  </div><div class="line">                  &#123;</div><div class="line">                      <span class="keyword">int</span> j = <span class="number">10</span>;</div><div class="line">			&#125;</div><div class="line">       &#125;</div></pre></td></tr></table></figure>
<pre><code>//这是错的,因为第一个j声明的作用区间为它所在的大括号,即整个main方法,第二个j再在main方法中声明,就产生了冲突
d.变量不允许重复定义
</code></pre><h3 id="6-数据类型转换"><a href="#6-数据类型转换" class="headerlink" title="6.数据类型转换"></a>6.数据类型转换</h3><pre><code>* 自动类型转换：(也叫自动类型提升,或叫隐式转换)
    *取值范围小的与取值范围大的数据数据类型做运算时,取值范围小的类型会自动提升为取值范围大的数据类型
    *表示范围小的数据类型转换成范围大的数据类型,如byte转成int
    *自动类型转换格式：
        范围大的数据类型 变量 = 范围小的数据类型值；
        如：
                double d = 1000;
        或
                int i = 100;
                double d2 = i;
* 强制类型转换：
    * 表示范围大的数据类型转换成范围小的数据类型
     *强制类型转换格式：
        范围小的数据类型  变量 = (范围小的数据类型) 范围大的数据类型值;
        如：
                int  i = (int)6.718;   //i的值为6
        或
                double  d = 3.14;
                int  i2 = (int)d;     //i2的值为3
* 注意：
    *布尔类型不参与类型转换
    *byte &lt; short &lt; int &lt; long &lt; float &lt; double
    *
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">byte</span> b = (<span class="keyword">byte</span>)<span class="number">200</span>;</div><div class="line">System.out.println(b);<span class="comment">//注意输出结果不是127,因为会损失精度</span></div></pre></td></tr></table></figure>
<pre><code>*
    byte b = 10;这是对的.不要以为10为int类型,赋值给byte就需要强制转换.   
    只要需要赋值的数据值,在byte范围(-128-127)内,就是对的,不需要强制转换.因为java中常量优化机制,只要在范围内自己转换
*
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">byte</span> b1=<span class="number">3</span>,b2=<span class="number">4</span>;</div><div class="line">   <span class="keyword">byte</span> b = b1+b2;<span class="comment">// 错</span></div></pre></td></tr></table></figure>
<pre><code>    因为b1和b2都是byte类型变量,在参加运算时要先转成int类型,所以b1+b2的结果为int类型,把int类型的数据赋值给byte类型的b,就会损失精度,导致编译报错
    byte b = 3+4;//对 
    解释一:3和4都是int类型的常量,java虚拟机有常量优化机制,编译时就能确实3+4的结果为7,然后把7赋值给byte类型的b,7正好在byte数据范围内,会有一个隐式类型转换,可以赋值成功
    解释二:给出了固定值,和不超过范围.由java底层常量优化机制,即可自动转换.如果是byte b = 300+4;那就错了
*
     char c = 98;这是对的,不要以为没加&apos;&apos;,就不是字符.由Ascii码表,只要数字范围i在(0-65535),就可以Ascii为单个字符
*
    long可以自动类型变换至float的原因: 
    (1)它们底层的存储结构不同
    (2)遵循IEEE-754格式标准,float类型的指数可从-126到128.float表示的数据范围比long型的范围要大
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[02.注释、关键字、标识符]]></title>
      <url>https://geekhoon.github.io/2017/01/08/02-%E6%B3%A8%E9%87%8A%E3%80%81%E5%85%B3%E9%94%AE%E5%AD%97%E3%80%81%E6%A0%87%E8%AF%86%E7%AC%A6/</url>
      <content type="html"><![CDATA[<h3 id="1-注释"><a href="#1-注释" class="headerlink" title="1.注释"></a>1.注释</h3><pre><code>* 编译时,编译器会忽略注释
* 包含
    * 单行注释:// 
    * 多行注释:/*....*/ 
    * 文档注释:/**...*/ 
* 多行注释不能嵌套多行注释
</code></pre><h3 id="2-关键字"><a href="#2-关键字" class="headerlink" title="2.关键字"></a>2.关键字</h3><pre><code>* 被JAVA赋予特殊含义,具有专门用途的单词
* JAVA中关键字均为小写
* main不是关键字
</code></pre><h3 id="3-标识符"><a href="#3-标识符" class="headerlink" title="3.标识符"></a>3.标识符</h3><pre><code>* JAVA中,程序员自己定义的内容
* 规则: 
    * 1.组成:字母52个(a-z,A-Z)、数字(0-9)、下划线_、美元符$
    * 2.注意:不能以数字开头、不能是关键字、标识符不能有空格、严格区分大小写
    * 3.类的名字:首字母大写,第二个单词开始首字母大写
    * 4.方法名字与变量名一样:首字母小写,第二个单词开始首字母大写 
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[01.JAVA开发概述及HelloWorld]]></title>
      <url>https://geekhoon.github.io/2017/01/08/01-JAVA%E5%BC%80%E5%8F%91%E6%A6%82%E8%BF%B0%E5%8F%8AHelloWorld/</url>
      <content type="html"><![CDATA[<h2 id="一-JAVA环境搭建"><a href="#一-JAVA环境搭建" class="headerlink" title="一.JAVA环境搭建"></a>一.JAVA环境搭建</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h3><pre><code>* 创始团队:詹姆斯-高斯林
* sun开发,已被oracle收购.
* 版本(平台)
    * JAVASE(标准版):开发简单桌面应用,不能开发大型项目.也叫J2SE 
    * JAVAEE(企业版或Web版):可做电商、企业级应用(如ERP、CRM、BOS、OA等)，也叫J2EE
    * JAVAME（嵌入式开发）：也叫J2ME
</code></pre><a id="more"></a>
<h3 id="2-常用DOS命令"><a href="#2-常用DOS命令" class="headerlink" title="2.常用DOS命令"></a>2.常用DOS命令</h3><pre><code>* 清屏：cls(clear screen)
* 切换盘符：盘符:
* 进入指定目录：cd（change directory）
* 返回上一级目录：cd..
* 返回盘符根目录：cd\
* 进入其他盘符文件夹：cd 盘符:\文件夹名
* 显示当前目录下的文件和子目录信息：dir
</code></pre><h3 id="3-开发环境"><a href="#3-开发环境" class="headerlink" title="3.开发环境"></a>3.开发环境</h3><pre><code>* JDK(JAVA Development Kit):java开发工具包
* JDK包含
    * JRE(JAVA Runtime Environment):JAVA运行环境
    * JAVA开发工具
</code></pre><h3 id="4-跨平台特性"><a href="#4-跨平台特性" class="headerlink" title="4.跨平台特性"></a>4.跨平台特性</h3><pre><code>* 平台指操作系统(Windows/Linux/mac)
* 一次编写,到处运行
* 跨平台特性依赖于JVM(JAVA Virtual Machine)
* JRE包含
    * JVM 
    * 类库  
</code></pre><h2 id="二-HelloWorld"><a href="#二-HelloWorld" class="headerlink" title="二.HelloWorld"></a>二.HelloWorld</h2><pre><code>* 源文件:  .java 
* 编译(编译器):    .java   →    .class(字节码文件)
* 运行(解释器):    运行.class
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"HelloWorld"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意:</strong><br><strong>1.class前加上public,类名(HelloWorld)要与文件名(HelloWorld.java)一致,不加public,类名可换成其他</strong><br><strong>2.主方法是程序的入口,被虚拟机调用,它能保证程序的独立运行</strong><br>编译:<code>javac HelloWorld.java</code><br>编译时HelloWorld.java可以写成helloworld.java,因为对源文件来说HellWorld.java和helloworld.java所指的源文件是唯一的<br>运行:<code>java HelloWorld</code><br>运行时HelloWorld是类名,不能写成helloworld</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JAVA基础题]]></title>
      <url>https://geekhoon.github.io/2017/01/05/JAVA%E5%9F%BA%E7%A1%80%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>1.Java注释有3种，单行注释、多行注释和文档注释，下列有关注释的说法，不正确的是（）</p>
<p>A. 注释指的是用来对程序的某个功能或者某行代码进行解释说明<br>B. 注释只在Java源文件中有效<br>C. 在多行注释中，能够嵌套多行注释<br>D. 注释不会被编译到class字节码文</p>
<p>2.下面哪种类型的文件可以在Java虚拟机中运行？（）</p>
<p>A. .java<br>B. .jre<br>C. .exe<br>D. .class<br><a id="more"></a><br>3.下列关于变量和常量的说法正确的是（）</p>
<p>A. 常量表示不能被改变的值，例如1、2、“abc”都是常量<br>B. 常量表示常见的变量<br>C. int x = 0;代码中，x表示常量，0表示变量<br>D. 在同一个大括号｛｝内，定义的变量不能够重名</p>
<p>4.下列定义变量格式，错误的是（）</p>
<p>A. float x,y=0;<br>B. float f = 1999.99F;<br>C. String str = 字符串;<br>D. char x = ‘0’;</p>
<p>5.下列各种符号的定义格式，那种在java语言中是错误的变量定义（）</p>
<p>A. int myVal =1;<br>B. char $myVal =1;<br>C. byte _myVal =1;<br>D.float 3.14myVal=1;</p>
<p>6.Java语言中的int及char数据类型的长度分别为（）</p>
<p>A. 16位和8位<br>B. 8位和16位<br>C. 32位和16位<br>D. 32位和8位</p>
<p>7.语句System.out.println(1+2+”java”+3+4)输出的结果是（）</p>
<p>A. 3java34<br>B. 12java34<br>C. 3java7<br>D. 12java7</p>
<p>8.下列关于Java函数的说法不正确的是（）</p>
<p>A.函数也叫方法，函数就是定义在类中，具有特定功能的一段小程序<br>B.方法体中不能有任何代码（抽象函数除外）<br>C.函数必须先定义，才能被调用<br>D.函数（构造函数除外）要有返回值类型</p>
<p>9.以下关于函数重载的说法正确的有（）</p>
<p>A. 方法名必须一样<br>B. 与返回值类型无关<br>C. 参数个数或者顺序不一样<br>D. 参数类型不一样</p>
<p>10.关于数组的说法，正确的是（）</p>
<p>A. 数组里面存放的是相同类型的数据<br>B. 获取数组的长度使用length属性<br>C. 获取数组的大小使用size方法<br>D. 数组的长度是可变的</p>
<p>11.想要结果输出为0，则可以做哪些修改？（）</p>
<pre><code>int [] arr = new int[1];
arr[0] = 3;               
System.out.println( arr[1] )
</code></pre><p>A. 2修改为<code>arr[3] = 0;</code><br>B. 3修改为<code>System.out.println(0)</code><br>C. 1修改为<code>int [ ] arr = new int[2];</code><br>D. 不用修改了，结果就是0会报错</p>
<p>12.下列二维数组定义错误的是（）</p>
<pre><code>A.int[][] arr = new int[3][2];
B.int arr[][] = new int[3][]; 
C.int[][] arr = {{1,2,3},{4,5},{6,7,8,9}};
D.int arr[][] ={{2,3},{6},9};
</code></pre><p>13.下面代码的运行结果是（）</p>
<pre><code class="java"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{
    <span class="keyword">int</span> x = <span class="number">80</span>;
    x ++;
    <span class="keyword">switch</span>(x){
        <span class="keyword">case</span> <span class="number">80</span>:
        System.out.println(<span class="number">80</span>);
        <span class="keyword">case</span> <span class="number">81</span>:
        System.out.println(<span class="number">81</span>);
        <span class="keyword">default</span>:
        System.out.println(<span class="number">82</span>);
    }
}
</code></pre>
<p>A. 80<br>B. 80 81<br>C. 81<br>D. 81 82</p>
<p>14.下面程序运行的结果是（）</p>
<pre><code class="java"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{
    <span class="keyword">int</span> a = <span class="number">1</span>;
    <span class="keyword">if</span>(a++&gt;<span class="number">1</span>){
        System.out.println(a);
    }<span class="keyword">else</span>{
        System.out.println(a);
    }
}
</code></pre>
<p>A.1<br>B.2<br>C.0<br>D.编译报错</p>
<p><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>答案:1~5:C,D,AD,C,D 6~10:C,A,B,ABCD,AB 11~14:BC,D,D,B</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[致自己]]></title>
      <url>https://geekhoon.github.io/2017/01/01/%E8%87%B4%E8%87%AA%E5%B7%B1/</url>
      <content type="html"><![CDATA[<blockquote>
<p>做一件事,如果过程中你就怕了,退缩了,那不论结果成功还是失败,你都已经输了。</p>
</blockquote>
]]></content>
    </entry>
    
  
  
</search>
